<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Android | Michael Evans]]></title>
  <link href="http://michaelevans.org/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://michaelevans.org/"/>
  <updated>2025-07-13T00:38:37-04:00</updated>
  <id>http://michaelevans.org/</id>
  <author>
    <name><![CDATA[Michael Evans]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Smooth Theme Transitions in Compose with Animated ColorSchemes]]></title>
    <link href="http://michaelevans.org/blog/2025/07/01/smooth-theme-transitions-in-compose-with-animated-colorschemes/"/>
    <updated>2025-07-01T23:38:27-04:00</updated>
    <id>http://michaelevans.org/blog/2025/07/01/smooth-theme-transitions-in-compose-with-animated-colorschemes</id>
    <content type="html"><![CDATA[<p>If your Jetpack Compose app supports light and dark themes, you’ve probably noticed the default behavior: a sudden cut between color schemes when the system UI mode changes.</p>

<p>I think we&rsquo;ve all seen theme changes that look like this:</p>

<p><video width='270' height='600' preload='none' controls ><source src='/images/2025/07/01/instant.webm' type='video/webm; codecs=vp8, vorbis'>Your browser does not support the video tag.</video></p>

<p>We can do better.</p>

<p>By wrapping your theme setup with some animation, we can achieve <strong>smooth transitions between light and dark themes</strong> that feel much more polished — without rebuilding your entire app structure.</p>

<!-- more -->


<p></p>

<h2>The Idea: Animate the ColorScheme</h2>

<p>Jetpack Compose’s <code>MaterialTheme</code> accepts a <code>ColorScheme</code>. If we gradually animate the colors inside that scheme when the system toggles between dark and light, we can fade the colors smoothly across the entire app.</p>

<p>Here’s a simplified example:</p>

<p>```
@Composable
fun AnimatedTheme(</p>

<pre><code>darkTheme: Boolean = isSystemInDarkTheme(),
content: @Composable () -&gt; Unit
</code></pre>

<p>) {</p>

<pre><code>val targetScheme = if (darkTheme) DarkColorScheme else LightColorScheme

val animatedScheme = targetScheme.copy(
    primary = animateColorAsState(targetScheme.primary).value,
    background = animateColorAsState(targetScheme.background).value,
    surface = animateColorAsState(targetScheme.surface).value,
    onPrimary = animateColorAsState(targetScheme.onPrimary).value,
    // Add more swatches as needed...
)

MaterialTheme(
    colorScheme = animatedScheme,
    typography = Typography,
    shapes = Shapes,
    content = content
)
</code></pre>

<p>}
```</p>

<p>You can expand this to include all 20+ color swatches if you want — but we’ll show a better way shortly.</p>

<hr />

<h2>The Problem: Too Many Animations</h2>

<p>Manually animating every color swatch with <code>animateColorAsState</code> works, but:</p>

<ul>
<li>It’s <strong>verbose</strong></li>
<li>It runs <strong>a lot of recompositions</strong> (even for unused swatches)</li>
<li>It can be <strong>hard to keep up</strong> if <code>ColorScheme</code> changes</li>
</ul>


<hr />

<h2>A Better Approach: Animating with updateTransition</h2>

<p>A cleaner solution is to animate all properties as part of a single <code>Transition</code>. That way, Compose shares the animation clock and easing, and you&rsquo;re not scattering a dozen independent animation calls.</p>

<p>```
private fun defaultColorTransitionSpec(): FiniteAnimationSpec<Color> =</p>

<pre><code>tween(durationMillis = 500, easing = LinearOutSlowInEasing)
</code></pre>

<p>@Composable
fun AnimatedTheme(</p>

<pre><code>darkTheme: Boolean = isSystemInDarkTheme(),
content: @Composable () -&gt; Unit
</code></pre>

<p>) {</p>

<pre><code>val targetScheme = if (darkTheme) DarkColorScheme else LightColorScheme
val transition = updateTransition(targetScheme, label = "themeTransition")

val primary by transition.animateColor(
    label = "primary",
    transitionSpec = { defaultColorTransitionSpec() }) { it.primary }
val background by transition.animateColor(
    label = "background",
    transitionSpec = { defaultColorTransitionSpec() }) { it.background }
val surface by transition.animateColor(
    label = "surface",
    transitionSpec = { defaultColorTransitionSpec() }) { it.surface }
val onPrimary by transition.animateColor(
    label = "onPrimary",
    transitionSpec = { defaultColorTransitionSpec() }) { it.onPrimary }

val animatedScheme = targetScheme.copy(
    primary = primary,
    background = background,
    surface = surface,
    onPrimary = onPrimary
)
MaterialTheme(colorScheme = animatedScheme, content = content)
</code></pre>

<p>}
```</p>

<p>This version:</p>

<ul>
<li>Uses a single <code>Transition</code> to group related animations</li>
<li>Shares the same easing/duration across all swatches</li>
<li>Is easier to extend or modify incrementally</li>
</ul>


<p>After we add our animations, it will look more like this:</p>

<p><video width='270' height='600' preload='none' controls ><source src='/images/2025/07/01/animated.webm' type='video/webm; codecs=vp8, vorbis'>Your browser does not support the video tag.</video></p>

<hr />

<h2>Final Notes</h2>

<ul>
<li>If you want to animate <strong>all</strong> color properties, you&rsquo;ll still need to call <code>animateColor</code> for each one — but this pattern scales better than copy-pasting 25 <code>animateColorAsState</code> calls.</li>
<li>For most apps, animating just a <strong>handful</strong> of swatches (<code>primary</code>, <code>background</code>, <code>surface</code>, <code>onPrimary</code>, <code>error</code>) gives most of the perceived polish.</li>
<li>Avoid using reflection or deep copying here — it’s better to be explicit and in control of what’s animated.</li>
</ul>


<hr />

<h2>Wrap-Up</h2>

<p>This technique brings a much smoother feel to your app, especially if your users frequently switch between light and dark mode (or you support a manual toggle).</p>

<p>(Hopefully the Compose team eventually provides a helper for this boilerplate.)</p>

<p>Happy theming!</p>

<h2>Sample Code</h2>

<p>Want to try it out yourself? I’ve published a small sample project on GitHub that demonstrates both animated and non-animated theme switching:</p>

<p><a href="https://github.com/MichaelEvans/AnimatedThemeExample">View the sample project on GitHub</a></p>

<p>It includes the exact code from this post and the toggle UI shown in the GIFs.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Turning Any Android Callback into a Flow with callbackFlow]]></title>
    <link href="http://michaelevans.org/blog/2025/03/22/turning-any-android-callback-into-a-flow-with-callbackflow/"/>
    <updated>2025-03-22T23:10:16-04:00</updated>
    <id>http://michaelevans.org/blog/2025/03/22/turning-any-android-callback-into-a-flow-with-callbackflow</id>
    <content type="html"><![CDATA[<p>If you&rsquo;ve been working with Android for any amount of time, you&rsquo;ve probably run into APIs that expose their results using callbacks or listeners. Whether it&rsquo;s something like <code>LocationManager</code>, a custom SDK, or a third-party service like Firebase, you&rsquo;re often stuck adapting old-school async patterns into your modern reactive code.</p>

<p>This approach is especially helpful in apps using Jetpack Compose, coroutines, or unidirectional data flow.</p>

<p>Fortunately, Kotlin&rsquo;s <code>callbackFlow</code> makes this much easier. In this post, we&rsquo;ll show how to wrap a listener-based API using <code>callbackFlow</code>, so you can collect updates as a <code>Flow</code>. We&rsquo;ll use the Firebase Realtime Database as an example, but this pattern works for nearly anything.</p>

<!-- more -->


<h2>The Problem: Listeners Aren’t Reactive</h2>

<p>Here’s the classic way of listening to changes in the Firebase Realtime Database:</p>

<p>```
val postListener = object : ValueEventListener {</p>

<pre><code>override fun onDataChange(dataSnapshot: DataSnapshot) {
    val post = dataSnapshot.getValue&lt;Post&gt;()
    // update UI
}

override fun onCancelled(error: DatabaseError) {
    Log.w(TAG, "loadPost:onCancelled", error.toException())
}
</code></pre>

<p>}
postReference.addValueEventListener(postListener)
```</p>

<p>This works fine — but it’s imperative and not easily composable with things like <code>StateFlow</code>, <code>LiveData</code>, or Jetpack Compose. Let’s fix that.</p>

<h2>The Fix: Wrap It with callbackFlow</h2>

<p>Kotlin’s <code>callbackFlow</code> is designed for exactly this kind of situation — where you need to bridge a listener-based API into a reactive stream.</p>

<p>Here’s what it looks like for Firebase:</p>

<p>```
fun Query.asFlow(): Flow<DataSnapshot> = callbackFlow {</p>

<pre><code>val listener = object : ValueEventListener {
    override fun onDataChange(snapshot: DataSnapshot) {
        trySend(snapshot).isSuccess // emit each snapshot into the Flow
    }

    override fun onCancelled(error: DatabaseError) {
        close(error.toException()) // cancel the flow on error
    }
}

// Start listening for updates
addValueEventListener(listener)

// Suspend until the flow is closed or cancelled, then clean up
awaitClose { removeEventListener(listener) }
</code></pre>

<p>}
```</p>

<p>Let’s break that down:</p>

<ul>
<li><code>callbackFlow { ... }</code>: Gives you a coroutine-safe way to emit values (<code>send</code> / <code>trySend</code>) from a callback-based API.</li>
<li><code>trySend(snapshot)</code>: Emits a value into the flow. This is non-blocking and returns a <code>ChannelResult</code>, which we&rsquo;re ignoring here.</li>
<li><code>close(error.toException())</code>: If the Firebase listener is cancelled, we close the flow with the exception. This cancels any active collectors.</li>
<li><code>awaitClose { ... }</code>: Suspends the coroutine until the collector stops collecting (i.e., it’s cancelled or the flow completes), and is the right place to clean up listeners or resources.</li>
</ul>


<p>The result is a clean <code>Flow&lt;DataSnapshot&gt;</code> that behaves just like you’d want: it emits every time Firebase sends an update and automatically stops listening when the consumer stops collecting.</p>

<h2>Consuming the Flow</h2>

<p>You can now collect this from anywhere in your app. Here’s a quick example:</p>

<p>```
lifecycleScope.launch {</p>

<pre><code>postReference.asFlow().collect { snapshot -&gt;
    val post = snapshot.getValue&lt;Post&gt;()
    // Update UI or state
}
</code></pre>

<p>}
```</p>

<p>This could also be collected in a <code>ViewModel</code>, transformed with <code>map</code>, or turned into Compose <code>State</code>. But that’s outside the scope of this post — we just wanted to show the full round trip here.</p>

<h2>A Note on <code>.snapshots</code></h2>

<p>If you’re using the Firebase Realtime Database, you might have seen the (relatively new) <code>snapshots</code> extension, which does exactly this out of the box:</p>

<p><code>
postReference.snapshots.collect { snapshot -&gt; /* ... */ }
</code></p>

<p>So if you’re only dealing with Firebase, you might not need your own wrapper. But the <code>callbackFlow</code> approach is still incredibly useful for any API that doesn’t have a ready-made Flow extension.</p>

<h2>Wrap-Up</h2>

<p><code>callbackFlow</code> is a powerful tool for adapting listener-based or callback-heavy APIs into clean, composable Kotlin Flows. Once you wrap something like this, you can:</p>

<ul>
<li>Collect updates in your <code>ViewModel</code> or UI layer</li>
<li>Combine it with other Flows</li>
<li>Debounce, map, retry, or buffer updates</li>
</ul>


<p>Firebase was just the example here — but this trick works great for things like:</p>

<ul>
<li><code>SensorManager</code></li>
<li><code>TextWatcher</code></li>
<li><code>LocationManager</code></li>
<li>WebSocket libraries</li>
<li>Custom event systems</li>
</ul>


<p>Once you get used to wrapping listeners this way, it’s hard to go back.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Understanding Referrals using Google Play]]></title>
    <link href="http://michaelevans.org/blog/2024/06/27/understanding-referrals-using-google-play/"/>
    <updated>2024-06-27T19:41:33-04:00</updated>
    <id>http://michaelevans.org/blog/2024/06/27/understanding-referrals-using-google-play</id>
    <content type="html"><![CDATA[<p>Tracking how users install your app can be tricky, especially when you want to measure the effectiveness of your campaigns or ads. That’s where the <a href="https://developer.android.com/google/play/installreferrer">Google Play Install Referrer API</a> comes in handy—it gives you reliable data about how users found your app.</p>

<p>If you’re developing an Android application, this guide will walk you through how to set up and use the InstallReferrerClient with Kotlin&rsquo;s callbackFlow to make integration simpler and more maintainable.</p>

<h3>What is the Install Referrer?</h3>

<p>The install referrer contains information about the source of the app installation. For example, if a user clicks an ad campaign link that leads to your app’s Play Store page, the referrer might include details about the campaign source, medium, or other specifics.</p>

<p>Here’s how this data can help:</p>

<ul>
<li>Attribution: Identify which campaigns drive installs.</li>
<li>Measure Success: Evaluate your marketing efforts' impact.</li>
<li>Prevent Fraud: Verify referrer data to avoid fraudulent installs.</li>
</ul>


<h3>Setting Up and Using the InstallReferrerClient</h3>

<p>Step 1: Add the Dependency</p>

<p>First, include the Install Referrer library in your build.gradle file:</p>

<p><code>
implementation 'com.android.installreferrer:installreferrer:2.2'
</code></p>

<p>Step 2: Use <code>callbackFlow</code> for our implementation</p>

<p>The InstallReferrerClient is callback-based, but Kotlin’s <code>callbackFlow</code> lets you handle this more elegantly. Here’s an example:</p>

<p>```
import com.android.installreferrer.api.InstallReferrerClient
import com.android.installreferrer.api.InstallReferrerStateListener
import com.android.installreferrer.api.ReferrerDetails
import kotlinx.coroutines.channels.awaitClose
import kotlinx.coroutines.flow.callbackFlow</p>

<p>fun fetchInstallReferrer(context: Context) = callbackFlow {</p>

<pre><code>val referrerClient = InstallReferrerClient.newBuilder(context).build()

val listener = object : InstallReferrerStateListener {
    override fun onInstallReferrerSetupFinished(responseCode: Int) {
        when (responseCode) {
            InstallReferrerClient.InstallReferrerResponse.OK -&gt; {
                try {
                    val response: ReferrerDetails = referrerClient.installReferrer
                    trySend(Result.success(response))
                } catch (e: Exception) {
                    trySend(Result.failure(e))
                } finally {
                    referrerClient.endConnection()
                }
            }
            InstallReferrerClient.InstallReferrerResponse.FEATURE_NOT_SUPPORTED -&gt; {
                trySend(Result.failure(UnsupportedOperationException("Feature not supported")))
            }
            InstallReferrerClient.InstallReferrerResponse.SERVICE_UNAVAILABLE -&gt; {
                trySend(Result.failure(IllegalStateException("Service unavailable")))
            }
        }
    }

    override fun onInstallReferrerServiceDisconnected() {
        // Handle service disconnection if needed
    }
}

referrerClient.startConnection(listener)

awaitClose {
    referrerClient.endConnection()
}
</code></pre>

<p>}
```</p>

<p>Step 3: Consuming the Flow</p>

<p>Collect the flow to retrieve and process the install referrer details:</p>

<p>```
fetchInstallReferrer(context).collect { result &ndash;></p>

<pre><code>    result.onSuccess { referrerDetails -&gt;
        val referrerUrl = referrerDetails.installReferrer
        val clickTimestamp = referrerDetails.referrerClickTimestampSeconds
        val installTimestamp = referrerDetails.installBeginTimestampSeconds

        println("Referrer URL: $referrerUrl")
        println("Click Time: $clickTimestamp")
        println("Install Time: $installTimestamp")
    }

    result.onFailure { exception -&gt;
        println("Error: ${exception.message}")
    }
}
</code></pre>

<p>```</p>

<h3>Wrapping Up</h3>

<p>With this data, you&rsquo;ll gain valuable insights into your app’s install sources, helping you make data-driven marketing decisions. Happy coding!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Accessing Test Resources using Kotlin Multiplatform]]></title>
    <link href="http://michaelevans.org/blog/2024/04/17/accessing-test-resources-using-kotlin-multiplatform/"/>
    <updated>2024-04-17T20:11:01-04:00</updated>
    <id>http://michaelevans.org/blog/2024/04/17/accessing-test-resources-using-kotlin-multiplatform</id>
    <content type="html"><![CDATA[<p>Kotlin Multiplatform (KMP) offers a powerful way to share code across platforms like Android, iOS, and the JVM. However, when it comes to testing, you might encounter a common challenge: how to handle test resources such as JSON files, configurations, or other data needed for tests. In this post, we’ll dive into strategies for accessing test resources in KMP projects.</p>

<h3>Why Test Resources Matter</h3>

<p>Test resources are essential for validating your code against real-world scenarios. For example, if you’re writing a library to parse JSON, you’d want to test it against diverse JSON samples representing different edge cases. While resource access is straightforward in single-platform projects, KMP’s multi-target nature requires some additional setup.</p>

<h3>The Challenge in Kotlin Multiplatform</h3>

<p>In KMP, test code resides in the <code>commonTest</code> source set, but resources aren’t directly bundled with it. Each platform manages file paths and resource access differently, so you need platform-specific setups for your resources and shared logic to load them efficiently.</p>

<h3>Organizing Test Resources</h3>

<p>Start by structuring your resources in a way that aligns with your project layout:</p>

<p>```
project-root/
  src/</p>

<pre><code>commonTest/
  kotlin/
    ...
androidTest/
  resources/
    test-data.json
jvmTest/
  resources/
    test-data.json
iosTest/
  resources/
    test-data.json
</code></pre>

<p>```</p>

<p>This setup ensures that each target platform can access its respective resources while keeping them logically grouped.</p>

<h3>Loading Resources by Platform</h3>

<p>For Android, place your test resources in the <code>androidTest/resources</code> directory. Use the <code>javaClass.classLoader</code> to load them:</p>

<p>```
fun loadTestResource(resourceName: String): String {</p>

<pre><code>val inputStream = javaClass.classLoader?.getResourceAsStream(resourceName)
return inputStream?.bufferedReader()?.use { it.readText() }
    ?: throw IllegalArgumentException("Resource not found: $resourceName")
</code></pre>

<p>}
```</p>

<p>For iOS, add your resources to the test target in Xcode. Use platform-specific code to load them:</p>

<p>```
import platform.Foundation.*</p>

<p>fun loadTestResource(resourceName: String): String {</p>

<pre><code>val bundle = NSBundle.bundleForClass(MyTestClass::class)
val path = bundle.pathForResource(resourceName, ofType = null)
    ?: throw IllegalArgumentException("Resource not found: $resourceName")
return NSString.stringWithContentsOfFile(path, encoding = NSUTF8StringEncoding, error = null) as String
</code></pre>

<p>}
```</p>

<h3>Sharing the Resource Loader</h3>

<p>To avoid duplication, define a common function in <code>commonTest</code> and use the <code>expect/actual</code> pattern for platform-specific implementations:</p>

<p>```
// commonTest
expect fun loadTestResource(resourceName: String): String</p>

<p>// androidTest
actual fun loadTestResource(resourceName: String): String {</p>

<pre><code>val inputStream = javaClass.classLoader?.getResourceAsStream(resourceName)
return inputStream?.bufferedReader()?.use { it.readText() }
    ?: throw IllegalArgumentException("Resource not found: $resourceName")
</code></pre>

<p>}</p>

<p>// iosTest
actual fun loadTestResource(resourceName: String): String {</p>

<pre><code>val bundle = NSBundle.bundleForClass(MyTestClass::class)
val path = bundle.pathForResource(resourceName, ofType = null)
    ?: throw IllegalArgumentException("Resource not found: $resourceName")
return NSString.stringWithContentsOfFile(path, encoding = NSUTF8StringEncoding, error = null) as String
</code></pre>

<p>}
```</p>

<p>Putting It All Together</p>

<p>With this setup, your <code>commonTest</code> code can seamlessly access resources across platforms. For example:</p>

<p>```
@Test
fun testJsonParsing() {</p>

<pre><code>val jsonData = loadTestResource("test-data.json")
val parsedData = parseJson(jsonData)
assertEquals(expectedData, parsedData)
</code></pre>

<p>}
```</p>

<p>Accessing test resources in Kotlin Multiplatform involves a bit of extra setup, but the payoff is a unified testing strategy across platforms. By leveraging the expect/actual pattern, you can create platform-specific resource loaders while keeping your test logic shared and consistent. Dive into KMP’s capabilities, and streamline your tests for every target platform!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building Flipper Plugins for Fun and Profit]]></title>
    <link href="http://michaelevans.org/blog/2022/09/28/flipper-plugins-for-fun-and-profit/"/>
    <updated>2022-09-28T23:41:17-04:00</updated>
    <id>http://michaelevans.org/blog/2022/09/28/flipper-plugins-for-fun-and-profit</id>
    <content type="html"><![CDATA[<p>A long, long time ago, I wrote a <a href="http://michaelevans.org/blog/2020/03/10/improving-app-debugging-with-flipper/">blog post</a> about how I was using <a href="https://fbflipper.com/">Flipper</a> as one of my favorite development tools. Since then, Android Studio has come a long way adding tons of features like a new <a href="https://androidstudio.googleblog.com/2022/03/android-studio-dolphin-canary-6-now.html">Logcat</a> and <a href="https://developer.android.com/studio/debug/layout-inspector">Layout Inspector</a>.</p>

<p>However, there are often times that you&rsquo;ll need a tool more specific to your own workflow that Android Studio doesn&rsquo;t provide, and that&rsquo;s exactly where Flipper&rsquo;s extensibility really shines. As an example, I&rsquo;d like to go through building a custom plugin for Flipper, similar to one that I&rsquo;ve used on my own projects, that demonstrates how easy it is to get started building these tools.</p>

<!-- more -->


<h2>The Problem</h2>

<p>As most apps grow, there becomes a need to measure app usage and engagement to better understand user behavior. In order to measure that, we often turn to analytics libraries (like <a href="https://firebase.google.com/docs/analytics">Firebase Analytics</a>) to handle this in-app behavior reporting. However, when implementing these client events, it&rsquo;s often helpful to have a quick feedback loop to ensure that the event and associated payload are correct, without having to check an analytics dashboard (which can often take some time to refresh).</p>

<p>Luckily, most analytics libraries (including Firebase) have different solutions for this problem. In the Firebase Analytics library, the recommended debugging method is <a href="https://firebase.google.com/docs/analytics/events?platform=android#view_events_in_the_android_studio_debug_log">to set a property with ADB</a> to log all the events to logcat. This does provide much faster feedback than checking a dashboard, but it&rsquo;s not the most user friendly &ndash; developers need to set the property at the command line, and need to be monitoring logcat for all of the events (and also doesn&rsquo;t offer much of a search/filter function).</p>

<h2>The Solution</h2>

<p>Rather than sticking to plain text in logcat, we can build a custom Flipper plugin that will display our analytics events in a filterable table. Most Flipper plugins are comprised of two parts &ndash; a client library that runs as part of your Android app, and a desktop plugin that runs inside Flipper for processing and displaying the data sent by the client.</p>

<p>All of the code for this example can be found in this example <a href="https://github.com/MichaelEvans/FlipperPluginSample">Github Repository</a>.</p>

<h3>Part 1: Client Side</h3>

<p>On the Android side, you&rsquo;ll need to add the <a href="https://fbflipper.com/docs/getting-started/android-native/">Flipper SDK</a> if you haven&rsquo;t already. If you have Flipper set up already, you can skip to the next section. If not, here&rsquo;s a quick run-down:</p>

<h4>Add Flipper</h4>

<p>Add the Gradle dependencies:
```
dependencies {
  debugImplementation &lsquo;com.facebook.flipper:flipper:0.164.0&rsquo;
  debugImplementation &lsquo;com.facebook.soloader:soloader:0.10.4&rsquo;</p>

<p>  releaseImplementation &lsquo;com.facebook.flipper:flipper-noop:0.164.0&rsquo;
}
```</p>

<p>Configure your Application class:
```
class MyApplication : Application {
  override fun onCreate() {</p>

<pre><code>super.onCreate()
SoLoader.init(this, false)

if (BuildConfig.DEBUG &amp;&amp; FlipperUtils.shouldEnableFlipper(this)) {
  val client = AndroidFlipperClient.getInstance(this)
  client.addPlugin(InspectorFlipperPlugin(this, DescriptorMapping.withDefaults()))
  client.start()
}
</code></pre>

<p>  }
}
```</p>

<h4>Building the Plugin</h4>

<p>And now it&rsquo;s time to build the plugin! Create a class to hold your plugin logic (For this example, I will call mine <code>AnalyticsPlugin</code>). For the purposes of this sample, it&rsquo;ll be a singleton <code>object</code> for reasons that we&rsquo;ll see later.</p>

<p>We&rsquo;ll subclass the <code>BufferingFlipperPlugin</code> class, rather than <code>FlipperPlugin</code>, because the bufffering version will keep our events in a buffer until the connection is made with the desktop client (so that we don&rsquo;t lose any events).</p>

<p>We need to override <code>getId()</code>, which is how Flipper will correlate our client plugin with the matching desktop plugin, and <code>runInBackground()</code> in order to tell Flipper to keep communicating with the desktop client, even if our plugin isn&rsquo;t the currently in the foreground.</p>

<p>Lastly, we&rsquo;re going to create a <code>reportEvent</code> method, which will send whatever data we want to the server. In this example, we&rsquo;ll send a unique identifier for the event, the event name, and the timestamp that the event occured at. <strong>Note: <code>FlipperObject</code> can even be constructed by using JSON text or a <code>JSONObject</code>!</strong></p>

<p>Here&rsquo;s what our plugin might look like:</p>

<p>```
object AnalyticsPlugin : BufferingFlipperPlugin() {</p>

<pre><code>fun reportEvent(eventName: String) {
    val flipperObject = FlipperObject.Builder()
        .put("id", UUID.randomUUID())
        .put("event", eventName)
        .put("timestamp", Date().toLocaleString())
        .build()
    send("newRow", flipperObject)
}

override fun getId(): String {
    return "org.michaelevans.flipper.analytics"
}

override fun runInBackground(): Boolean {
    return true
}
</code></pre>

<p>}
```</p>

<p>After we create our plugin, we&rsquo;ll need to go back to our Application class to install our plugin, just like we would with the pre-loaded ones:</p>

<p><code>
val flipperClient = AndroidFlipperClient.getInstance(this)
  // ...
flipperClient.addPlugin(AnalyticsPlugin)
flipperClient.start()
</code></p>

<p>The last thing we need to do is actually call our plugin somewhere. The implementation of this part will depend a lot on the particular implementation of your own app, but for this example we&rsquo;ll have an <code>Analytics</code> class that conditionally logs our events to Flipper in debug builds, and would do some normal production logic otherwise.</p>

<p>```
class Analytics() {</p>

<pre><code>private val plugin = AnalyticsPlugin

fun reportEvent(eventName: String) {
    if (BuildConfig.DEBUG) {
        plugin.reportEvent(eventName)
    } else {
        // do normal analytics logic here
    }
}
</code></pre>

<p>}
```</p>

<p>Once that&rsquo;s all done, the client work is complete!</p>

<h3>Part 2: Desktop Side</h3>

<h4>Setup</h4>

<p>In order to build the desktop-side plugin, we&rsquo;ll need to set up our environment. We&rsquo;ll need something called <code>npx</code>, which is a tool to execute Javascript packages. <code>npx</code> can be installed from <a href="https://brew.sh/">Homebrew</a> with <code>brew install npx</code>.</p>

<p>Once <code>npx</code> is installed, run the following command in the directory that you&rsquo;d like to create your plugin in:
<code>
npx flipper-pkg init
</code></p>

<p>This command will kick off a little bit of a &ldquo;new plugin wizard&rdquo;, asking a few questions about the plugin we&rsquo;ll be creating:</p>

<ol>
<li>Whether the plugin is a &ldquo;client&rdquo; plugin or a &ldquo;device&rdquo; plugin &ndash; our plugin will require our app to communicate, we&rsquo;ll choose <code>client</code>. (Flipper also supports <code>device</code> plugins that don&rsquo;t need any particular app to be running. For example, Logcat provides logs for the <em>entire</em> device, rather than needing any individual app).</li>
<li>An ID. This needs to be the same as the ID we specified in the client code, otherwise Flipper will have no way of matching up the two halves of our plugin.</li>
<li>A title. This is the human readable name of the plugin that will show up in the sidebar.</li>
</ol>


<p>After that, you should be able to <code>cd</code> into the newly created module directory and run <code>yarn watch</code> to have the plugin continuously be compiled when you make changes.</p>

<h4>Building the Plugin</h4>

<p>If you&rsquo;re familiar with JavaScript and React (I&rsquo;m not especially), creating the desktop side of the plugin might be easy. However, if you&rsquo;re <em>not</em> experienced with these tools, Flipper includes some <a href="https://fbflipper.com/docs/extending/flipper-plugin/#createtableplugin">very convenient helpers</a> for building a simple table UI. In this example, that&rsquo;s exactly what we&rsquo;ll be doing &ndash; let&rsquo;s get started!</p>

<p>The init command we ran earlier auto-generated some files, one of which is <code>index.tsx</code> inside the <code>src</code> directory. Majority of the changes we&rsquo;ll need to make will be in this file.</p>

<p>For our table, the first thing we&rsquo;ll need to define is the fields that will be shown in each row:</p>

<p><code>
type Row = {
  id: string;
  event: string;
  timestamp: Date;
}
</code></p>

<p>The next thing we need to do is create something called a <code>DataTableColumn</code>, which tells Flipper how to display our data. Each object defined in this section will map to the columns in our table &ndash; we can optionally provide a <code>title</code> to provide a more meaningful label at the top of the table and a <code>width</code> in either pixels, percent or nothing (which will distribute the space evenly).</p>

<p>```
const columns: DataTableColumn<Row>[] = [
  {</p>

<pre><code>title: 'Event Name',
key: 'event'
</code></pre>

<p>  },
  {</p>

<pre><code>key: 'timestamp',
width: 150
</code></pre>

<p>  }
];
```</p>

<p>Lastly, we will use the Flipper <code>createTablePlugin</code> function to glue this all together:</p>

<p><code>
const {plugin, Component} = createTablePlugin&lt;Row&gt;({
  columns,
  method: 'newRow',
  key: 'id'
});
export {plugin, Component};
</code></p>

<p>If a simple table is not what you&rsquo;re looking for, there&rsquo;s <a href="https://fbflipper.com/docs/tutorial/js-custom/">an entire section in the documentation</a> about how to build a custom UI, and even how to write tests for the display logic.</p>

<p>After you have finished with this part, you should be able to open Flipper and see your plugin listed in the &ldquo;Unavailable Plugins&rdquo; display of the Flipper desktop app. Our plugin is considered &ldquo;Unavailable&rdquo; because no currently running application is available to connect to it&hellip;yet.</p>

<p><img class="center" src="/images/2022/09/28/unavailable.jpg" width="800"></p>

<p>Build and launch your Android app and the plugin should now become &ldquo;Disabled&rdquo;.</p>

<p><img class="center" src="/images/2022/09/28/disabled.jpg" width="800"></p>

<p>We can now click &ldquo;+&rdquo; on the plugin row to &ldquo;enable&rdquo; it and start sending those analytics events &ndash; They should start showing up in the Flipper UI immediately!</p>

<p><img class="center" src="/images/2022/09/28/working.jpg" width="800"></p>

<p>Depending on your use-case, your events might not just be a simple string and timestamp. You&rsquo;ll likely have defined some attributes, maybe the ID of an item being viewed, or the level number completed in a game. It would be great if there was a simple way to see all the data that corresponds to an event, right? Conveniently, the Flipper sidebar to show us that information in an easy to read way. All you need to do is click on the row, and a side panel will appear that renders our event as as JSON tree (I added some additional fields as a demo here):</p>

<p><img class="center" src="/images/2022/09/28/sidebar.jpg" width="800"></p>

<h3>Wrap up</h3>

<p>By using the table plugin on the desktop side, searching and filtering behavior all comes for free, which is amazing if your app sends a lot of analytics events!</p>

<p>The code for both the Desktop Plugin and the Android sample app can be found on <a href="https://github.com/MichaelEvans/FlipperPluginSample">Github here</a>.</p>

<p>As this post demonstrates &ndash; the Flipper SDK is pretty flexible and allows you to build all sorts of custom development tools to help ease everday tasks. Come up with an idea for a cool plugin? Send me a <a href="https://twitter.com/m_evans10">tweet</a>, I&rsquo;d love to hear about it!</p>

<p>(Thanks to <a href="https://twitter.com/zarahjutz">Zarah</a> for the editing and feedback for this post!)</p>
]]></content>
  </entry>
  
</feed>
