<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Android | Michael Evans]]></title>
  <link href="http://michaelevans.org/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://michaelevans.org/"/>
  <updated>2020-02-10T21:37:27-05:00</updated>
  <id>http://michaelevans.org/</id>
  <author>
    <name><![CDATA[Michael Evans]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Dropping Columns Like It's Hot]]></title>
    <link href="http://michaelevans.org/blog/2020/02/10/dropping-columns-like-its-hot/"/>
    <updated>2020-02-10T20:03:03-05:00</updated>
    <id>http://michaelevans.org/blog/2020/02/10/dropping-columns-like-its-hot</id>
    <content type="html"><![CDATA[<p>Recently, I was doing some code cleanup and noticed that there were some data in the database that was no longer needed. I think most developers clean up their codebase of deprecated patterns and unused code, but I personally have not done a good job of ensuring that the same cleanup happens for unused columns in my databases.</p>

<p>Dropping tables that are no longer used is pretty easy (especially if you can just use something like Room&rsquo;s <a href="https://developer.android.com/training/data-storage/room/migrating-db-versions">Migrations</a>) but when trying to remove unused columns, I ran into an unexpected problem. I thought to myself, it’s pretty easy to add or rename a column, why would dropping one be any harder? The existing database library I was using already had a convenient &ldquo;drop column&rdquo; method, so I simply called that and tried to run the migration. During the process, I ended up with a <code>ForeignKeyConstraintException</code>! I quickly scanned the schema to see what could have caused that, and didn&rsquo;t see anything obvious. The table I was trying to modify didn&rsquo;t have any foreign keys itself, and the column I was dropping was not a foreign key. Curious to understand what was happening, I started to dig into what this method call was doing.</p>

<!-- more -->


<p>I saw that although you can add a column with SQLite&rsquo;s <code>ALTER TABLE ${tableName} ADD COLUMN ${columnName} ${columnType}</code> statements, there&rsquo;s <a href="https://www.sqlite.org/lang_altertable.html">no support for removing a column out of the box</a>. The library method I was using emulates dropping a column by doing the following:</p>

<ol>
<li>Rename the existing table into <code>$tablename_old</code></li>
<li>Creating a new table with all the existing columns, minus the one we don’t want</li>
<li>Copying all the data from <code>$tablename_old</code> to <code>$tablename</code></li>
<li>Dropping <code>$tablename_old</code>, since we don’t need it anymore.</li>
</ol>


<p>This process seems to make a lot of sense &ndash; since we can’t remove the column on its own, let’s just make a new table with the structure we want and copy over the data that we want to keep. So why does this process not work?</p>

<h3>The Gotcha!</h3>

<p>If you read the SQlite documentation linked above closely, you might have noticed an important note:</p>

<blockquote><p>Compatibility Note: The behavior of ALTER TABLE when renaming a table was enhanced in versions 3.25.0 (2018-09-15) and 3.26.0 (2018-12-01) in order to carry the rename operation forward into triggers and views that reference the renamed table. This is considered an improvement. Applications that depend on the older (and arguably buggy) behavior can use the PRAGMA legacy_alter_table=ON statement or the SQLITE_DBCONFIG_LEGACY_ALTER_TABLE configuration parameter on sqlite3_db_config() interface to make ALTER TABLE RENAME behave as it did prior to version 3.25.0.</p></blockquote>

<p>What this means is that when we use <code>ALTER</code> to rename a table, any triggers/views/foreign keys that reference that table will now be updated to support it. As an example:</p>

<p>Let&rsquo;s say we had a table <code>users</code> with a few columns: <code>id</code>, <code>first_name</code>, <code>last_name</code>, and <code>age</code>, and we had a table <code>orders</code> with the columns <code>id</code>, <code>order_number</code> and <code>user_id</code>, where <code>user_id</code> was a foreign key back to the <code>users</code> table. It might look a little like this:</p>

<p><img class="center" src="/images/2020/02/10/before_step1.png" width="400" height="400"></p>

<p>Following the steps above, let&rsquo;s try to drop the <code>age</code> column. First we&rsquo;ll rename the existing table into <code>users_old</code>, and create the new table:</p>

<p><img class="center" src="/images/2020/02/10/before_step2.png" width="400" height="600"></p>

<p>Then we copy the the data, and try to drop <code>users_old</code>, and this is where we run into the exception. The grey line in the diagram is our foreign key association, and that will no longer be valid because the <code>orders</code> table will be trying to reference <code>users_old</code> which we are trying to drop.</p>

<p><img class="center" src="/images/2020/02/10/before_step3.png" width="400" height="600"></p>

<p>Fortunately the documentation lists out a better sequence of steps to perform this operation:</p>

<ol>
<li>Create the new table</li>
<li>Copy over the data we need</li>
<li>Drop old table</li>
<li>Rename the new table with the name of the old table</li>
</ol>


<p>Looking at it more visually &ndash; we&rsquo;ll start with the same tables and create a new table named <code>users_new</code> to hold the preserved data:</p>

<p><img class="center" src="/images/2020/02/10/after_step1.png" width="400" height="600"></p>

<p>Then we&rsquo;ll do the data copy, drop, the old table (but the foreign key relation will still reference the <code>users</code> table), and rename <code>users_new</code> to <code>users</code>.</p>

<p><img class="center" src="/images/2020/02/10/after_step2.png" width="400" height="400"></p>

<p>These steps will ensure that no existing links (views, triggers, etc) are modified. That way when we rename the table in the final step, the existing links will end up referencing the new table already.</p>

<p><img class="center" src="/images/2020/02/10/after_step3.png" width="400" height="400"></p>

<p>TLDR:</p>

<p>```
override fun migrate(database: SupportSQLiteDatabase) {</p>

<pre><code>// Create the new table
database.execSQL("CREATE TABLE users_new (id INTEGER, first_name TEXT, last_name TEXT, PRIMARY KEY(userid))")
// Copy the data
database.execSQL("INSERT INTO users_new (id, first_name, last_name) SELECT id, first_name, last_name FROM users")
// Remove the old table
database.execSQL("DROP TABLE users")
// Change the table name to the correct one
database.execSQL("ALTER TABLE users_new RENAME TO users")
</code></pre>

<p>}
```</p>

<p>Hopefully this discovery helps you better clean up those unused columns in your databases!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stop Repeating Yourself: Sharing test code across Android Modules]]></title>
    <link href="http://michaelevans.org/blog/2019/09/21/stop-repeating-yourself-sharing-test-code-across-android-modules/"/>
    <updated>2019-09-21T21:34:52-04:00</updated>
    <id>http://michaelevans.org/blog/2019/09/21/stop-repeating-yourself-sharing-test-code-across-android-modules</id>
    <content type="html"><![CDATA[<p>It seems like nowadays, the <a href="https://jeroenmols.com/blog/2019/03/06/modularizationwhy/">best advice</a> <a href="https://robinhood.engineering/breaking-up-the-app-module-monolith-the-story-of-robinhoods-android-app-707fb993a50c">is to modularize</a> <a href="https://www.youtube.com/watch?v=PZBg5DIzNww">your Android app</a>. It&rsquo;s a great suggestion for many reasons, including but not limited to:</p>

<pre><code>- improved build performance
- enables on-demand delivery
- pushes you to build reusable, discrete components
</code></pre>

<p>Sounds great, right? Are there any downsides? There is one in particular which has been a a pain point for many.</p>

<p>Often times when you&rsquo;re writing tests, you&rsquo;ll want to use some <a href="https://testing.googleblog.com/2013/07/testing-on-toilet-know-your-test-doubles.html">test doubles</a> like fakes or fixtures in order to help simulate the system under test. Maybe you have a <code>FakeUser</code> instance that you use in your tests to avoid having to mock a <code>User</code> every time your test calls for one. Generally these classes live alongside tests in <code>src/test</code> directories and are used to test out your code within a module.</p>

<p>For example, maybe you have a model object like:</p>

<p>```
public class User {</p>

<pre><code>private final String firstName;
private final String lastName;

public User(String firstName, String lastName) {
    this.firstName = firstName;
    this.lastName = lastName;
}

public String getFirstName() {
    return firstName;
}

public String getLastName() {
    return lastName;
}
</code></pre>

<p>}
```</p>

<p>You might have some code in <code>src/test</code> that creates a bunch of fake users for your tests like:</p>

<p>```
class TheOfficeFixtures {</p>

<pre><code>    public static User manager = new User("Michael", "Scott");
    public static User assistantToTheRegionalManager = new User("Dwight", "Schrute");
}
</code></pre>

<p>}
```</p>

<p>This works great if you&rsquo;re testing code <em>within</em> a module, but as soon as you&rsquo;d like to use these fake users in other modules, you&rsquo;ll note that these classes aren&rsquo;t shared!</p>

<p>This code can&rsquo;t be shared between modules because Gradle doesn&rsquo;t expose the output of your test source set as a build artifact. There are all kinds of solutions for this problem out there, including <a href="https://treatwell.engineering/mock-factory-for-android-testing-in-multi-module-system-7654f45808be">creating a special module for all your fixtures</a>, and using <a href="https://stackoverflow.com/questions/5644011/multi-project-test-dependencies-with-gradle">gradle dependency hacks</a> to wire up source sets.</p>

<p>However, that&rsquo;s not necessary anymore! As of version 5.6, Gradle now ships a new &lsquo;test-fixtures&rsquo; plugin! This plugin creates a new <code>testFixtures</code> source set, and configures that source set so that:</p>

<pre><code>- classes in this set can see the main source set classes
- test sources can see the test fixtures classes
</code></pre>

<h3>Using the Plugin</h3>

<p>You can apply the <code>java-test-fixtures</code> plugin in your build.gradle script:</p>

<p>```
plugins {</p>

<pre><code>id 'java-test-fixtures'
</code></pre>

<p>}
```</p>

<p>This plugin will define the necessary source set, and handle all the wiring up of test artifacts. We can now  move those test fixtures from <code>src/test/java</code> to <code>src/testFixtures/java</code>, and that&rsquo;s it! These classes will be ready to be consumed by other modules.</p>

<h3>Wiring it all together</h3>

<p>Finally, we need to use a special keyword to pull these new fixtures in as a dependency for our tests. In our  gradle configuration, we add a test dependency (either API or Implementation) like so:</p>

<p>```
dependencies {</p>

<pre><code>testImplementation(testFixtures(project(":lib")))
</code></pre>

<p>}
```</p>

<p>And that&rsquo;s it! Our other module can now consume these test fixtures without any sort of intermediate modules or workarounds.</p>

<p>If you&rsquo;d like to check out the complete configuration with examples sharing fixtures between both Kotlin and Java modules to a shared &ldquo;app&rdquo; module, I&rsquo;ve uploaded a sample project demonstrating how to use this new configuration <a href="https://github.com/MichaelEvans/TestFixturesExample">here</a>.</p>

<h2>Important Caveat</h2>

<p>It&rsquo;s important to note that this feature is currently only available with the <code>java-library</code> plugin, and has limited functionality in Kotlin modules, and not yet available for Android modules. There are currently feature requests on <a href="https://youtrack.jetbrains.com/issue/KT-33877">YouTrack</a> and the <a href="https://issuetracker.google.com/issues/139438142">Android Issue Tracker</a> to take advantage of this new functionality.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hands on with ViewPager2]]></title>
    <link href="http://michaelevans.org/blog/2019/02/07/hands-on-with-viewpager2/"/>
    <updated>2019-02-07T21:38:07-05:00</updated>
    <id>http://michaelevans.org/blog/2019/02/07/hands-on-with-viewpager2</id>
    <content type="html"><![CDATA[<p>Today Google released their alpha of <a href="https://developer.android.com/jetpack/androidx/releases/viewpager2#1.0.0-alpha01">ViewPager2</a>, a signal of the nail in the coffin for the original ViewPager, originally <a href="https://android-developers.googleblog.com/2011/08/horizontal-view-swiping-with-viewpager.html">released in 2011</a>!</p>

<p>Since then, I think it&rsquo;s safe to say that most developers have needed to make a ViewPager. Despite how prolific it is, it certainly isn&rsquo;t the most straightforward widget to include. I think we all have at least once wondered whether we should use a <code>FragmentPagerAdapter</code> or a <code>FragmentStatePagerAdapter</code>. Or wondered if we can use a <a href="https://www.bignerdranch.com/blog/viewpager-without-fragments/">ViewPager <em>without</em> Fragments</a>.</p>

<p>And API confusion aside, we&rsquo;ve still had long standing, feature requests. <a href="https://issuetracker.google.com/issues/36973591">RTL support</a>? <a href="https://issuetracker.google.com/issues/36952939">Vertical orientation</a>? There are numerous <a href="https://github.com/duolingo/rtl-viewpager">open source</a> <a href="https://github.com/kaelaela/VerticalViewPager">solutions</a> for these, but nothing official from the support library (now AndroidX)&hellip;until now!</p>

<p>Let&rsquo;s dive in and try to set up ViewPager2! You&rsquo;ll need your project configured with AndroidX already, as well as supporting minSdkVersion 14 or higher.</p>

<!-- more -->


<p>The first thing we&rsquo;ll need to do is add the library to our build.gradle dependencies.</p>

<p><code>
implementation 'androidx.viewpager2:viewpager2:1.0.0-alpha01'
</code></p>

<p>If you&rsquo;re familiar with RecyclerView, setting up ViewPager2 will be very familiar. We start off by creating an adapter:</p>

<p>```
class CheesePagerAdapter(private val cheeseStrings: Array<String>) : RecyclerView.Adapter<CheeseViewHolder>() {</p>

<pre><code>override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): CheeseViewHolder {
    return CheeseViewHolder(LayoutInflater.from(parent.context).inflate(R.layout.cheese_list_item, parent, false))
}

override fun onBindViewHolder(holder: CheeseViewHolder, position: Int) {
    holder.cheeseName.text = cheeseStrings[position]
}

override fun getItemCount() = cheeseStrings.size
</code></pre>

<p>}
```</p>

<p>and pair it with a RecyclerView.ViewHolder.</p>

<p>```
class CheeseViewHolder(view: View) : RecyclerView.ViewHolder(view) {</p>

<pre><code>val cheeseName: TextView = view.findViewById(R.id.cheese_name)
</code></pre>

<p>}
```</p>

<p>Finally, just like RecyclerView, we set the adapter of our ViewPager2 to be an instance of the RecyclerView adapter. However, you&rsquo;ll note that there&rsquo;s no need for a LayoutManager.</p>

<p><code>
viewPager.adapter = CheesePagerAdapter(Cheeses.CheeseStrings)
</code></p>

<p>And with that, we have a working ViewPager2!</p>

<p><img class="center" src="/images/2019/02/07/Horizontal.gif" width="600" height="600" title="Horizontal ViewPager2" ></p>

<p>We can even set the orientation to scroll vertically with just one line:</p>

<p><code>
viewPager.orientation = ViewPager2.ORIENTATION_VERTICAL
</code></p>

<p><img class="center" src="/images/2019/02/07/Vertical.gif" width="600" height="600" title="Vertical ViewPager2" ></p>

<p>Based on the release notes there are a lot of issues left to fix before this moves to a final release &ndash; but this is a long awaited update for one of those oldest support library components.</p>

<p>The sample code for this post can be found <a href="https://github.com/MichaelEvans/ViewPager2Sample">here</a>. Thanks to Chris Banes' <a href="https://github.com/chrisbanes/cheesesquare">CheeseSquare</a> for the sample data for this demo!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Enabling Night Mode on Android Nougat]]></title>
    <link href="http://michaelevans.org/blog/2016/08/23/enabling-night-mode-on-android-nougat/"/>
    <updated>2016-08-23T18:27:01-04:00</updated>
    <id>http://michaelevans.org/blog/2016/08/23/enabling-night-mode-on-android-nougat</id>
    <content type="html"><![CDATA[<p>If you&rsquo;re like me, you loved the <a href="http://www.androidpolice.com/2016/03/09/android-n-feature-spotlight-night-mode-is-back-with-expanded-features-including-red-filter-and-brightness/">Night Mode feature</a> that was added to the Nougat Developer Preview a few months ago. You might have been disappointed when you found out that it was missing in later preview builds, and was probably going to be removed <a href="https://www.reddit.com/r/androiddev/comments/4tm8i6/were_on_the_android_engineering_team_and_built/d5igc5t">because it wasn&rsquo;t ready</a>.</p>

<p>When the source code for Nougat was released this morning, my friend <a href="https://twitter.com/vishnurajeevan">Vishnu</a> found this interesting snippet in the <a href="https://android.googlesource.com/platform/frameworks/base/+/android-7.0.0_r1/packages/SystemUI/src/com/android/systemui/tuner/TunerActivity.java#42">SystemUI source</a> (better known to end users as the System UI Tuner):</p>

<p>```java
boolean showNightMode = getIntent().getBooleanExtra(</p>

<pre><code>NightModeFragment.EXTRA_SHOW_NIGHT_MODE, false);
</code></pre>

<p>final PreferenceFragment fragment = showNightMode ? new NightModeFragment()</p>

<pre><code>: showDemoMode ? new DemoModeFragment()
: new TunerFragment();
</code></pre>

<p>```</p>

<p>Long story short, if you pass the right extras to this activity, and you&rsquo;ll get access to the Night Mode settings (as well as the infamous Quick Tile!).</p>

<p>Fortunately for us, this is pretty trivial to accomplish with <code>adb</code> via <code>adb -d shell am start  --ez show_night_mode true com.android.systemui/.tuner.TunerActivity</code>, but not everyone who wants this feature is familiar with <code>adb</code>. So I published an app to the Play Store that does exactly that &ndash; click one button, and get access to those settings! You can find the app on the Play Store <a href="https://play.google.com/store/apps/details?id=org.michaelevans.nightmodeenabler">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Build Types with the Google Services Gradle Plugin]]></title>
    <link href="http://michaelevans.org/blog/2016/03/31/using-build-types-with-the-google-services-gradle-plugin/"/>
    <updated>2016-03-31T21:11:55-04:00</updated>
    <id>http://michaelevans.org/blog/2016/03/31/using-build-types-with-the-google-services-gradle-plugin</id>
    <content type="html"><![CDATA[<p>If you want to integrate your Android app with most of Google Play Services nowadays, you&rsquo;ll find that you are instructed to set up the <a href="https://developers.google.com/android/guides/google-services-plugin">Google Services Gradle plugin</a> to handle configuring dependencies. The plugin allows you to drop a JSON file into your project, and then the plugin will do a bunch of the configuration for your project, such as handling the API keys.</p>

<p>This is all well and good—unless you&rsquo;re like me (<a href="https://github.com/googlesamples/google-services/issues/54">and countless others</a>) and want to use a different configuration for your debug and release builds. This would be useful, as an example, if you use Google Play Services for GCM and would like to have development builds recieve pushes from non-production systems.</p>

<p>It seems that the plugin is configured in such a way that it supports build flavors, but it does not yet support build types. However, with a little Gradle magic, we can hack that support in.</p>

<!-- more -->


<p><strong>Disclaimer: This approach worked for me—but as with any hack, it is subject to break.</strong></p>

<p>So how can we go about doing this? We want to put the debug JSON file into the root of our app module during debug builds and use the release one for release builds. If you don&rsquo;t do that, or if you attempt to put it in <code>app/debug</code> and <code>app/release</code>, you&rsquo;ll get an error that says <code>File google-services.json is missing from module root folder. The Google Services Plugin cannot function without it</code>.</p>

<p>This error is thrown by a task named <code>process{VariantName}GoogleServices</code>. What we could do to solve this is swap the file in before that task is run! Using a little Groovy magic, I came up with this:</p>

<p>```groovy
android.applicationVariants.all { variant &ndash;></p>

<pre><code>def hackTask = task("hackGps${variant.name.capitalize()}") &lt;&lt; {
    copy {
        from rootProject.file("config/${variant.buildType.name}/google-services.json")
        into "${projectDir}"
    }
}
def googleTask = tasks.findByName("process${variant.name.capitalize()}GoogleServices")
googleTask.dependsOn hackTask
</code></pre>

<p>}
```</p>

<p>For each one of your variants, this code will create a new task &ndash; <code>hackGps{VariantName}</code>, which copies a <code>google-services.json</code> file from a <code>config</code> directory into the root of your app module. Then it finds the corresponding Google Services task, and hooks itself in to run right before that! Now when you assemble your application, the right <code>google-services.json</code> file will be in the right place, ready to be picked up by the plugin.</p>

<p><em>You might also want to .gitignore the <code>app/google-services.json</code> file, so that you don&rsquo;t keep committing the changed file to git</em></p>

<p>Hopefully Google will fix this issue in an upcoming release of the Google Services plugin, but until then &ndash; this technique should work!</p>
]]></content>
  </entry>
  
</feed>
