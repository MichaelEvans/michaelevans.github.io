<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Testing | Michael Evans]]></title>
  <link href="http://michaelevans.org/blog/categories/testing/atom.xml" rel="self"/>
  <link href="http://michaelevans.org/"/>
  <updated>2019-09-21T21:39:41-04:00</updated>
  <id>http://michaelevans.org/</id>
  <author>
    <name><![CDATA[Michael Evans]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Stop Repeating Yourself: Sharing test code across Android Modules]]></title>
    <link href="http://michaelevans.org/blog/2019/09/21/stop-repeating-yourself-sharing-test-code-across-android-modules/"/>
    <updated>2019-09-21T21:34:52-04:00</updated>
    <id>http://michaelevans.org/blog/2019/09/21/stop-repeating-yourself-sharing-test-code-across-android-modules</id>
    <content type="html"><![CDATA[<p>It seems like nowadays, the <a href="https://jeroenmols.com/blog/2019/03/06/modularizationwhy/">best advice</a> <a href="https://robinhood.engineering/breaking-up-the-app-module-monolith-the-story-of-robinhoods-android-app-707fb993a50c">is to modularize</a> <a href="https://www.youtube.com/watch?v=PZBg5DIzNww">your Android app</a>. It&rsquo;s a great suggestion for many reasons, including but not limited to:</p>

<pre><code>- improved build performance
- enables on-demand delivery
- pushes you to build reusable, discrete components
</code></pre>

<p>Sounds great, right? Are there any downsides? There is one in particular which has been a a pain point for many.</p>

<p>Often times when you&rsquo;re writing tests, you&rsquo;ll want to use some <a href="https://testing.googleblog.com/2013/07/testing-on-toilet-know-your-test-doubles.html">test doubles</a> like fakes or fixtures in order to help simulate the system under test. Maybe you have a <code>FakeUser</code> instance that you use in your tests to avoid having to mock a <code>User</code> every time your test calls for one. Generally these classes live alongside tests in <code>src/test</code> directories and are used to test out your code within a module.</p>

<p>For example, maybe you have a model object like:</p>

<p>```
public class User {</p>

<pre><code>private final String firstName;
private final String lastName;

public User(String firstName, String lastName) {
    this.firstName = firstName;
    this.lastName = lastName;
}

public String getFirstName() {
    return firstName;
}

public String getLastName() {
    return lastName;
}
</code></pre>

<p>}
```</p>

<p>You might have some code in <code>src/test</code> that creates a bunch of fake users for your tests like:</p>

<p>```
class TheOfficeFixtures {</p>

<pre><code>    public static User manager = new User("Michael", "Scott");
    public static User assistantToTheRegionalManager = new User("Dwight", "Schrute");
}
</code></pre>

<p>}
```</p>

<p>This works great if you&rsquo;re testing code <em>within</em> a module, but as soon as you&rsquo;d like to use these fake users in other modules, you&rsquo;ll note that these classes aren&rsquo;t shared!</p>

<p>This code can&rsquo;t be shared between modules because Gradle doesn&rsquo;t expose the output of your test source set as a build artifact. There are all kinds of solutions for this problem out there, including <a href="https://treatwell.engineering/mock-factory-for-android-testing-in-multi-module-system-7654f45808be">creating a special module for all your fixtures</a>, and using <a href="https://stackoverflow.com/questions/5644011/multi-project-test-dependencies-with-gradle">gradle dependency hacks</a> to wire up source sets.</p>

<p>However, that&rsquo;s not necessary anymore! As of version 5.6, Gradle now ships a new &lsquo;test-fixtures&rsquo; plugin! This plugin creates a new <code>testFixtures</code> source set, and configures that source set so that:</p>

<pre><code>- classes in this set can see the main source set classes
- test sources can see the test fixtures classes
</code></pre>

<h3>Using the Plugin</h3>

<p>You can apply the <code>java-test-fixtures</code> plugin in your build.gradle script:</p>

<p>```
plugins {</p>

<pre><code>id 'java-test-fixtures'
</code></pre>

<p>}
```</p>

<p>This plugin will define the necessary source set, and handle all the wiring up of test artifacts. We can now  move those test fixtures from <code>src/test/java</code> to <code>src/testFixtures/java</code>, and that&rsquo;s it! These classes will be ready to be consumed by other modules.</p>

<h3>Wiring it all together</h3>

<p>Finally, we need to use a special keyword to pull these new fixtures in as a dependency for our tests. In our  gradle configuration, we add a test dependency (either API or Implementation) like so:</p>

<p>```
dependencies {</p>

<pre><code>testImplementation(testFixtures(project(":lib")))
</code></pre>

<p>}
```</p>

<p>And that&rsquo;s it! Our other module can now consume these test fixtures without any sort of intermediate modules or workarounds.</p>

<p>If you&rsquo;d like to check out the complete configuration with examples sharing fixtures between both Kotlin and Java modules to a shared &ldquo;app&rdquo; module, I&rsquo;ve uploaded a sample project demonstrating how to use this new configuration <a href="https://github.com/MichaelEvans/TestFixturesExample">here</a>.</p>

<h2>Important Caveat</h2>

<p>It&rsquo;s important to note that this feature is currently only available with the <code>java-library</code> plugin, and has limited functionality in Kotlin modules, and not yet available for Android modules. There are currently feature requests on <a href="https://youtrack.jetbrains.com/issue/KT-33877">YouTrack</a> and the <a href="https://issuetracker.google.com/issues/139438142">Android Issue Tracker</a> to take advantage of this new functionality.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing Intents with Espresso Intents]]></title>
    <link href="http://michaelevans.org/blog/2015/09/15/testing-intents-with-espresso-intents/"/>
    <updated>2015-09-15T22:03:57-04:00</updated>
    <id>http://michaelevans.org/blog/2015/09/15/testing-intents-with-espresso-intents</id>
    <content type="html"><![CDATA[<p>A few weeks ago, I wrote <a href="http://michaelevans.org/blog/2015/08/03/using-espresso-for-easy-ui-testing/">a basic introduction</a> on how to use Espresso to test the UI of an Android application. However, when I went to write instrumentation tests for <a href="https://github.com/MichaelEvans/Aftermath">Aftermath</a>, I ran into trouble testing things that exist outside my application&rsquo;s process. For example, what do you do when your app needs to use the Android Intent system to call upon the dialer or the browser, or pick a contact with the contact picker? What about testing a share action? Because these apps run outside your application itself, you can&rsquo;t use Espresso to interact with them. So how can you test your app&rsquo;s behavior? You can either use Espresso-Intents or UI Automator (but that&rsquo;s another show).</p>

<!-- more -->


<h2>The Setup</h2>

<p>Setting up Espresso-Intents is dead simple if you&rsquo;re already using Espresso. Make sure you&rsquo;re already depending on Espresso, the rules, and the runner and then add the dependency:</p>

<p><code>
androidTestCompile 'com.android.support.test.espresso:espresso-intents:2.2.1'
</code></p>

<h2>The Tests</h2>

<p>Let&rsquo;s imagine that you had an application with a button to launch the contact picker, which would then show the contact <code>Uri</code> of the selected contact in a text view. Not only would this be hard to test because you are leaving your own application&rsquo;s process, but you don&rsquo;t even know if your test can rely on any contacts even existing on the test device (not to mention not knowing which app is registered to handle the contact-picking Intent itself). Fortunately we can use Espresso-Intents to stub out the response for activities that are launched with <code>startActivityForResult</code>.</p>

<p>Here&rsquo;s what that might look like:</p>

<p>```java
@Before public void stubContactIntent() {</p>

<pre><code>Intent intent = new Intent();
intent.setData(Uri.parse(TEST_URI));
ActivityResult result = new ActivityResult(Activity.RESULT_OK, intent);

intending(allOf(
    hasData(ContactsContract.CommonDataKinds.Phone.CONTENT_URI),
    hasAction(Intent.ACTION_PICK))
).respondWith(result);
</code></pre>

<p>}</p>

<p>@Test public void pickContact_viewIsSet() {</p>

<pre><code>//Check to make sure the Uri field is empty
onView(withId(R.id.phone_number)).check(matches(withText("")));

//Start contact picker
onView(withId(R.id.pick_contact)).perform(click());

//Verify that Uri was set properly.
onView(withId(R.id.phone_number)).check(matches(withText(TEST_URI)));
</code></pre>

<p>}
```</p>

<p>Using the <code>intending</code> API, we can respond with our mock <code>ActivityResult</code> data. If you&rsquo;ve used <a href="http://mockito.org/">Mockito</a> before, this stubbing will look very familiar to the <code>when</code>/<code>respondWith</code> methods. In this example, we&rsquo;re going to stub any Intents for the <code>ACTION_PICK</code> Intent with the <code>CONTENT_URI</code> data set to return a particular hard-coded Uri.</p>

<p>So this is great &mdash; our test no longer depends on any particular contact picker app, or any contacts even being present on the test device. But what do we do if we want to verify that a particular outgoing intent is launched with some given extras or data?</p>

<p>Let&rsquo;s say our sample app had an input field that would take a phone number, with a button to start the dialer to call that number. (Yes, I do realize that this application would likely not receive any venture capital funding).</p>

<p>All we have to do is use the <code>intended</code> API, which is most similar to Mockito&rsquo;s <code>verify</code> method. A sample of this might look like the following:</p>

<p>```java
@Test public void typeNumber_ValidInput_InitiatesCall() {</p>

<pre><code>onView(withId(R.id.number_input)).perform(typeText(VALID_PHONE_NUMBER), closeSoftKeyboard());
onView(withId(R.id.dial_button)).perform(click());

intended(allOf(hasAction(Intent.ACTION_DIAL), hasData(INTENT_DATA_PHONE_NUMBER)));
</code></pre>

<p>}
```</p>

<p>In this case, we&rsquo;re just going to verify that the intended Intent had the right action and the right data that we&rsquo;d expect to hand off to the dialer.</p>

<p>And you&rsquo;ll notice that the Espresso-Intents package includes handy Hamcrest matchers that you can use for things like Strings on the different parts of the Intent.</p>

<p>Now go forth and test those inter-app component interactions!</p>

<p>The sample code for this blog post can be found <a href="https://github.com/MichaelEvans/Espresso-Samples/tree/master/espresso-intents-sample">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Espresso for Easy UI Testing]]></title>
    <link href="http://michaelevans.org/blog/2015/08/03/using-espresso-for-easy-ui-testing/"/>
    <updated>2015-08-03T22:16:49-04:00</updated>
    <id>http://michaelevans.org/blog/2015/08/03/using-espresso-for-easy-ui-testing</id>
    <content type="html"><![CDATA[<p>One thing that I notice when I talk to Android developers is that a lot of them don&rsquo;t put an emphasis on testing. They say that it&rsquo;s too hard to write them or that they are too hard to integrate and set up, or give a bunch of other reasons why they don&rsquo;t. But it&rsquo;s actually pretty simple to write <a href="https://code.google.com/p/android-test-kit/wiki/Espresso">Espresso</a> tests, and they really aren&rsquo;t that hard to integrate with your code base.</p>

<!-- more -->


<h2>Easy to write</h2>

<p>Espresso tests are dead simple to write. They come in three parts.</p>

<ol>
<li>ViewMatchers &ndash; something to find the view to act upon/assert something about</li>
<li>ViewActions &ndash; something to perform an action (type text, click a button)</li>
<li>ViewAssertions &ndash; something to verify what you expect</li>
</ol>


<p>For example, the following test would type the name &ldquo;Steve&rdquo; into an EditText with the id <code>name_field</code>, click a Button with the id <code>greet_button</code> and then verify that the text &ldquo;Hello Steve!&rdquo; appears on the screen:</p>

<p><code>java
@Test
public void testSayHello() {
  onView(withId(R.id.name_field)).perform(typeText("Steve"));
  onView(withId(R.id.greet_button)).perform(click());
  onView(withText("Hello Steve!")).check(matches(isDisplayed()));
}
</code></p>

<p>Seems simple enough right? But what about when other threads are involved?</p>

<h2>Integration</h2>

<p>From the Espresso documentation:</p>

<p><blockquote><p>The centerpiece of Espresso is its ability to seamlessly synchronize all test operations with the application under test. By default, Espresso waits for UI events in the current message queue to process and default AsyncTasks* to complete before it moves on to the next test operation. This should address the majority of application/test synchronization in your application.&ldquo;</p></blockquote></p>

<p>But if you&rsquo;re like me, you&rsquo;re not writing AsyncTasks to handle your background operations. My go-to tool for making HTTP requests (probably one of the most common uses of AsyncTask) is <a href="http://square.github.io/retrofit/">Retrofit</a>. So what can we do? Espresso has an API called <code>registerIdlingResource</code>, which allows you to synchronize your custom logic with Espresso.</p>

<p>With this knowledge, one way you might approach this is to implement a mock version of your Retrofit interface, and then use something like this:</p>

<p>```java
public class MockApiService implements ApiService, IdlingResource {</p>

<pre><code>private final ApiService api;
private final AtomicInteger counter;
private final List&lt;ResourceCallback&gt; callbacks;

public MockApiService(ApiService api) {
    this.api = api;
    this.callbacks = new ArrayList&lt;&gt;(); 
    this.counter = new AtomicInteger(0);
}

@Override
public Response doWork() {
    counter.incrementAndGet();
    return decrementAndNotify(api.doWork());
}

@Override
public String getName() {
    return this.getClass().getName();
}

@Override
public boolean isIdleNow() {
    return counter.get() == 0;
}

@Override
public void registerIdleTransitionCallback(ResourceCallback resourceCallback) {
    callbacks.add(resourceCallback);
}

private &lt;T&gt; T decrementAndNotify(T data) {
    counter.decrementAndGet();
    notifyIdle();
    return data;
}

private void notifyIdle() {
    if (counter.get() == 0) {
        for (ResourceCallback cb : callbacks) {
            cb.onTransitionToIdle();
        }
    }
}
</code></pre>

<p>}
```</p>

<p>This tells Espresso that your app is idle after the methods are called. But you should immediately see the problem here &ndash; you&rsquo;ll end up writing a TON of boilerplate. As you have more methods in your interface, and lot of repeated increment and decrement code&hellip;there must be a better way. (There is!)</p>

<p>The &ldquo;trick&rdquo; lies right in the selling point in the Espresso documentation, &ldquo;Espresso waits for UI events&hellip; and default <em><strong>AsyncTasks</strong></em> to complete&rdquo;. If we could somehow execute our Retrofit requests on the AsyncTasks' ThreadPoolExecutor, we&rsquo;d get sychronization for free!</p>

<p>Fortunately, Retrofit&rsquo;s <code>RestAdapter.Builder</code> class has just such a method!</p>

<p><code>java
new RestAdapter.Builder()
   .setExecutors(AsyncTask.THREAD_POOL_EXECUTOR, new MainThreadExecutor())
   .build();
</code></p>

<p>And it&rsquo;s that simple &ndash; Now you have no excuse not to write some Espresso tests!</p>

<h4>More Resources</h4>

<ul>
<li><a href="https://code.google.com/p/android-test-kit/wiki/EspressoV2CheatSheet">The Espresso V2 Cheatsheet</a></li>
<li><a href="http://blog.sqisland.com/2015/04/espresso-custom-idling-resource.html">Read more about writing custom idling resources</a></li>
</ul>


<p>Thanks to <a href="https://twitter.com/queencodemonkey">Huyen Tue Dao</a> for editing this post!</p>
]]></content>
  </entry>
  
</feed>
