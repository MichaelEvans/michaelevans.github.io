<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Michael Evans]]></title>
  <link href="http://michaelevans.org/atom.xml" rel="self"/>
  <link href="http://michaelevans.org/"/>
  <updated>2022-10-23T21:32:25-04:00</updated>
  <id>http://michaelevans.org/</id>
  <author>
    <name><![CDATA[Michael Evans]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Building Flipper Plugins for Fun and Profit]]></title>
    <link href="http://michaelevans.org/blog/2022/09/28/flipper-plugins-for-fun-and-profit/"/>
    <updated>2022-09-28T23:41:17-04:00</updated>
    <id>http://michaelevans.org/blog/2022/09/28/flipper-plugins-for-fun-and-profit</id>
    <content type="html"><![CDATA[<p>A long, long time ago, I wrote a <a href="http://michaelevans.org/blog/2020/03/10/improving-app-debugging-with-flipper/">blog post</a> about how I was using <a href="https://fbflipper.com/">Flipper</a> as one of my favorite development tools. Since then, Android Studio has come a long way adding tons of features like a new <a href="https://androidstudio.googleblog.com/2022/03/android-studio-dolphin-canary-6-now.html">Logcat</a> and <a href="https://developer.android.com/studio/debug/layout-inspector">Layout Inspector</a>.</p>

<p>However, there are often times that you&rsquo;ll need a tool more specific to your own workflow that Android Studio doesn&rsquo;t provide, and that&rsquo;s exactly where Flipper&rsquo;s extensibility really shines. As an example, I&rsquo;d like to go through building a custom plugin for Flipper, similar to one that I&rsquo;ve used on my own projects, that demonstrates how easy it is to get started building these tools.</p>

<!-- more -->


<h2>The Problem</h2>

<p>As most apps grow, there becomes a need to measure app usage and engagement to better understand user behavior. In order to measure that, we often turn to analytics libraries (like <a href="https://firebase.google.com/docs/analytics">Firebase Analytics</a>) to handle this in-app behavior reporting. However, when implementing these client events, it&rsquo;s often helpful to have a quick feedback loop to ensure that the event and associated payload are correct, without having to check an analytics dashboard (which can often take some time to refresh).</p>

<p>Luckily, most analytics libraries (including Firebase) have different solutions for this problem. In the Firebase Analytics library, the recommended debugging method is <a href="https://firebase.google.com/docs/analytics/events?platform=android#view_events_in_the_android_studio_debug_log">to set a property with ADB</a> to log all the events to logcat. This does provide much faster feedback than checking a dashboard, but it&rsquo;s not the most user friendly &ndash; developers need to set the property at the command line, and need to be monitoring logcat for all of the events (and also doesn&rsquo;t offer much of a search/filter function).</p>

<h2>The Solution</h2>

<p>Rather than sticking to plain text in logcat, we can build a custom Flipper plugin that will display our analytics events in a filterable table. Most Flipper plugins are comprised of two parts &ndash; a client library that runs as part of your Android app, and a desktop plugin that runs inside Flipper for processing and displaying the data sent by the client.</p>

<p>All of the code for this example can be found in this example <a href="https://github.com/MichaelEvans/FlipperPluginSample">Github Repository</a>.</p>

<h3>Part 1: Client Side</h3>

<p>On the Android side, you&rsquo;ll need to add the <a href="https://fbflipper.com/docs/getting-started/android-native/">Flipper SDK</a> if you haven&rsquo;t already. If you have Flipper set up already, you can skip to the next section. If not, here&rsquo;s a quick run-down:</p>

<h4>Add Flipper</h4>

<p>Add the Gradle dependencies:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dependencies {
</span><span class='line'>  debugImplementation 'com.facebook.flipper:flipper:0.164.0'
</span><span class='line'>  debugImplementation 'com.facebook.soloader:soloader:0.10.4'
</span><span class='line'>
</span><span class='line'>  releaseImplementation 'com.facebook.flipper:flipper-noop:0.164.0'
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Configure your Application class:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class MyApplication : Application {
</span><span class='line'>  override fun onCreate() {
</span><span class='line'>    super.onCreate()
</span><span class='line'>    SoLoader.init(this, false)
</span><span class='line'>
</span><span class='line'>    if (BuildConfig.DEBUG && FlipperUtils.shouldEnableFlipper(this)) {
</span><span class='line'>      val client = AndroidFlipperClient.getInstance(this)
</span><span class='line'>      client.addPlugin(InspectorFlipperPlugin(this, DescriptorMapping.withDefaults()))
</span><span class='line'>      client.start()
</span><span class='line'>    }
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h4>Building the Plugin</h4>

<p>And now it&rsquo;s time to build the plugin! Create a class to hold your plugin logic (For this example, I will call mine <code>AnalyticsPlugin</code>). For the purposes of this sample, it&rsquo;ll be a singleton <code>object</code> for reasons that we&rsquo;ll see later.</p>

<p>We&rsquo;ll subclass the <code>BufferingFlipperPlugin</code> class, rather than <code>FlipperPlugin</code>, because the bufffering version will keep our events in a buffer until the connection is made with the desktop client (so that we don&rsquo;t lose any events).</p>

<p>We need to override <code>getId()</code>, which is how Flipper will correlate our client plugin with the matching desktop plugin, and <code>runInBackground()</code> in order to tell Flipper to keep communicating with the desktop client, even if our plugin isn&rsquo;t the currently in the foreground.</p>

<p>Lastly, we&rsquo;re going to create a <code>reportEvent</code> method, which will send whatever data we want to the server. In this example, we&rsquo;ll send a unique identifier for the event, the event name, and the timestamp that the event occured at. <strong>Note: <code>FlipperObject</code> can even be constructed by using JSON text or a <code>JSONObject</code>!</strong></p>

<p>Here&rsquo;s what our plugin might look like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>object AnalyticsPlugin : BufferingFlipperPlugin() {
</span><span class='line'>
</span><span class='line'>    fun reportEvent(eventName: String) {
</span><span class='line'>        val flipperObject = FlipperObject.Builder()
</span><span class='line'>            .put("id", UUID.randomUUID())
</span><span class='line'>            .put("event", eventName)
</span><span class='line'>            .put("timestamp", Date().toLocaleString())
</span><span class='line'>            .build()
</span><span class='line'>        send("newRow", flipperObject)
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    override fun getId(): String {
</span><span class='line'>        return "org.michaelevans.flipper.analytics"
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    override fun runInBackground(): Boolean {
</span><span class='line'>        return true
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>After we create our plugin, we&rsquo;ll need to go back to our Application class to install our plugin, just like we would with the pre-loaded ones:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>val flipperClient = AndroidFlipperClient.getInstance(this)
</span><span class='line'>  // ...
</span><span class='line'>flipperClient.addPlugin(AnalyticsPlugin)
</span><span class='line'>flipperClient.start()</span></code></pre></td></tr></table></div></figure>


<p>The last thing we need to do is actually call our plugin somewhere. The implementation of this part will depend a lot on the particular implementation of your own app, but for this example we&rsquo;ll have an <code>Analytics</code> class that conditionally logs our events to Flipper in debug builds, and would do some normal production logic otherwise.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Analytics() {
</span><span class='line'>
</span><span class='line'>    private val plugin = AnalyticsPlugin
</span><span class='line'>  
</span><span class='line'>    fun reportEvent(eventName: String) {
</span><span class='line'>        if (BuildConfig.DEBUG) {
</span><span class='line'>            plugin.reportEvent(eventName)
</span><span class='line'>        } else {
</span><span class='line'>            // do normal analytics logic here
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Once that&rsquo;s all done, the client work is complete!</p>

<h3>Part 2: Desktop Side</h3>

<h4>Setup</h4>

<p>In order to build the desktop-side plugin, we&rsquo;ll need to set up our environment. We&rsquo;ll need something called <code>npx</code>, which is a tool to execute Javascript packages. <code>npx</code> can be installed from <a href="https://brew.sh/">Homebrew</a> with <code>brew install npx</code>.</p>

<p>Once <code>npx</code> is installed, run the following command in the directory that you&rsquo;d like to create your plugin in:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npx flipper-pkg init</span></code></pre></td></tr></table></div></figure>


<p>This command will kick off a little bit of a &ldquo;new plugin wizard&rdquo;, asking a few questions about the plugin we&rsquo;ll be creating:</p>

<ol>
<li>Whether the plugin is a &ldquo;client&rdquo; plugin or a &ldquo;device&rdquo; plugin &ndash; our plugin will require our app to communicate, we&rsquo;ll choose <code>client</code>. (Flipper also supports <code>device</code> plugins that don&rsquo;t need any particular app to be running. For example, Logcat provides logs for the <em>entire</em> device, rather than needing any individual app).</li>
<li>An ID. This needs to be the same as the ID we specified in the client code, otherwise Flipper will have no way of matching up the two halves of our plugin.</li>
<li>A title. This is the human readable name of the plugin that will show up in the sidebar.</li>
</ol>


<p>After that, you should be able to <code>cd</code> into the newly created module directory and run <code>yarn watch</code> to have the plugin continuously be compiled when you make changes.</p>

<h4>Building the Plugin</h4>

<p>If you&rsquo;re familiar with JavaScript and React (I&rsquo;m not especially), creating the desktop side of the plugin might be easy. However, if you&rsquo;re <em>not</em> experienced with these tools, Flipper includes some <a href="https://fbflipper.com/docs/extending/flipper-plugin/#createtableplugin">very convenient helpers</a> for building a simple table UI. In this example, that&rsquo;s exactly what we&rsquo;ll be doing &ndash; let&rsquo;s get started!</p>

<p>The init command we ran earlier auto-generated some files, one of which is <code>index.tsx</code> inside the <code>src</code> directory. Majority of the changes we&rsquo;ll need to make will be in this file.</p>

<p>For our table, the first thing we&rsquo;ll need to define is the fields that will be shown in each row:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>type Row = {
</span><span class='line'>  id: string;
</span><span class='line'>  event: string;
</span><span class='line'>  timestamp: Date;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>The next thing we need to do is create something called a <code>DataTableColumn</code>, which tells Flipper how to display our data. Each object defined in this section will map to the columns in our table &ndash; we can optionally provide a <code>title</code> to provide a more meaningful label at the top of the table and a <code>width</code> in either pixels, percent or nothing (which will distribute the space evenly).</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>const columns: DataTableColumn&lt;Row&gt;[] = [
</span><span class='line'>  {
</span><span class='line'>      title: 'Event Name',
</span><span class='line'>    key: 'event'
</span><span class='line'>  },
</span><span class='line'>  {
</span><span class='line'>    key: 'timestamp',
</span><span class='line'>    width: 150
</span><span class='line'>  }
</span><span class='line'>];</span></code></pre></td></tr></table></div></figure>


<p>Lastly, we will use the Flipper <code>createTablePlugin</code> function to glue this all together:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>const {plugin, Component} = createTablePlugin&lt;Row&gt;({
</span><span class='line'>  columns,
</span><span class='line'>  method: 'newRow',
</span><span class='line'>  key: 'id'
</span><span class='line'>});
</span><span class='line'>export {plugin, Component};</span></code></pre></td></tr></table></div></figure>


<p>If a simple table is not what you&rsquo;re looking for, there&rsquo;s <a href="https://fbflipper.com/docs/tutorial/js-custom/">an entire section in the documentation</a> about how to build a custom UI, and even how to write tests for the display logic.</p>

<p>After you have finished with this part, you should be able to open Flipper and see your plugin listed in the &ldquo;Unavailable Plugins&rdquo; display of the Flipper desktop app. Our plugin is considered &ldquo;Unavailable&rdquo; because no currently running application is available to connect to it&hellip;yet.</p>

<p><img class="center" src="http://michaelevans.org/images/2022/09/28/unavailable.jpg" width="800"></p>

<p>Build and launch your Android app and the plugin should now become &ldquo;Disabled&rdquo;.</p>

<p><img class="center" src="http://michaelevans.org/images/2022/09/28/disabled.jpg" width="800"></p>

<p>We can now click &ldquo;+&rdquo; on the plugin row to &ldquo;enable&rdquo; it and start sending those analytics events &ndash; They should start showing up in the Flipper UI immediately!</p>

<p><img class="center" src="http://michaelevans.org/images/2022/09/28/working.jpg" width="800"></p>

<p>Depending on your use-case, your events might not just be a simple string and timestamp. You&rsquo;ll likely have defined some attributes, maybe the ID of an item being viewed, or the level number completed in a game. It would be great if there was a simple way to see all the data that corresponds to an event, right? Conveniently, the Flipper sidebar to show us that information in an easy to read way. All you need to do is click on the row, and a side panel will appear that renders our event as as JSON tree (I added some additional fields as a demo here):</p>

<p><img class="center" src="http://michaelevans.org/images/2022/09/28/sidebar.jpg" width="800"></p>

<h3>Wrap up</h3>

<p>By using the table plugin on the desktop side, searching and filtering behavior all comes for free, which is amazing if your app sends a lot of analytics events!</p>

<p>The code for both the Desktop Plugin and the Android sample app can be found on <a href="https://github.com/MichaelEvans/FlipperPluginSample">Github here</a>.</p>

<p>As this post demonstrates &ndash; the Flipper SDK is pretty flexible and allows you to build all sorts of custom development tools to help ease everday tasks. Come up with an idea for a cool plugin? Send me a <a href="https://twitter.com/m_evans10">tweet</a>, I&rsquo;d love to hear about it!</p>

<p>(Thanks to <a href="https://twitter.com/zarahjutz">Zarah</a> for the editing and feedback for this post!)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Developer Challenge]]></title>
    <link href="http://michaelevans.org/blog/2020/06/21/android-developer-challenge/"/>
    <updated>2020-06-21T23:41:17-04:00</updated>
    <id>http://michaelevans.org/blog/2020/06/21/android-developer-challenge</id>
    <content type="html"><![CDATA[<p>Late last year, Google announced the <a href="https://developer.android.com/dev-challenge">Android Developer Challenge</a>, a contest for Android developers to show off new experiences made possible by on-device Machine Learning. Since then, tons of developers have submitted their ideas and been hard at work developing their apps. Today, the <a href="https://android-developers.googleblog.com/2020/06/dev-challenge-winners.html">winners of the challenge have been announced</a>!</p>

<!-- more -->


<p>I was lucky to get access to a cool trial box that Google sent out, complete with little goodies to try out some of the apps from the winners! Here are some obligatory unboxing photos:</p>

<p><img class="center" src="http://michaelevans.org/images/2020/06/21/box_a.jpg" width="800" height="800"></p>

<p><img class="center" src="http://michaelevans.org/images/2020/06/21/box_b.jpg" width="800" height="800"></p>

<p><img class="center" src="http://michaelevans.org/images/2020/06/21/box_c.jpg" width="800" height="800"></p>

<p>After checking out the cool loot, I downloaded the winning apps to check them out, and wanted to show off some of my favorites.</p>

<h2>Trashly</h2>

<p>The first app I tried was <a href="https://play.google.com/store/apps/details?id=com.epam.mobilelabs.trashly">Trashly</a>. The goal of this app is to make recycling easier by providing up-to-date information about where and how to recycle your items. You can type in any item that you&rsquo;re interested in recycling, but what&rsquo;s cooler (and relevant to the challenge) is that you can use the camera to detect an object and find out 1) if the item is recyclable, and 2) where you can go to recycle it. I tried this with a can of soda, which was instantly recognized:</p>

<p><img class="center" src="http://michaelevans.org/images/2020/06/21/trashly_capture.png" width="800" height="800"></p>

<p><img class="center" src="http://michaelevans.org/images/2020/06/21/trashly_info.png" width="800" height="800"></p>

<p>And was given a map of nearby places that I could take my can to recycle. Very cool and useful!</p>

<p><img class="center" src="http://michaelevans.org/images/2020/06/21/trashly_map.png" width="800" height="800"></p>

<h2>Leepi</h2>

<p>The next app that I tried was <a href="https://play.google.com/store/apps/details?id=com.mangoai.leepi">Leepi</a>. It&rsquo;s a fun, educational app to help users learn American Sign Language. I personally had never learned Sign Language, so this was a really cool way to start! It uses the camera and on-device machine learning to interpret the user&rsquo;s hand positions to verify that they are doing the hand positions and gestures correctly.</p>

<p><img class="center" src="http://michaelevans.org/images/2020/06/21/leepi_a.png" width="800" height="800"></p>

<p><img class="center" src="http://michaelevans.org/images/2020/06/21/leepi_capture.png" width="800" height="800"></p>

<h2>Path Finder</h2>

<p>The last app I wanted to talk about was called <a href="https://play.google.com/store/apps/details?id=com.br.ml.brpathfinder">Path Finder</a>. The gist of this app is to use the camera and machine learning to build a heatmap of obstacles that might be problematic for visually impaired people in public environments. I tried the app out on the streets of New York City and have some screenshots of the results below. I am not sure how useful this would be in practice, but it certainly looks interesting. I would be curious to hear feedback from someone who is visually impaired to hear their thoughts on the presentation format.</p>

<p><img class="center" src="http://michaelevans.org/images/2020/06/21/pathfinder.png" width="800" height="800"></p>

<p>If you&rsquo;re interested in seeing the very cool and interesting things you can do with on-device machine learning, I definitely encourage you to check out these and the rest of the winning apps. And if you&rsquo;re an author of one of these applications, congratulations on a job well done!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Improving App Debugging with Flipper]]></title>
    <link href="http://michaelevans.org/blog/2020/03/10/improving-app-debugging-with-flipper/"/>
    <updated>2020-03-10T20:10:22-04:00</updated>
    <id>http://michaelevans.org/blog/2020/03/10/improving-app-debugging-with-flipper</id>
    <content type="html"><![CDATA[<p>Some time last year, Facebook released a new mobile debugging tool, named <a href="https://fbflipper.com/">Flipper</a>. It&rsquo;s essentially the successor to the widely popular <a href="http://facebook.github.io/stetho/">Stetho</a>. Although after talking to many developers, it seems like this newer tool is relatively unknown.</p>

<p>Like Stetho, Flipper has many built-in features &ndash; including a layout inspector, a database inspector and a network inspector. Unlike Stetho though, Flipper has a very extensible API which allows for tons of customization. Over the next few articles, we&rsquo;re going to take a look at Flipper and its plugins, the APIs it provides, and how we can leverage them to help us debug various parts of our app. This post will focus on getting set up with Flipper, as well as taking a look at two of its most useful default plugins.</p>

<h2>Getting Started</h2>

<p>Getting started with Flipper is really easy:</p>

<ul>
<li><a href="https://fbflipper.com/">Download the desktop client</a>,</li>
<li>Add the dependencies in your build.gradle:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>repositories {
</span><span class='line'>  jcenter()
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>dependencies {
</span><span class='line'>  debugImplementation 'com.facebook.flipper:flipper:0.33.1'
</span><span class='line'>  debugImplementation 'com.facebook.soloader:soloader:0.8.2'
</span><span class='line'>
</span><span class='line'>  releaseImplementation 'com.facebook.flipper:flipper-noop:0.33.1'
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Initialize the Flipper client when your application starts:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class SampleApplication : Application() {
</span><span class='line'>    override fun onCreate() {
</span><span class='line'>        super.onCreate()
</span><span class='line'>        SoLoader.init(this, false)
</span><span class='line'>
</span><span class='line'>        if (BuildConfig.DEBUG && FlipperUtils.shouldEnableFlipper(this)) {
</span><span class='line'>            val client = AndroidFlipperClient.getInstance(this)
</span><span class='line'>            client.addPlugin(InspectorFlipperPlugin(this, DescriptorMapping.withDefaults()))
</span><span class='line'>            client.start()
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>And that&rsquo;s it! Opening the desktop client should show you an overview of your app with the Inspector plugin configured.</p>

<h2>Inspector Plugin</h2>

<p>The Inspector Plugin is similar to the one found in <a href="https://developer.android.com/studio/debug/layout-inspector">Android Studio 4.0</a>, but has a few neat features. I like it because it operates in real-time, and doesn&rsquo;t require any attaching to process in Studio every time you want to inspect a layout.</p>

<p>Another thing you can do in the Layout Inspector that&rsquo;s really cool is actually <em>edit</em> properties! Pretty mind blowing to make tweaks in the inspector and watch the views change in realtime. It&rsquo;s really handy for experimenting with changing padding, and text colors. It doesn&rsquo;t actually edit any of your xml files, but this allows you to iterate quickly to make sure everything looks right.</p>

<p>Let&rsquo;s find a view we want to update (like our repository name):</p>

<p><img class="center" src="http://michaelevans.org/images/2020/03/10/inspecting.png" width="800" height="800"></p>

<p><img class="center" src="http://michaelevans.org/images/2020/03/10/selecting.png" width="800" height="800"></p>

<p>We can click on the the color swatch to open a color picker:</p>

<p><img class="center" src="http://michaelevans.org/images/2020/03/10/editing.png" width="800" height="800"></p>

<p>And now when we look over at our device:</p>

<p><img class="center" src="http://michaelevans.org/images/2020/03/10/previewing.png" width="800" height="800"></p>

<p>Neat!</p>

<h2>Database Browser / Plugin</h2>

<p>Something I&rsquo;ve wanted for a long time was a way to view the contents of my database from Android Studio. Right now, if you want to visualize your data or try out some queries &ndash; the best solution is to pull the sqlite database file off your emulator/device and run sqlite locally. But with Flipper, there&rsquo;s a better way!</p>

<p>All we need to do is configure the database plugin, and our tables should show up right away:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>client.addPlugin(DatabasesFlipperPlugin(context))</span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="http://michaelevans.org/images/2020/03/10/database_browser.png" width="800" height="800"></p>

<p>Now we can easily inspect the contents of our tables, and even run queries on the live running application!</p>

<p><img class="center" src="http://michaelevans.org/images/2020/03/10/writing_queries.png" width="800" height="800"></p>

<p>I&rsquo;ve <a href="https://github.com/MichaelEvans/architecture-components-samples/commit/274ea5702cb5f10ea13012ce6d9fc6b6896f471e">pushed a branch</a> of the Github Browser Architecture Component sample with these changes to GitHub if you&rsquo;d like to try it out. Next time we&rsquo;ll take advantage of Flipper&rsquo;s extensibility to create our own plugins to make debugging our app easier!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dropping Columns Like It's Hot]]></title>
    <link href="http://michaelevans.org/blog/2020/02/10/dropping-columns-like-its-hot/"/>
    <updated>2020-02-10T20:03:03-05:00</updated>
    <id>http://michaelevans.org/blog/2020/02/10/dropping-columns-like-its-hot</id>
    <content type="html"><![CDATA[<p>Recently, I was doing some code cleanup and noticed that there were some data in the database that was no longer needed. I think most developers clean up their codebase of deprecated patterns and unused code, but I personally have not done a good job of ensuring that the same cleanup happens for unused columns in my databases.</p>

<p>Dropping tables that are no longer used is pretty easy (especially if you can just use something like Room&rsquo;s <a href="https://developer.android.com/training/data-storage/room/migrating-db-versions">Migrations</a>) but when trying to remove unused columns, I ran into an unexpected problem. I thought to myself, it’s pretty easy to add or rename a column, why would dropping one be any harder? The existing database library I was using already had a convenient &ldquo;drop column&rdquo; method, so I simply called that and tried to run the migration. During the process, I ended up with a <code>ForeignKeyConstraintException</code>! I quickly scanned the schema to see what could have caused that, and didn&rsquo;t see anything obvious. The table I was trying to modify didn&rsquo;t have any foreign keys itself, and the column I was dropping was not a foreign key. Curious to understand what was happening, I started to dig into what this method call was doing.</p>

<!-- more -->


<p>I saw that although you can add a column with SQLite&rsquo;s <code>ALTER TABLE ${tableName} ADD COLUMN ${columnName} ${columnType}</code> statements, there&rsquo;s <a href="https://www.sqlite.org/lang_altertable.html">no support for removing a column out of the box</a>. The library method I was using emulates dropping a column by doing the following:</p>

<ol>
<li>Rename the existing table into <code>$tablename_old</code></li>
<li>Creating a new table with all the existing columns, minus the one we don’t want</li>
<li>Copying all the data from <code>$tablename_old</code> to <code>$tablename</code></li>
<li>Dropping <code>$tablename_old</code>, since we don’t need it anymore.</li>
</ol>


<p>This process seems to make a lot of sense &ndash; since we can’t remove the column on its own, let’s just make a new table with the structure we want and copy over the data that we want to keep. So why does this process not work?</p>

<h3>The Gotcha!</h3>

<p>If you read the SQlite documentation linked above closely, you might have noticed an important note:</p>

<blockquote><p>Compatibility Note: The behavior of ALTER TABLE when renaming a table was enhanced in versions 3.25.0 (2018-09-15) and 3.26.0 (2018-12-01) in order to carry the rename operation forward into triggers and views that reference the renamed table. This is considered an improvement. Applications that depend on the older (and arguably buggy) behavior can use the PRAGMA legacy_alter_table=ON statement or the SQLITE_DBCONFIG_LEGACY_ALTER_TABLE configuration parameter on sqlite3_db_config() interface to make ALTER TABLE RENAME behave as it did prior to version 3.25.0.</p></blockquote>

<p>What this means is that when we use <code>ALTER</code> to rename a table, any triggers/views/foreign keys that reference that table will now be updated to support it. As an example:</p>

<p>Let&rsquo;s say we had a table <code>users</code> with a few columns: <code>id</code>, <code>first_name</code>, <code>last_name</code>, and <code>age</code>, and we had a table <code>orders</code> with the columns <code>id</code>, <code>order_number</code> and <code>user_id</code>, where <code>user_id</code> was a foreign key back to the <code>users</code> table. It might look a little like this:</p>

<p><img class="center" src="http://michaelevans.org/images/2020/02/10/before_step1.png" width="400" height="400"></p>

<p>Following the steps above, let&rsquo;s try to drop the <code>age</code> column. First we&rsquo;ll rename the existing table into <code>users_old</code>, and create the new table:</p>

<p><img class="center" src="http://michaelevans.org/images/2020/02/10/before_step2.png" width="400" height="600"></p>

<p>Then we copy the the data, and try to drop <code>users_old</code>, and this is where we run into the exception. The grey line in the diagram is our foreign key association, and that will no longer be valid because the <code>orders</code> table will be trying to reference <code>users_old</code> which we are trying to drop.</p>

<p><img class="center" src="http://michaelevans.org/images/2020/02/10/before_step3.png" width="400" height="600"></p>

<p>Fortunately the documentation lists out a better sequence of steps to perform this operation:</p>

<ol>
<li>Create the new table</li>
<li>Copy over the data we need</li>
<li>Drop old table</li>
<li>Rename the new table with the name of the old table</li>
</ol>


<p>Looking at it more visually &ndash; we&rsquo;ll start with the same tables and create a new table named <code>users_new</code> to hold the preserved data:</p>

<p><img class="center" src="http://michaelevans.org/images/2020/02/10/after_step1.png" width="400" height="600"></p>

<p>Then we&rsquo;ll do the data copy, drop, the old table (but the foreign key relation will still reference the <code>users</code> table), and rename <code>users_new</code> to <code>users</code>.</p>

<p><img class="center" src="http://michaelevans.org/images/2020/02/10/after_step2.png" width="400" height="400"></p>

<p>These steps will ensure that no existing links (views, triggers, etc) are modified. That way when we rename the table in the final step, the existing links will end up referencing the new table already.</p>

<p><img class="center" src="http://michaelevans.org/images/2020/02/10/after_step3.png" width="400" height="400"></p>

<p>TLDR:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>override fun migrate(database: SupportSQLiteDatabase) {
</span><span class='line'>    // Create the new table
</span><span class='line'>    database.execSQL("CREATE TABLE users_new (id INTEGER, first_name TEXT, last_name TEXT, PRIMARY KEY(userid))")
</span><span class='line'>    // Copy the data
</span><span class='line'>    database.execSQL("INSERT INTO users_new (id, first_name, last_name) SELECT id, first_name, last_name FROM users")
</span><span class='line'>    // Remove the old table
</span><span class='line'>    database.execSQL("DROP TABLE users")
</span><span class='line'>    // Change the table name to the correct one
</span><span class='line'>    database.execSQL("ALTER TABLE users_new RENAME TO users")
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Hopefully this discovery helps you better clean up those unused columns in your databases!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stop Repeating Yourself: Sharing test code across Android Modules]]></title>
    <link href="http://michaelevans.org/blog/2019/09/21/stop-repeating-yourself-sharing-test-code-across-android-modules/"/>
    <updated>2019-09-21T21:34:52-04:00</updated>
    <id>http://michaelevans.org/blog/2019/09/21/stop-repeating-yourself-sharing-test-code-across-android-modules</id>
    <content type="html"><![CDATA[<p>It seems like nowadays, the <a href="https://jeroenmols.com/blog/2019/03/06/modularizationwhy/">best advice</a> <a href="https://robinhood.engineering/breaking-up-the-app-module-monolith-the-story-of-robinhoods-android-app-707fb993a50c">is to modularize</a> <a href="https://www.youtube.com/watch?v=PZBg5DIzNww">your Android app</a>. It&rsquo;s a great suggestion for many reasons, including but not limited to:</p>

<pre><code>- improved build performance
- enables on-demand delivery
- pushes you to build reusable, discrete components
</code></pre>

<p>Sounds great, right? Are there any downsides? There is one in particular which has been a a pain point for many.</p>

<p>Often times when you&rsquo;re writing tests, you&rsquo;ll want to use some <a href="https://testing.googleblog.com/2013/07/testing-on-toilet-know-your-test-doubles.html">test doubles</a> like fakes or fixtures in order to help simulate the system under test. Maybe you have a <code>FakeUser</code> instance that you use in your tests to avoid having to mock a <code>User</code> every time your test calls for one. Generally these classes live alongside tests in <code>src/test</code> directories and are used to test out your code within a module.</p>

<p>For example, maybe you have a model object like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public class User {
</span><span class='line'>    private final String firstName;
</span><span class='line'>    private final String lastName;
</span><span class='line'>
</span><span class='line'>    public User(String firstName, String lastName) {
</span><span class='line'>        this.firstName = firstName;
</span><span class='line'>        this.lastName = lastName;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    public String getFirstName() {
</span><span class='line'>        return firstName;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    public String getLastName() {
</span><span class='line'>        return lastName;
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>You might have some code in <code>src/test</code> that creates a bunch of fake users for your tests like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class TheOfficeFixtures {
</span><span class='line'>        public static User manager = new User("Michael", "Scott");
</span><span class='line'>        public static User assistantToTheRegionalManager = new User("Dwight", "Schrute");
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>This works great if you&rsquo;re testing code <em>within</em> a module, but as soon as you&rsquo;d like to use these fake users in other modules, you&rsquo;ll note that these classes aren&rsquo;t shared!</p>

<p>This code can&rsquo;t be shared between modules because Gradle doesn&rsquo;t expose the output of your test source set as a build artifact. There are all kinds of solutions for this problem out there, including <a href="https://treatwell.engineering/mock-factory-for-android-testing-in-multi-module-system-7654f45808be">creating a special module for all your fixtures</a>, and using <a href="https://stackoverflow.com/questions/5644011/multi-project-test-dependencies-with-gradle">gradle dependency hacks</a> to wire up source sets.</p>

<p>However, that&rsquo;s not necessary anymore! As of version 5.6, Gradle now ships a new &lsquo;test-fixtures&rsquo; plugin! This plugin creates a new <code>testFixtures</code> source set, and configures that source set so that:</p>

<pre><code>- classes in this set can see the main source set classes
- test sources can see the test fixtures classes
</code></pre>

<h3>Using the Plugin</h3>

<p>You can apply the <code>java-test-fixtures</code> plugin in your build.gradle script:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>plugins {
</span><span class='line'>    id 'java-test-fixtures'
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>This plugin will define the necessary source set, and handle all the wiring up of test artifacts. We can now  move those test fixtures from <code>src/test/java</code> to <code>src/testFixtures/java</code>, and that&rsquo;s it! These classes will be ready to be consumed by other modules.</p>

<h3>Wiring it all together</h3>

<p>Finally, we need to use a special keyword to pull these new fixtures in as a dependency for our tests. In our  gradle configuration, we add a test dependency (either API or Implementation) like so:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dependencies {
</span><span class='line'>    testImplementation(testFixtures(project(":lib")))
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>And that&rsquo;s it! Our other module can now consume these test fixtures without any sort of intermediate modules or workarounds.</p>

<p>If you&rsquo;d like to check out the complete configuration with examples sharing fixtures between both Kotlin and Java modules to a shared &ldquo;app&rdquo; module, I&rsquo;ve uploaded a sample project demonstrating how to use this new configuration <a href="https://github.com/MichaelEvans/TestFixturesExample">here</a>.</p>

<h2>Important Caveat</h2>

<p>It&rsquo;s important to note that this feature is currently only available with the <code>java-library</code> plugin, and has limited functionality in Kotlin modules, and not yet available for Android modules. There are currently feature requests on <a href="https://youtrack.jetbrains.com/issue/KT-33877">YouTrack</a> and the <a href="https://issuetracker.google.com/issues/139438142">Android Issue Tracker</a> to take advantage of this new functionality.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hands on with ViewPager2]]></title>
    <link href="http://michaelevans.org/blog/2019/02/07/hands-on-with-viewpager2/"/>
    <updated>2019-02-07T21:38:07-05:00</updated>
    <id>http://michaelevans.org/blog/2019/02/07/hands-on-with-viewpager2</id>
    <content type="html"><![CDATA[<p>Today Google released their alpha of <a href="https://developer.android.com/jetpack/androidx/releases/viewpager2#1.0.0-alpha01">ViewPager2</a>, a signal of the nail in the coffin for the original ViewPager, originally <a href="https://android-developers.googleblog.com/2011/08/horizontal-view-swiping-with-viewpager.html">released in 2011</a>!</p>

<p>Since then, I think it&rsquo;s safe to say that most developers have needed to make a ViewPager. Despite how prolific it is, it certainly isn&rsquo;t the most straightforward widget to include. I think we all have at least once wondered whether we should use a <code>FragmentPagerAdapter</code> or a <code>FragmentStatePagerAdapter</code>. Or wondered if we can use a <a href="https://www.bignerdranch.com/blog/viewpager-without-fragments/">ViewPager <em>without</em> Fragments</a>.</p>

<p>And API confusion aside, we&rsquo;ve still had long standing, feature requests. <a href="https://issuetracker.google.com/issues/36973591">RTL support</a>? <a href="https://issuetracker.google.com/issues/36952939">Vertical orientation</a>? There are numerous <a href="https://github.com/duolingo/rtl-viewpager">open source</a> <a href="https://github.com/kaelaela/VerticalViewPager">solutions</a> for these, but nothing official from the support library (now AndroidX)&hellip;until now!</p>

<p>Let&rsquo;s dive in and try to set up ViewPager2! You&rsquo;ll need your project configured with AndroidX already, as well as supporting minSdkVersion 14 or higher.</p>

<!-- more -->


<p>The first thing we&rsquo;ll need to do is add the library to our build.gradle dependencies.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>implementation 'androidx.viewpager2:viewpager2:1.0.0-alpha01'</span></code></pre></td></tr></table></div></figure>


<p>If you&rsquo;re familiar with RecyclerView, setting up ViewPager2 will be very familiar. We start off by creating an adapter:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class CheesePagerAdapter(private val cheeseStrings: Array&lt;String&gt;) : RecyclerView.Adapter&lt;CheeseViewHolder&gt;() {
</span><span class='line'>    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): CheeseViewHolder {
</span><span class='line'>        return CheeseViewHolder(LayoutInflater.from(parent.context).inflate(R.layout.cheese_list_item, parent, false))
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    override fun onBindViewHolder(holder: CheeseViewHolder, position: Int) {
</span><span class='line'>        holder.cheeseName.text = cheeseStrings[position]
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    override fun getItemCount() = cheeseStrings.size
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>and pair it with a RecyclerView.ViewHolder.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class CheeseViewHolder(view: View) : RecyclerView.ViewHolder(view) {
</span><span class='line'>
</span><span class='line'>    val cheeseName: TextView = view.findViewById(R.id.cheese_name)
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Finally, just like RecyclerView, we set the adapter of our ViewPager2 to be an instance of the RecyclerView adapter. However, you&rsquo;ll note that there&rsquo;s no need for a LayoutManager.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>viewPager.adapter = CheesePagerAdapter(Cheeses.CheeseStrings)</span></code></pre></td></tr></table></div></figure>


<p>And with that, we have a working ViewPager2!</p>

<p><img class="center" src="http://michaelevans.org/images/2019/02/07/Horizontal.gif" width="600" height="600" title="Horizontal ViewPager2" ></p>

<p>We can even set the orientation to scroll vertically with just one line:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>viewPager.orientation = ViewPager2.ORIENTATION_VERTICAL</span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="http://michaelevans.org/images/2019/02/07/Vertical.gif" width="600" height="600" title="Vertical ViewPager2" ></p>

<p>Based on the release notes there are a lot of issues left to fix before this moves to a final release &ndash; but this is a long awaited update for one of those oldest support library components.</p>

<p>The sample code for this post can be found <a href="https://github.com/MichaelEvans/ViewPager2Sample">here</a>. Thanks to Chris Banes&#8217; <a href="https://github.com/chrisbanes/cheesesquare">CheeseSquare</a> for the sample data for this demo!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Enabling Night Mode on Android Nougat]]></title>
    <link href="http://michaelevans.org/blog/2016/08/23/enabling-night-mode-on-android-nougat/"/>
    <updated>2016-08-23T18:27:01-04:00</updated>
    <id>http://michaelevans.org/blog/2016/08/23/enabling-night-mode-on-android-nougat</id>
    <content type="html"><![CDATA[<p>If you&rsquo;re like me, you loved the <a href="http://www.androidpolice.com/2016/03/09/android-n-feature-spotlight-night-mode-is-back-with-expanded-features-including-red-filter-and-brightness/">Night Mode feature</a> that was added to the Nougat Developer Preview a few months ago. You might have been disappointed when you found out that it was missing in later preview builds, and was probably going to be removed <a href="https://www.reddit.com/r/androiddev/comments/4tm8i6/were_on_the_android_engineering_team_and_built/d5igc5t">because it wasn&rsquo;t ready</a>.</p>

<p>When the source code for Nougat was released this morning, my friend <a href="https://twitter.com/vishnurajeevan">Vishnu</a> found this interesting snippet in the <a href="https://android.googlesource.com/platform/frameworks/base/+/android-7.0.0_r1/packages/SystemUI/src/com/android/systemui/tuner/TunerActivity.java#42">SystemUI source</a> (better known to end users as the System UI Tuner):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">boolean</span> <span class="n">showNightMode</span> <span class="o">=</span> <span class="n">getIntent</span><span class="o">().</span><span class="na">getBooleanExtra</span><span class="o">(</span>
</span><span class='line'>    <span class="n">NightModeFragment</span><span class="o">.</span><span class="na">EXTRA_SHOW_NIGHT_MODE</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
</span><span class='line'><span class="kd">final</span> <span class="n">PreferenceFragment</span> <span class="n">fragment</span> <span class="o">=</span> <span class="n">showNightMode</span> <span class="o">?</span> <span class="k">new</span> <span class="n">NightModeFragment</span><span class="o">()</span>
</span><span class='line'>    <span class="o">:</span> <span class="n">showDemoMode</span> <span class="o">?</span> <span class="k">new</span> <span class="n">DemoModeFragment</span><span class="o">()</span>
</span><span class='line'>    <span class="o">:</span> <span class="k">new</span> <span class="n">TunerFragment</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Long story short, if you pass the right extras to this activity, and you&rsquo;ll get access to the Night Mode settings (as well as the infamous Quick Tile!).</p>

<p>Fortunately for us, this is pretty trivial to accomplish with <code>adb</code> via <code>adb -d shell am start  --ez show_night_mode true com.android.systemui/.tuner.TunerActivity</code>, but not everyone who wants this feature is familiar with <code>adb</code>. So I published an app to the Play Store that does exactly that &ndash; click one button, and get access to those settings! You can find the app on the Play Store <a href="https://play.google.com/store/apps/details?id=org.michaelevans.nightmodeenabler">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Build Types with the Google Services Gradle Plugin]]></title>
    <link href="http://michaelevans.org/blog/2016/03/31/using-build-types-with-the-google-services-gradle-plugin/"/>
    <updated>2016-03-31T21:11:55-04:00</updated>
    <id>http://michaelevans.org/blog/2016/03/31/using-build-types-with-the-google-services-gradle-plugin</id>
    <content type="html"><![CDATA[<p>If you want to integrate your Android app with most of Google Play Services nowadays, you&rsquo;ll find that you are instructed to set up the <a href="https://developers.google.com/android/guides/google-services-plugin">Google Services Gradle plugin</a> to handle configuring dependencies. The plugin allows you to drop a JSON file into your project, and then the plugin will do a bunch of the configuration for your project, such as handling the API keys.</p>

<p>This is all well and good—unless you&rsquo;re like me (<a href="https://github.com/googlesamples/google-services/issues/54">and countless others</a>) and want to use a different configuration for your debug and release builds. This would be useful, as an example, if you use Google Play Services for GCM and would like to have development builds recieve pushes from non-production systems.</p>

<p>It seems that the plugin is configured in such a way that it supports build flavors, but it does not yet support build types. However, with a little Gradle magic, we can hack that support in.</p>

<!-- more -->


<p><strong>Disclaimer: This approach worked for me—but as with any hack, it is subject to break.</strong></p>

<p>So how can we go about doing this? We want to put the debug JSON file into the root of our app module during debug builds and use the release one for release builds. If you don&rsquo;t do that, or if you attempt to put it in <code>app/debug</code> and <code>app/release</code>, you&rsquo;ll get an error that says <code>File google-services.json is missing from module root folder. The Google Services Plugin cannot function without it</code>.</p>

<p>This error is thrown by a task named <code>process{VariantName}GoogleServices</code>. What we could do to solve this is swap the file in before that task is run! Using a little Groovy magic, I came up with this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">android</span><span class="o">.</span><span class="na">applicationVariants</span><span class="o">.</span><span class="na">all</span> <span class="o">{</span> <span class="n">variant</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="kt">def</span> <span class="n">hackTask</span> <span class="o">=</span> <span class="n">task</span><span class="o">(</span><span class="s2">&quot;hackGps${variant.name.capitalize()}&quot;</span><span class="o">)</span> <span class="o">&lt;&lt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">copy</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">from</span> <span class="n">rootProject</span><span class="o">.</span><span class="na">file</span><span class="o">(</span><span class="s2">&quot;config/${variant.buildType.name}/google-services.json&quot;</span><span class="o">)</span>
</span><span class='line'>            <span class="n">into</span> <span class="s2">&quot;${projectDir}&quot;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="kt">def</span> <span class="n">googleTask</span> <span class="o">=</span> <span class="n">tasks</span><span class="o">.</span><span class="na">findByName</span><span class="o">(</span><span class="s2">&quot;process${variant.name.capitalize()}GoogleServices&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="n">googleTask</span><span class="o">.</span><span class="na">dependsOn</span> <span class="n">hackTask</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>For each one of your variants, this code will create a new task &ndash; <code>hackGps{VariantName}</code>, which copies a <code>google-services.json</code> file from a <code>config</code> directory into the root of your app module. Then it finds the corresponding Google Services task, and hooks itself in to run right before that! Now when you assemble your application, the right <code>google-services.json</code> file will be in the right place, ready to be picked up by the plugin.</p>

<p><em>You might also want to .gitignore the <code>app/google-services.json</code> file, so that you don&rsquo;t keep committing the changed file to git</em></p>

<p>Hopefully Google will fix this issue in an upcoming release of the Google Services plugin, but until then &ndash; this technique should work!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Changelog for N Support Libraries]]></title>
    <link href="http://michaelevans.org/blog/2016/03/09/changelog-for-n-support-libraries/"/>
    <updated>2016-03-09T19:38:46-05:00</updated>
    <id>http://michaelevans.org/blog/2016/03/09/changelog-for-n-support-libraries</id>
    <content type="html"><![CDATA[<p>Pssst! If you&rsquo;re an Android developer, you might not have heard yet&hellip;the <a href="http://android-developers.blogspot.com/2016/03/first-preview-of-android-n-developer.html">N Preview started today</a>! As part of the festivities, a new alpha version of the support libraries was released. There was no changelog that I could find, so I decided to make one. Here&rsquo;s what has changed (so far) in the public API of a few of these libraries:</p>

<!-- more -->


<h2>Support-V4:</h2>

<div><script src='https://gist.github.com/5d7c55382198640345dc.js?file=support-v4.diff'></script>
<noscript><pre><code>diff -U 0 -N support-v4-23.2.0_df13b086/android.support.v4.app.FragmentController support-v4-24.0.0-alpha1_41849fd4/android.support.v4.app.FragmentController
--- support-v4-23.2.0_df13b086/android.support.v4.app.FragmentController    2016-03-09 19:28:24.000000000 -0500
+++ support-v4-24.0.0-alpha1_41849fd4/android.support.v4.app.FragmentController 2016-03-09 19:28:24.000000000 -0500
@@ -11,0 +12 @@
+  public void restoreAllState(android.os.Parcelable, android.support.v4.app.FragmentManagerNonConfig);
@@ -12,0 +14 @@
+  public android.support.v4.app.FragmentManagerNonConfig retainNestedNonConfig();
diff -U 0 -N support-v4-23.2.0_df13b086/android.support.v4.app.FragmentManagerNonConfig support-v4-24.0.0-alpha1_41849fd4/android.support.v4.app.FragmentManagerNonConfig
--- support-v4-23.2.0_df13b086/android.support.v4.app.FragmentManagerNonConfig  1969-12-31 19:00:00.000000000 -0500
+++ support-v4-24.0.0-alpha1_41849fd4/android.support.v4.app.FragmentManagerNonConfig   2016-03-09 19:28:24.000000000 -0500
@@ -0,0 +1,2 @@
+public class android.support.v4.app.FragmentManagerNonConfig {
+}
diff -U 0 -N support-v4-23.2.0_df13b086/android.support.v4.app.FragmentTransaction support-v4-24.0.0-alpha1_41849fd4/android.support.v4.app.FragmentTransaction
--- support-v4-23.2.0_df13b086/android.support.v4.app.FragmentTransaction   2016-03-09 19:28:24.000000000 -0500
+++ support-v4-24.0.0-alpha1_41849fd4/android.support.v4.app.FragmentTransaction    2016-03-09 19:28:24.000000000 -0500
@@ -34,0 +35,2 @@
+  public abstract void commitNow();
+  public abstract void commitNowAllowingStateLoss();
diff -U 0 -N support-v4-23.2.0_df13b086/android.support.v4.content.ContextCompat support-v4-24.0.0-alpha1_41849fd4/android.support.v4.content.ContextCompat
--- support-v4-23.2.0_df13b086/android.support.v4.content.ContextCompat 2016-03-09 19:28:24.000000000 -0500
+++ support-v4-24.0.0-alpha1_41849fd4/android.support.v4.content.ContextCompat  2016-03-09 19:28:24.000000000 -0500
@@ -13,0 +14,2 @@
+  public static android.content.Context createDeviceEncryptedStorageContext(android.content.Context);
+  public static boolean isDeviceEncryptedStorage(android.content.Context);
diff -U 0 -N support-v4-23.2.0_df13b086/android.support.v4.content.res.TypedArrayUtils support-v4-24.0.0-alpha1_41849fd4/android.support.v4.content.res.TypedArrayUtils
--- support-v4-23.2.0_df13b086/android.support.v4.content.res.TypedArrayUtils   2016-03-09 19:28:24.000000000 -0500
+++ support-v4-24.0.0-alpha1_41849fd4/android.support.v4.content.res.TypedArrayUtils    2016-03-09 19:28:24.000000000 -0500
@@ -8,0 +9 @@
+  public static int getAttr(android.content.Context, int, int);
diff -U 0 -N support-v4-23.2.0_df13b086/android.support.v4.media.session.IMediaSession support-v4-24.0.0-alpha1_41849fd4/android.support.v4.media.session.IMediaSession
--- support-v4-23.2.0_df13b086/android.support.v4.media.session.IMediaSession   2016-03-09 19:28:24.000000000 -0500
+++ support-v4-24.0.0-alpha1_41849fd4/android.support.v4.media.session.IMediaSession    2016-03-09 19:28:24.000000000 -0500
@@ -33,0 +34,4 @@
+  public abstract void prepare() throws android.os.RemoteException;
+  public abstract void prepareFromMediaId(java.lang.String, android.os.Bundle) throws android.os.RemoteException;
+  public abstract void prepareFromSearch(java.lang.String, android.os.Bundle) throws android.os.RemoteException;
+  public abstract void prepareFromUri(android.net.Uri, android.os.Bundle) throws android.os.RemoteException;
diff -U 0 -N support-v4-23.2.0_df13b086/android.support.v4.media.session.MediaControllerCompat$TransportControls support-v4-24.0.0-alpha1_41849fd4/android.support.v4.media.session.MediaControllerCompat$TransportControls
--- support-v4-23.2.0_df13b086/android.support.v4.media.session.MediaControllerCompat$TransportControls 2016-03-09 19:28:24.000000000 -0500
+++ support-v4-24.0.0-alpha1_41849fd4/android.support.v4.media.session.MediaControllerCompat$TransportControls  2016-03-09 19:28:24.000000000 -0500
@@ -1,0 +2,4 @@
+  public abstract void prepare();
+  public abstract void prepareFromMediaId(java.lang.String, android.os.Bundle);
+  public abstract void prepareFromSearch(java.lang.String, android.os.Bundle);
+  public abstract void prepareFromUri(android.net.Uri, android.os.Bundle);
diff -U 0 -N support-v4-23.2.0_df13b086/android.support.v4.media.session.MediaSessionCompat support-v4-24.0.0-alpha1_41849fd4/android.support.v4.media.session.MediaSessionCompat
--- support-v4-23.2.0_df13b086/android.support.v4.media.session.MediaSessionCompat  2016-03-09 19:28:24.000000000 -0500
+++ support-v4-24.0.0-alpha1_41849fd4/android.support.v4.media.session.MediaSessionCompat   2016-03-09 19:28:24.000000000 -0500
@@ -4,3 +3,0 @@
-  public static final java.lang.String ACTION_PLAY_FROM_URI;
-  public static final java.lang.String ACTION_ARGUMENT_URI;
-  public static final java.lang.String ACTION_ARGUMENT_EXTRAS;
diff -U 0 -N support-v4-23.2.0_df13b086/android.support.v4.media.session.MediaSessionCompat$Callback support-v4-24.0.0-alpha1_41849fd4/android.support.v4.media.session.MediaSessionCompat$Callback
--- support-v4-23.2.0_df13b086/android.support.v4.media.session.MediaSessionCompat$Callback 2016-03-09 19:28:24.000000000 -0500
+++ support-v4-24.0.0-alpha1_41849fd4/android.support.v4.media.session.MediaSessionCompat$Callback  2016-03-09 19:28:24.000000000 -0500
@@ -4,0 +5,4 @@
+  public void onPrepare();
+  public void onPrepareFromMediaId(java.lang.String, android.os.Bundle);
+  public void onPrepareFromSearch(java.lang.String, android.os.Bundle);
+  public void onPrepareFromUri(android.net.Uri, android.os.Bundle);
diff -U 0 -N support-v4-23.2.0_df13b086/android.support.v4.media.session.PlaybackStateCompat support-v4-24.0.0-alpha1_41849fd4/android.support.v4.media.session.PlaybackStateCompat
--- support-v4-23.2.0_df13b086/android.support.v4.media.session.PlaybackStateCompat 2016-03-09 19:28:24.000000000 -0500
+++ support-v4-24.0.0-alpha1_41849fd4/android.support.v4.media.session.PlaybackStateCompat  2016-03-09 19:28:24.000000000 -0500
@@ -15,0 +16,4 @@
+  public static final long ACTION_PREPARE;
+  public static final long ACTION_PREPARE_FROM_MEDIA_ID;
+  public static final long ACTION_PREPARE_FROM_SEARCH;
+  public static final long ACTION_PREPARE_FROM_URI;
diff -U 0 -N support-v4-23.2.0_df13b086/android.support.v4.net.TrafficStatsCompat support-v4-24.0.0-alpha1_41849fd4/android.support.v4.net.TrafficStatsCompat
--- support-v4-23.2.0_df13b086/android.support.v4.net.TrafficStatsCompat    2016-03-09 19:28:24.000000000 -0500
+++ support-v4-24.0.0-alpha1_41849fd4/android.support.v4.net.TrafficStatsCompat 2016-03-09 19:28:24.000000000 -0500
@@ -8,0 +9,2 @@
+  public static void tagDatagramSocket(java.net.DatagramSocket) throws java.net.SocketException;
+  public static void untagDatagramSocket(java.net.DatagramSocket) throws java.net.SocketException;
diff -U 0 -N support-v4-23.2.0_df13b086/android.support.v4.os.BuildCompat support-v4-24.0.0-alpha1_41849fd4/android.support.v4.os.BuildCompat
--- support-v4-23.2.0_df13b086/android.support.v4.os.BuildCompat    1969-12-31 19:00:00.000000000 -0500
+++ support-v4-24.0.0-alpha1_41849fd4/android.support.v4.os.BuildCompat 2016-03-09 19:28:24.000000000 -0500
@@ -0,0 +1,3 @@
+public class android.support.v4.os.BuildCompat {
+  public static boolean isAtLeastN();
+}
diff -U 0 -N support-v4-23.2.0_df13b086/android.support.v4.os.UserManagerCompat support-v4-24.0.0-alpha1_41849fd4/android.support.v4.os.UserManagerCompat
--- support-v4-23.2.0_df13b086/android.support.v4.os.UserManagerCompat  1969-12-31 19:00:00.000000000 -0500
+++ support-v4-24.0.0-alpha1_41849fd4/android.support.v4.os.UserManagerCompat   2016-03-09 19:28:24.000000000 -0500
@@ -0,0 +1,6 @@
+public class android.support.v4.os.UserManagerCompat {
+  public android.support.v4.os.UserManagerCompat();
+  public static boolean isUserRunningAndLocked(android.content.Context);
+  public static boolean isUserRunningAndUnlocked(android.content.Context);
+  public static boolean isUserUnlocked(android.content.Context);
+}
diff -U 0 -N support-v4-23.2.0_df13b086/android.support.v4.view.AsyncLayoutInflater support-v4-24.0.0-alpha1_41849fd4/android.support.v4.view.AsyncLayoutInflater
--- support-v4-23.2.0_df13b086/android.support.v4.view.AsyncLayoutInflater  1969-12-31 19:00:00.000000000 -0500
+++ support-v4-24.0.0-alpha1_41849fd4/android.support.v4.view.AsyncLayoutInflater   2016-03-09 19:28:24.000000000 -0500
@@ -0,0 +1,4 @@
+public final class android.support.v4.view.AsyncLayoutInflater {
+  public android.support.v4.view.AsyncLayoutInflater(android.content.Context);
+  public void inflate(int, android.view.ViewGroup, android.support.v4.view.AsyncLayoutInflater$OnInflateFinishedListener);
+}
diff -U 0 -N support-v4-23.2.0_df13b086/android.support.v4.view.AsyncLayoutInflater$OnInflateFinishedListener support-v4-24.0.0-alpha1_41849fd4/android.support.v4.view.AsyncLayoutInflater$OnInflateFinishedListener
--- support-v4-23.2.0_df13b086/android.support.v4.view.AsyncLayoutInflater$OnInflateFinishedListener    1969-12-31 19:00:00.000000000 -0500
+++ support-v4-24.0.0-alpha1_41849fd4/android.support.v4.view.AsyncLayoutInflater$OnInflateFinishedListener 2016-03-09 19:28:24.000000000 -0500
@@ -0,0 +1,3 @@
+public interface android.support.v4.view.AsyncLayoutInflater$OnInflateFinishedListener {
+  public abstract void onInflateFinished(android.view.View, int, android.view.ViewGroup);
+}
diff -U 0 -N support-v4-23.2.0_df13b086/android.support.v4.view.KeyEventCompat support-v4-24.0.0-alpha1_41849fd4/android.support.v4.view.KeyEventCompat
--- support-v4-23.2.0_df13b086/android.support.v4.view.KeyEventCompat   2016-03-09 19:28:24.000000000 -0500
+++ support-v4-24.0.0-alpha1_41849fd4/android.support.v4.view.KeyEventCompat    2016-03-09 19:28:24.000000000 -0500
@@ -10,0 +11 @@
+  public static boolean isCtrlPressed(android.view.KeyEvent);
diff -U 0 -N support-v4-23.2.0_df13b086/android.support.v4.view.MotionEventCompat support-v4-24.0.0-alpha1_41849fd4/android.support.v4.view.MotionEventCompat
--- support-v4-23.2.0_df13b086/android.support.v4.view.MotionEventCompat    2016-03-09 19:28:24.000000000 -0500
+++ support-v4-24.0.0-alpha1_41849fd4/android.support.v4.view.MotionEventCompat 2016-03-09 19:28:24.000000000 -0500
@@ -36,0 +37,2 @@
+  public static final int AXIS_RELATIVE_X;
+  public static final int AXIS_RELATIVE_Y;
@@ -52,0 +55 @@
+  public static final int BUTTON_PRIMARY;
@@ -60,0 +64 @@
+  public static boolean isFromSource(android.view.MotionEvent, int);
@@ -62,0 +67 @@
+  public static int getButtonState(android.view.MotionEvent);
diff -U 0 -N support-v4-23.2.0_df13b086/android.support.v4.view.PointerIconCompat support-v4-24.0.0-alpha1_41849fd4/android.support.v4.view.PointerIconCompat
--- support-v4-23.2.0_df13b086/android.support.v4.view.PointerIconCompat    1969-12-31 19:00:00.000000000 -0500
+++ support-v4-24.0.0-alpha1_41849fd4/android.support.v4.view.PointerIconCompat 2016-03-09 19:28:24.000000000 -0500
@@ -0,0 +1,29 @@
+public final class android.support.v4.view.PointerIconCompat {
+  public static final int STYLE_NULL;
+  public static final int STYLE_ARROW;
+  public static final int STYLE_CONTEXT_MENU;
+  public static final int STYLE_HAND;
+  public static final int STYLE_HELP;
+  public static final int STYLE_WAIT;
+  public static final int STYLE_CELL;
+  public static final int STYLE_CROSSHAIR;
+  public static final int STYLE_TEXT;
+  public static final int STYLE_VERTICAL_TEXT;
+  public static final int STYLE_ALIAS;
+  public static final int STYLE_COPY;
+  public static final int STYLE_NO_DROP;
+  public static final int STYLE_ALL_SCROLL;
+  public static final int STYLE_HORIZONTAL_DOUBLE_ARROW;
+  public static final int STYLE_VERTICAL_DOUBLE_ARROW;
+  public static final int STYLE_TOP_RIGHT_DIAGONAL_DOUBLE_ARROW;
+  public static final int STYLE_TOP_LEFT_DIAGONAL_DOUBLE_ARROW;
+  public static final int STYLE_ZOOM_IN;
+  public static final int STYLE_ZOOM_OUT;
+  public static final int STYLE_GRAB;
+  public static final int STYLE_GRABBING;
+  public static final int STYLE_DEFAULT;
+  public java.lang.Object getPointerIcon();
+  public static android.support.v4.view.PointerIconCompat getSystemIcon(android.content.Context, int);
+  public static android.support.v4.view.PointerIconCompat createCustomIcon(android.graphics.Bitmap, float, float);
+  public static android.support.v4.view.PointerIconCompat loadCustomIcon(android.content.res.Resources, int);
+}
diff -U 0 -N support-v4-23.2.0_df13b086/android.support.v4.view.ViewCompat support-v4-24.0.0-alpha1_41849fd4/android.support.v4.view.ViewCompat
--- support-v4-23.2.0_df13b086/android.support.v4.view.ViewCompat   2016-03-09 19:28:24.000000000 -0500
+++ support-v4-24.0.0-alpha1_41849fd4/android.support.v4.view.ViewCompat    2016-03-09 19:28:24.000000000 -0500
@@ -1 +1 @@
-public final class android.support.v4.view.ViewCompat {
+public class android.support.v4.view.ViewCompat {
@@ -141,0 +142,4 @@
+  public static void setPointerCapture(android.view.View);
+  public static boolean hasPointerCapture(android.view.View);
+  public static void releasePointerCapture(android.view.View);
+  public static void setPointerIcon(android.view.View, android.support.v4.view.PointerIconCompat);
diff -U 0 -N support-v4-23.2.0_df13b086/android.support.v4.view.ViewCompat$FocusDirection support-v4-24.0.0-alpha1_41849fd4/android.support.v4.view.ViewCompat$FocusDirection
--- support-v4-23.2.0_df13b086/android.support.v4.view.ViewCompat$FocusDirection    1969-12-31 19:00:00.000000000 -0500
+++ support-v4-24.0.0-alpha1_41849fd4/android.support.v4.view.ViewCompat$FocusDirection 2016-03-09 19:28:24.000000000 -0500
@@ -0,0 +1,2 @@
+public interface android.support.v4.view.ViewCompat$FocusDirection extends java.lang.annotation.Annotation {
+}
diff -U 0 -N support-v4-23.2.0_df13b086/android.support.v4.view.ViewCompat$FocusRealDirection support-v4-24.0.0-alpha1_41849fd4/android.support.v4.view.ViewCompat$FocusRealDirection
--- support-v4-23.2.0_df13b086/android.support.v4.view.ViewCompat$FocusRealDirection    1969-12-31 19:00:00.000000000 -0500
+++ support-v4-24.0.0-alpha1_41849fd4/android.support.v4.view.ViewCompat$FocusRealDirection 2016-03-09 19:28:24.000000000 -0500
@@ -0,0 +1,2 @@
+public interface android.support.v4.view.ViewCompat$FocusRealDirection extends java.lang.annotation.Annotation {
+}
diff -U 0 -N support-v4-23.2.0_df13b086/android.support.v4.view.ViewCompat$FocusRelativeDirection support-v4-24.0.0-alpha1_41849fd4/android.support.v4.view.ViewCompat$FocusRelativeDirection
--- support-v4-23.2.0_df13b086/android.support.v4.view.ViewCompat$FocusRelativeDirection    1969-12-31 19:00:00.000000000 -0500
+++ support-v4-24.0.0-alpha1_41849fd4/android.support.v4.view.ViewCompat$FocusRelativeDirection 2016-03-09 19:28:24.000000000 -0500
@@ -0,0 +1,2 @@
+public interface android.support.v4.view.ViewCompat$FocusRelativeDirection extends java.lang.annotation.Annotation {
+}
diff -U 0 -N support-v4-23.2.0_df13b086/android.support.v4.view.accessibility.AccessibilityNodeInfoCompat support-v4-24.0.0-alpha1_41849fd4/android.support.v4.view.accessibility.AccessibilityNodeInfoCompat
--- support-v4-23.2.0_df13b086/android.support.v4.view.accessibility.AccessibilityNodeInfoCompat    2016-03-09 19:28:24.000000000 -0500
+++ support-v4-24.0.0-alpha1_41849fd4/android.support.v4.view.accessibility.AccessibilityNodeInfoCompat 2016-03-09 19:28:24.000000000 -0500
@@ -148,0 +149,2 @@
+  public java.lang.CharSequence getRoleDescription();
+  public void setRoleDescription(java.lang.CharSequence);
diff -U 0 -N support-v4-23.2.0_df13b086/android.support.v4.widget.ExploreByTouchHelper support-v4-24.0.0-alpha1_41849fd4/android.support.v4.widget.ExploreByTouchHelper
--- support-v4-23.2.0_df13b086/android.support.v4.widget.ExploreByTouchHelper   2016-03-09 19:28:24.000000000 -0500
+++ support-v4-24.0.0-alpha1_41849fd4/android.support.v4.widget.ExploreByTouchHelper    2016-03-09 19:28:24.000000000 -0500
@@ -6,4 +6,9 @@
-  public boolean dispatchHoverEvent(android.view.MotionEvent);
-  public boolean sendEventForVirtualView(int, int);
-  public void invalidateRoot();
-  public void invalidateVirtualView(int);
+  public final boolean dispatchHoverEvent(android.view.MotionEvent);
+  public final boolean dispatchKeyEvent(android.view.KeyEvent);
+  public final void onFocusChanged(boolean, int, android.graphics.Rect);
+  public final int getAccessibilityFocusedVirtualViewId();
+  public final int getKeyboardFocusedVirtualViewId();
+  public final boolean sendEventForVirtualView(int, int);
+  public final void invalidateRoot();
+  public final void invalidateVirtualView(int);
+  public final void invalidateVirtualView(int, int);
@@ -11 +16,4 @@
-  public void onPopulateNodeForHost(android.support.v4.view.accessibility.AccessibilityNodeInfoCompat);
+  public void onInitializeAccessibilityEvent(android.view.View, android.view.accessibility.AccessibilityEvent);
+  public void onInitializeAccessibilityNodeInfo(android.view.View, android.support.v4.view.accessibility.AccessibilityNodeInfoCompat);
+  public final boolean requestKeyboardFocusForVirtualView(int);
+  public final boolean clearKeyboardFocusForVirtualView(int);
diff -U 0 -N support-v4-23.2.0_df13b086/android.support.v4.widget.FocusStrategy$BoundsAdapter&lt;T&gt; support-v4-24.0.0-alpha1_41849fd4/android.support.v4.widget.FocusStrategy$BoundsAdapter&lt;T&gt;
--- support-v4-23.2.0_df13b086/android.support.v4.widget.FocusStrategy$BoundsAdapter&lt;T&gt;   1969-12-31 19:00:00.000000000 -0500
+++ support-v4-24.0.0-alpha1_41849fd4/android.support.v4.widget.FocusStrategy$BoundsAdapter&lt;T&gt;    2016-03-09 19:28:24.000000000 -0500
@@ -0,0 +1,3 @@
+public interface android.support.v4.widget.FocusStrategy$BoundsAdapter&lt;T&gt; {
+  public abstract void obtainBounds(T, android.graphics.Rect);
+}
diff -U 0 -N support-v4-23.2.0_df13b086/android.support.v4.widget.FocusStrategy$CollectionAdapter&lt;T, support-v4-24.0.0-alpha1_41849fd4/android.support.v4.widget.FocusStrategy$CollectionAdapter&lt;T,
--- support-v4-23.2.0_df13b086/android.support.v4.widget.FocusStrategy$CollectionAdapter&lt;T,  1969-12-31 19:00:00.000000000 -0500
+++ support-v4-24.0.0-alpha1_41849fd4/android.support.v4.widget.FocusStrategy$CollectionAdapter&lt;T,   2016-03-09 19:28:24.000000000 -0500
@@ -0,0 +1,4 @@
+public interface android.support.v4.widget.FocusStrategy$CollectionAdapter&lt;T, V&gt; {
+  public abstract V get(T, int);
+  public abstract int size(T);
+}</code></pre></noscript></div>


<h2>AppCompat:</h2>

<div><script src='https://gist.github.com/5d7c55382198640345dc.js?file=appcompat.diff'></script>
<noscript><pre><code>diff -U 0 -N appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.app.AppCompatDelegateImplV7$PanelFeatureState appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.app.AppCompatDelegateImplV7$PanelFeatureState
--- appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.app.AppCompatDelegateImplV7$PanelFeatureState   1969-12-31 19:00:00.000000000 -0500
+++ appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.app.AppCompatDelegateImplV7$PanelFeatureState    2016-03-09 19:28:22.000000000 -0500
@@ -0,0 +1,5 @@
+public final class android.support.v7.app.AppCompatDelegateImplV7$PanelFeatureState {
+  public boolean qwertyMode;
+  public boolean hasPanelItems();
+  public void clearMenuPresenters();
+}
diff -U 0 -N appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.view.WindowCallbackWrapper appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.view.WindowCallbackWrapper
--- appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.view.WindowCallbackWrapper  2016-03-09 19:28:22.000000000 -0500
+++ appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.view.WindowCallbackWrapper   2016-03-09 19:28:22.000000000 -0500
@@ -25,0 +26 @@
+  public void onProvideKeyboardShortcuts(java.util.List&lt;android.view.KeyboardShortcutGroup&gt;, android.view.Menu);
diff -U 0 -N appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.view.menu.ActionMenuItemView$PopupCallback appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.view.menu.ActionMenuItemView$PopupCallback
--- appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.view.menu.ActionMenuItemView$PopupCallback  2016-03-09 19:28:22.000000000 -0500
+++ appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.view.menu.ActionMenuItemView$PopupCallback   2016-03-09 19:28:22.000000000 -0500
@@ -3 +3 @@
-  public abstract android.support.v7.widget.ListPopupWindow getPopup();
+  public abstract android.support.v7.view.menu.ShowableListMenu getPopup();
diff -U 0 -N appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.view.menu.CascadingMenuPopup$HorizPosition appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.view.menu.CascadingMenuPopup$HorizPosition
--- appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.view.menu.CascadingMenuPopup$HorizPosition  1969-12-31 19:00:00.000000000 -0500
+++ appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.view.menu.CascadingMenuPopup$HorizPosition   2016-03-09 19:28:22.000000000 -0500
@@ -0,0 +1,2 @@
+public interface android.support.v7.view.menu.CascadingMenuPopup$HorizPosition extends java.lang.annotation.Annotation {
+}
diff -U 0 -N appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.view.menu.ListMenuItemView appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.view.menu.ListMenuItemView
--- appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.view.menu.ListMenuItemView  2016-03-09 19:28:22.000000000 -0500
+++ appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.view.menu.ListMenuItemView   2016-03-09 19:28:22.000000000 -0500
@@ -2 +1,0 @@
-  public android.support.v7.view.menu.ListMenuItemView(android.content.Context, android.util.AttributeSet, int);
@@ -3,0 +3 @@
+  public android.support.v7.view.menu.ListMenuItemView(android.content.Context, android.util.AttributeSet, int);
diff -U 0 -N appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.view.menu.MenuAdapter appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.view.menu.MenuAdapter
--- appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.view.menu.MenuAdapter   1969-12-31 19:00:00.000000000 -0500
+++ appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.view.menu.MenuAdapter    2016-03-09 19:28:22.000000000 -0500
@@ -0,0 +1,12 @@
+public class android.support.v7.view.menu.MenuAdapter extends android.widget.BaseAdapter {
+  public android.support.v7.view.menu.MenuAdapter(android.support.v7.view.menu.MenuBuilder, android.view.LayoutInflater, boolean);
+  public boolean getForceShowIcon();
+  public void setForceShowIcon(boolean);
+  public int getCount();
+  public android.support.v7.view.menu.MenuBuilder getAdapterMenu();
+  public android.support.v7.view.menu.MenuItemImpl getItem(int);
+  public long getItemId(int);
+  public android.view.View getView(int, android.view.View, android.view.ViewGroup);
+  public void notifyDataSetChanged();
+  public java.lang.Object getItem(int);
+}
diff -U 0 -N appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.view.menu.MenuBuilder appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.view.menu.MenuBuilder
--- appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.view.menu.MenuBuilder   2016-03-09 19:28:22.000000000 -0500
+++ appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.view.menu.MenuBuilder    2016-03-09 19:28:22.000000000 -0500
@@ -60,0 +61 @@
+  public void setOptionalIconsVisible(boolean);
diff -U 0 -N appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.view.menu.MenuPopupHelper appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.view.menu.MenuPopupHelper
--- appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.view.menu.MenuPopupHelper   2016-03-09 19:28:22.000000000 -0500
+++ appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.view.menu.MenuPopupHelper    2016-03-09 19:28:22.000000000 -0500
@@ -1 +1 @@
-public class android.support.v7.view.menu.MenuPopupHelper implements android.widget.AdapterView$OnItemClickListener,android.view.View$OnKeyListener,android.view.ViewTreeObserver$OnGlobalLayoutListener,android.widget.PopupWindow$OnDismissListener,android.support.v7.view.menu.MenuPresenter {
+public class android.support.v7.view.menu.MenuPopupHelper implements android.support.v7.view.menu.MenuHelper {
@@ -5,0 +6 @@
+  public void setOnDismissListener(android.widget.PopupWindow$OnDismissListener);
@@ -11 +12,2 @@
-  public android.support.v7.widget.ListPopupWindow getPopup();
+  public void show(int, int);
+  public android.support.v7.view.menu.MenuPopup getPopup();
@@ -12,0 +15 @@
+  public boolean tryShow(int, int);
@@ -14 +16,0 @@
-  public void onDismiss();
@@ -16,15 +18 @@
-  public void onItemClick(android.widget.AdapterView&lt;?&gt;, android.view.View, int, long);
-  public boolean onKey(android.view.View, int, android.view.KeyEvent);
-  public void onGlobalLayout();
-  public void initForMenu(android.content.Context, android.support.v7.view.menu.MenuBuilder);
-  public android.support.v7.view.menu.MenuView getMenuView(android.view.ViewGroup);
-  public void updateMenuView(boolean);
-  public void setCallback(android.support.v7.view.menu.MenuPresenter$Callback);
-  public boolean onSubMenuSelected(android.support.v7.view.menu.SubMenuBuilder);
-  public void onCloseMenu(android.support.v7.view.menu.MenuBuilder, boolean);
-  public boolean flagActionItems();
-  public boolean expandItemActionView(android.support.v7.view.menu.MenuBuilder, android.support.v7.view.menu.MenuItemImpl);
-  public boolean collapseItemActionView(android.support.v7.view.menu.MenuBuilder, android.support.v7.view.menu.MenuItemImpl);
-  public int getId();
-  public android.os.Parcelable onSaveInstanceState();
-  public void onRestoreInstanceState(android.os.Parcelable);
+  public void setPresenterCallback(android.support.v7.view.menu.MenuPresenter$Callback);
diff -U 0 -N appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.view.menu.ShowableListMenu appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.view.menu.ShowableListMenu
--- appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.view.menu.ShowableListMenu  1969-12-31 19:00:00.000000000 -0500
+++ appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.view.menu.ShowableListMenu   2016-03-09 19:28:22.000000000 -0500
@@ -0,0 +1,6 @@
+public interface android.support.v7.view.menu.ShowableListMenu {
+  public abstract void show();
+  public abstract void dismiss();
+  public abstract boolean isShowing();
+  public abstract android.widget.ListView getListView();
+}
diff -U 0 -N appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.widget.AppCompatSeekBar appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.widget.AppCompatSeekBar
--- appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.widget.AppCompatSeekBar 2016-03-09 19:28:22.000000000 -0500
+++ appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.widget.AppCompatSeekBar  2016-03-09 19:28:22.000000000 -0500
@@ -4,0 +5 @@
+  public void jumpDrawablesToCurrentState();
diff -U 0 -N appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.widget.ForwardingListener appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.widget.ForwardingListener
--- appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.widget.ForwardingListener   1969-12-31 19:00:00.000000000 -0500
+++ appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.widget.ForwardingListener    2016-03-09 19:28:22.000000000 -0500
@@ -0,0 +1,5 @@
+public abstract class android.support.v7.widget.ForwardingListener implements android.view.View$OnTouchListener {
+  public android.support.v7.widget.ForwardingListener(android.view.View);
+  public abstract android.support.v7.view.menu.ShowableListMenu getPopup();
+  public boolean onTouch(android.view.View, android.view.MotionEvent);
+}
diff -U 0 -N appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.widget.ListPopupWindow appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.widget.ListPopupWindow
--- appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.widget.ListPopupWindow  2016-03-09 19:28:22.000000000 -0500
+++ appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.widget.ListPopupWindow   2016-03-09 19:28:22.000000000 -0500
@@ -1 +1 @@
-public class android.support.v7.widget.ListPopupWindow {
+public class android.support.v7.widget.ListPopupWindow implements android.support.v7.view.menu.ShowableListMenu {
@@ -33,0 +34 @@
+  public void setEpicenterBounds(android.graphics.Rect);
diff -U 0 -N appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.widget.ListPopupWindow$ForwardingListener appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.widget.ListPopupWindow$ForwardingListener
--- appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.widget.ListPopupWindow$ForwardingListener   2016-03-09 19:28:22.000000000 -0500
+++ appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.widget.ListPopupWindow$ForwardingListener    1969-12-31 19:00:00.000000000 -0500
@@ -1,5 +0,0 @@
-public abstract class android.support.v7.widget.ListPopupWindow$ForwardingListener implements android.view.View$OnTouchListener {
-  public android.support.v7.widget.ListPopupWindow$ForwardingListener(android.view.View);
-  public abstract android.support.v7.widget.ListPopupWindow getPopup();
-  public boolean onTouch(android.view.View, android.view.MotionEvent);
-}
diff -U 0 -N appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.widget.MenuItemHoverListener appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.widget.MenuItemHoverListener
--- appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.widget.MenuItemHoverListener    1969-12-31 19:00:00.000000000 -0500
+++ appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.widget.MenuItemHoverListener 2016-03-09 19:28:22.000000000 -0500
@@ -0,0 +1,4 @@
+public interface android.support.v7.widget.MenuItemHoverListener {
+  public abstract void onItemHoverExit(android.support.v7.view.menu.MenuBuilder, android.view.MenuItem);
+  public abstract void onItemHoverEnter(android.support.v7.view.menu.MenuBuilder, android.view.MenuItem);
+}
diff -U 0 -N appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.widget.MenuPopupWindow appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.widget.MenuPopupWindow
--- appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.widget.MenuPopupWindow  1969-12-31 19:00:00.000000000 -0500
+++ appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.widget.MenuPopupWindow   2016-03-09 19:28:22.000000000 -0500
@@ -0,0 +1,9 @@
+public class android.support.v7.widget.MenuPopupWindow extends android.support.v7.widget.ListPopupWindow implements android.support.v7.widget.MenuItemHoverListener {
+  public android.support.v7.widget.MenuPopupWindow(android.content.Context, android.util.AttributeSet, int, int);
+  public void setEnterTransition(java.lang.Object);
+  public void setExitTransition(java.lang.Object);
+  public void setHoverListener(android.support.v7.widget.MenuItemHoverListener);
+  public void setTouchModal(boolean);
+  public void onItemHoverEnter(android.support.v7.view.menu.MenuBuilder, android.view.MenuItem);
+  public void onItemHoverExit(android.support.v7.view.menu.MenuBuilder, android.view.MenuItem);
+}
diff -U 0 -N appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.widget.MenuPopupWindow$MenuDropDownListView appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.widget.MenuPopupWindow$MenuDropDownListView
--- appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.widget.MenuPopupWindow$MenuDropDownListView 1969-12-31 19:00:00.000000000 -0500
+++ appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.widget.MenuPopupWindow$MenuDropDownListView  2016-03-09 19:28:22.000000000 -0500
@@ -0,0 +1,12 @@
+public class android.support.v7.widget.MenuPopupWindow$MenuDropDownListView extends android.support.v7.widget.DropDownListView {
+  public android.support.v7.widget.MenuPopupWindow$MenuDropDownListView(android.content.Context, boolean);
+  public void setHoverListener(android.support.v7.widget.MenuItemHoverListener);
+  public void clearSelection();
+  public boolean onKeyDown(int, android.view.KeyEvent);
+  public boolean onHoverEvent(android.view.MotionEvent);
+  public boolean hasFocus();
+  public boolean isFocused();
+  public boolean hasWindowFocus();
+  public boolean isInTouchMode();
+  public boolean onForwardedEvent(android.view.MotionEvent, int);
+}
diff -U 0 -N appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.widget.PopupMenu appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.widget.PopupMenu
--- appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.widget.PopupMenu    2016-03-09 19:28:22.000000000 -0500
+++ appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.widget.PopupMenu 2016-03-09 19:28:22.000000000 -0500
@@ -1 +1 @@
-public class android.support.v7.widget.PopupMenu implements android.support.v7.view.menu.MenuBuilder$Callback,android.support.v7.view.menu.MenuPresenter$Callback {
+public class android.support.v7.widget.PopupMenu {
@@ -15,5 +14,0 @@
-  public boolean onMenuItemSelected(android.support.v7.view.menu.MenuBuilder, android.view.MenuItem);
-  public void onCloseMenu(android.support.v7.view.menu.MenuBuilder, boolean);
-  public boolean onOpenSubMenu(android.support.v7.view.menu.MenuBuilder);
-  public void onCloseSubMenu(android.support.v7.view.menu.SubMenuBuilder);
-  public void onMenuModeChange(android.support.v7.view.menu.MenuBuilder);
diff -U 0 -N appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.widget.TintTypedArray appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.widget.TintTypedArray
--- appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.widget.TintTypedArray   2016-03-09 19:28:22.000000000 -0500
+++ appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.widget.TintTypedArray    2016-03-09 19:28:22.000000000 -0500
@@ -3,0 +4 @@
+  public static android.support.v7.widget.TintTypedArray obtainStyledAttributes(android.content.Context, int, int[]);
diff -U 0 -N appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.widget.Toolbar appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.widget.Toolbar
--- appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.widget.Toolbar  2016-03-09 19:28:22.000000000 -0500
+++ appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.widget.Toolbar   2016-03-09 19:28:22.000000000 -0500
@@ -6,0 +7,9 @@
+  public void setTitleMargin(int, int, int, int);
+  public int getTitleMarginStart();
+  public void setTitleMarginStart(int);
+  public int getTitleMarginTop();
+  public void setTitleMarginTop(int);
+  public int getTitleMarginEnd();
+  public void setTitleMarginEnd(int);
+  public int getTitleMarginBottom();
+  public void setTitleMarginBottom(int);</code></pre></noscript></div>


<h2>Design:</h2>

<div><script src='https://gist.github.com/5d7c55382198640345dc.js?file=design.diff'></script>
<noscript><pre><code>diff -U 0 -N design-23.2.0_c138856a/android.support.design.widget.FloatingActionButton design-24.0.0-alpha1_c951a944/android.support.design.widget.FloatingActionButton
--- design-23.2.0_c138856a/android.support.design.widget.FloatingActionButton   2016-03-09 19:28:22.000000000 -0500
+++ design-24.0.0-alpha1_c951a944/android.support.design.widget.FloatingActionButton    2016-03-09 19:28:22.000000000 -0500
@@ -21,0 +22 @@
+  public boolean onTouchEvent(android.view.MotionEvent);</code></pre></noscript></div>


<p>There are no API changes in RecyclerView nor my personal <a href="http://michaelevans.org/blog/2015/07/14/improving-your-code-with-android-support-annotations/">favorite support library</a> &ndash; Support Annotations.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Dagger 1 and Kotlin]]></title>
    <link href="http://michaelevans.org/blog/2016/02/17/using-dagger-1-and-kotlin/"/>
    <updated>2016-02-17T13:43:25-05:00</updated>
    <id>http://michaelevans.org/blog/2016/02/17/using-dagger-1-and-kotlin</id>
    <content type="html"><![CDATA[<p>Unless you&rsquo;ve been hiding from all the news about Android development, you&rsquo;ve <a href="https://medium.com/@CodingDoug/kotlin-android-a-brass-tacks-experiment-part-1-3e5028491bcc#.15w4ypfer">likely</a> <a href="http://antonioleiva.com/kotlin-awesome-tricks-for-android/">heard</a> <a href="http://vishnurajeevan.com/2016/02/13/Using-Kotlin-Extensions-for-Rx-ifying/">about</a> <a href="https://realm.io/news/oredev-jake-wharton-kotlin-advancing-android-dev/">Kotlin</a> (<a href="https://blog.jetbrains.com/kotlin/2016/02/kotlin-1-0-released-pragmatic-language-for-jvm-and-android/">which hit version 1.0 on Monday</a>!). I&rsquo;ve been toying around with it lately (the <a href="https://kotlinlang.org/docs/tutorials/koans.html">Kotlin Koans</a> are a great place to start for a beginner) and wanted to try building an app with it &ndash; that is, until I hit a few road blocks.</p>

<!-- more -->


<p>Personally, I&rsquo;m still a fan of Dagger 1 (or as I refer to it, <a href="https://en.wikipedia.org/wiki/New_Coke#New_Coke_after_Coke_Classic">Dagger Classic</a>), and when I started working on my Kotlin app, that&rsquo;s what I was planning to use. I knew Annotation Processing support was a relatively new addition to Kotlin, so I began to search for some information about how to get Dagger to play nicely with the Kotlin compiler. There&rsquo;s a lot of information about using Dagger 2 with Kotlin but not so much about Dagger Classic. Finally, I stumbled upon <a href="http://www.beyondtechnicallycorrect.com/2015/12/30/android-kotlin-dagger/">this article</a>, which said, &ldquo;Unfortunately, Square’s Dagger 1 does not appear to work with Kotlin while Google’s Dagger 2 does&rdquo;.</p>

<p><em>Bummer.</em></p>

<p>This didn&rsquo;t really deter me, however, because I&rsquo;m stubborn like that. So I proceeded to give it a try with <code>kapt</code><sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> anyway (which seemed like it <em>might</em> do what I want).</p>

<h2>Modules</h2>

<p>The first thing I did was try to create the various Dagger Modules that I&rsquo;d need, which is where I hit my first roadblock. Attempting to compile my module gave the following error:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Error:Modules must not extend from other classes: org.michaelevans.example.AppModule</span></code></pre></td></tr></table></div></figure>


<p>My intial thought was that Kotlin was causing my Module to extend <code>Any</code>, rather than <code>Object</code>. (<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/">Any</a> is the root of the class hierarchy in Kotlin, similar to the way that Object is the root of the Java class hierarchy.) Upon closer inspection, that didn&rsquo;t seem to be the issue, but rather than get hung up on this &ndash; I just converted my modules to Java classes and decided to come back to this issue later.</p>

<h2>@Inject</h2>

<p>So now I had my modules set up, and I went about trying to <code>@Inject</code> some fields on an Activity or two. This yielded another problem: Kotlin doesn&rsquo;t have fields, and we obviously can&rsquo;t do constructor injection on something for which we don&rsquo;t control the constructor &ndash; like <code>Activity</code>.</p>

<p>I thought I&rsquo;d use Dagger to inject a property with &ldquo;method&rdquo; injection like so:</p>

<p><code>lateinit var service : MyService @Inject set</code></p>

<p>But when you try this &ndash; you&rsquo;ll find out that Dagger doesn&rsquo;t support Method injection!</p>

<p>So what can we do? We can target the <a href="https://kotlinlang.org/docs/reference/annotations.html#annotation-use-site-targets">annotation on the backing field</a> like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@field:Inject
</span><span class='line'>lateinit var app : Application</span></code></pre></td></tr></table></div></figure>


<p>And now when we compile, our dependencies are injected! Woo, progress.</p>

<h2>Modules (part 2)</h2>

<p>I was pretty pleased that I had Dagger and Kotlin playing nicely enough that I could write things (other than my modules) in Kotlin, and that DI was working. But it did bother me that I was so close to having the ability to use Kotlin for everything with one exception &ndash; why wouldn&rsquo;t these Modules play nicely?</p>

<p>I dug into the Dagger source to find out where this error was coming from and found <a href="https://github.com/square/dagger/blob/2f9579c48e887ffa316f329c12c2fa2abbec27b1/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java#L217">this</a>. The JavaDoc for <a href="https://docs.oracle.com/javase/8/docs/api/javax/lang/model/type/TypeMirror.html#equals-java.lang.Object-">TypeMirror&rsquo;s equals method</a> says, <code>Semantic comparisons of type equality should instead use Types.isSameType(TypeMirror, TypeMirror). The results of t1.equals(t2) and Types.isSameType(t1, t2) may differ.</code></p>

<p>I was pretty proud of myself for finding this potential issue in Dagger, and was about to submit a Pull Request until I noticed&hellip;<a href="https://github.com/square/dagger/commit/61e471df3891cf017755998b83839042f8455c29">that Jake had solved this issue about 18 months ago</a>.</p>

<p>Running the <code>1.3-SNAPSHOT</code> builds of Dagger that include this change allow my Modules to be compiled properly from Kotlin. <em>Success!</em></p>

<h2>In Summary (aka TL;DR)</h2>

<ul>
<li>Dagger works just fine with Kotlin (as long as you&rsquo;re on 1.3)</li>
<li>Use annotations on the backing fields to perform injection</li>
<li>Use <code>kapt</code> instead of <code>apt</code> for the scope of your <code>dagger-compiler</code> dependency</li>
<li>Make sure to have the following lines in your <code>build.gradle</code></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>kapt {
</span><span class='line'>    generateStubs = true
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Hopefully this helps others who are still using Dagger Classic and want to try out Kotlin!</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p><code>kapt</code> is <a href="http://blog.jetbrains.com/kotlin/2015/06/better-annotation-processing-supporting-stubs-in-kapt/">the annotation processing tool for Kotlin</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Studio Tips and Tricks]]></title>
    <link href="http://michaelevans.org/blog/2016/01/06/android-studio-tips-and-tricks/"/>
    <updated>2016-01-06T20:25:53-05:00</updated>
    <id>http://michaelevans.org/blog/2016/01/06/android-studio-tips-and-tricks</id>
    <content type="html"><![CDATA[<p>I recently attended Google&rsquo;s <a href="https://androiddevsummit.withgoogle.com/">Android Dev Summit</a> where the Tools team presented a talk entitled <a href="https://www.youtube.com/watch?v=Y2GC6P5hPeA">Android Studio For Experts</a>. The room was packed for the 90 minute session, where a lot of great Android Studio tips were shared. This gave me the idea of showing off some of my favorite Android Studio tips!</p>

<!-- more -->


<h2>Language Injection</h2>

<p>Ever needed to type a JSON String? Perhaps you&rsquo;ve used one as a text fixture for one of your GSON deserializers and know that it&rsquo;s a huge pain to manage all those backslashes. Fortunately, IntelliJ has a feature called <em>Language Injection</em>, which allows you to edit the JSON fragment in its own editor, and then IntelliJ will properly inject that fragment into your code as an escaped String.</p>

<p><img class="center" src="http://michaelevans.org/images/2016/01/06/fragment_intention.png" width="300" height="100" title="Intention Action" ></p>

<p>Inject Language/Reference is an intention action<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>, so you can start it by using <kbd>⌥</kbd>+<kbd>Return</kbd>, or <kbd>⌘</kbd>+<kbd>⇧</kbd>+<kbd>A</kbd> and searching for it.</p>

<p><img class="center" src="http://michaelevans.org/images/2016/01/06/fragment_editor.png" width="300" height="300" title="Editing JSON" ></p>

<h2><a href="https://xkcd.com/1171/">Check RegExp</a></h2>

<p>This is pretty similar to the last tip, but if you select the language of the fragment as &ldquo;RegExp&rdquo;, you&rsquo;ll get a handy regular expression tester!</p>

<p><img class="center" src="http://michaelevans.org/images/2016/01/06/reg_exp_1.png" width="300" height="150" title="Editing Regex" ></p>

<p><img class="center" src="http://michaelevans.org/images/2016/01/06/reg_exp_2.png" width="300" height="200" title="Valid Regex" ></p>

<p><img class="center" src="http://michaelevans.org/images/2016/01/06/reg_exp_3.png" width="300" height="200" title="Invalid Regex" ></p>

<h2>Smart(er) Completion</h2>

<p>Now I’m pretty sure most of you have used IntelliJ’s code completion features. Press <kbd>⌥</kbd>+<kbd>Space</kbd>, and IntelliJ/Android Studio lists options to complete the names of classes, methods, fields, and keywords within the visibility scope. But have you ever noticed that the suggestions seem to be based off the characters you&rsquo;ve typed, rather than the actual <em>types</em> that are expected in the scope of the caret? Something like this:</p>

<p><img class="center" src="http://michaelevans.org/images/2016/01/06/basic_autocomplete.png" width="300" height="200" title="Autocomplete" ></p>

<p>Well if you use <em>Type Completion</em> (by pressing <kbd>⌥</kbd>+<kbd>⇧</kbd>+<kbd>Space</kbd>), you will see a list of suggestions containing only those types that are applicable to the current context. In the example below, you&rsquo;ll only get types that return a <code>Reader</code>, which is the type that the <code>BufferedReader</code>&rsquo;s constructor expects:</p>

<p><img class="center" src="http://michaelevans.org/images/2016/01/06/smart_autocomplete.png" width="300" height="200" title="Better Autocomplete" ></p>

<p>What&rsquo;s even cooler is that you can press it an additional time, and IntelliJ will do a deeper scan (looking at static method calls, chained expressions, etc.) to find more options for you:</p>

<p><img class="center" src="http://michaelevans.org/images/2016/01/06/chained_autocomplete.png" width="300" height="200" title="Chained Autocomplete" ></p>

<h2>Discovering Your Own Tips and Tricks</h2>

<p>Another really cool feature is the <em>Productivity Guide</em>. It shows you usage statistics for a lot of IntelliJ&rsquo;s features, such as how many keystokes you have saved or possible bugs you&rsquo;ve avoided by using the various shortcuts. It&rsquo;s also very helpful for discovering features you might not have known about; you can scroll through the list of unused features to see what you&rsquo;re missing out on! To find the productivity guide, go to <code>Help -&gt; Productivity Guide</code>.</p>

<p><img class="center" src="http://michaelevans.org/images/2016/01/06/productivity_guide.png" width="700" height="500" title="Invalid Regex" ></p>

<h2>Bonus Round &ndash; IntelliJ 15 Only</h2>

<p>Did you know IntelliJ has <a href="https://www.jetbrains.com/idea/help/testing-restful-web-services.html">its own REST client</a>? Super handy for testing out API calls without something like <a href="https://luckymarmot.com/paw">Paw</a> or <a href="https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop?hl=en">Postman</a>.</p>

<p>Have any other favorite tips or tricks? Let me know!</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p><a href="https://www.jetbrains.com/idea/help/intention-actions.html">Intention Actions</a> are those suggestions in the little popup menus that allow you to quick-fix things like classes that haven&rsquo;t been imported, etc.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing Intents with Espresso Intents]]></title>
    <link href="http://michaelevans.org/blog/2015/09/15/testing-intents-with-espresso-intents/"/>
    <updated>2015-09-15T22:03:57-04:00</updated>
    <id>http://michaelevans.org/blog/2015/09/15/testing-intents-with-espresso-intents</id>
    <content type="html"><![CDATA[<p>A few weeks ago, I wrote <a href="http://michaelevans.org/blog/2015/08/03/using-espresso-for-easy-ui-testing/">a basic introduction</a> on how to use Espresso to test the UI of an Android application. However, when I went to write instrumentation tests for <a href="https://github.com/MichaelEvans/Aftermath">Aftermath</a>, I ran into trouble testing things that exist outside my application&rsquo;s process. For example, what do you do when your app needs to use the Android Intent system to call upon the dialer or the browser, or pick a contact with the contact picker? What about testing a share action? Because these apps run outside your application itself, you can&rsquo;t use Espresso to interact with them. So how can you test your app&rsquo;s behavior? You can either use Espresso-Intents or UI Automator (but that&rsquo;s another show).</p>

<!-- more -->


<h2>The Setup</h2>

<p>Setting up Espresso-Intents is dead simple if you&rsquo;re already using Espresso. Make sure you&rsquo;re already depending on Espresso, the rules, and the runner and then add the dependency:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>androidTestCompile 'com.android.support.test.espresso:espresso-intents:2.2.1'</span></code></pre></td></tr></table></div></figure>


<h2>The Tests</h2>

<p>Let&rsquo;s imagine that you had an application with a button to launch the contact picker, which would then show the contact <code>Uri</code> of the selected contact in a text view. Not only would this be hard to test because you are leaving your own application&rsquo;s process, but you don&rsquo;t even know if your test can rely on any contacts even existing on the test device (not to mention not knowing which app is registered to handle the contact-picking Intent itself). Fortunately we can use Espresso-Intents to stub out the response for activities that are launched with <code>startActivityForResult</code>.</p>

<p>Here&rsquo;s what that might look like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Before</span> <span class="kd">public</span> <span class="kt">void</span> <span class="n">stubContactIntent</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Intent</span> <span class="n">intent</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Intent</span><span class="o">();</span>
</span><span class='line'>    <span class="n">intent</span><span class="o">.</span><span class="na">setData</span><span class="o">(</span><span class="n">Uri</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="n">TEST_URI</span><span class="o">));</span>
</span><span class='line'>    <span class="n">ActivityResult</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ActivityResult</span><span class="o">(</span><span class="n">Activity</span><span class="o">.</span><span class="na">RESULT_OK</span><span class="o">,</span> <span class="n">intent</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">intending</span><span class="o">(</span><span class="n">allOf</span><span class="o">(</span>
</span><span class='line'>        <span class="n">hasData</span><span class="o">(</span><span class="n">ContactsContract</span><span class="o">.</span><span class="na">CommonDataKinds</span><span class="o">.</span><span class="na">Phone</span><span class="o">.</span><span class="na">CONTENT_URI</span><span class="o">),</span>
</span><span class='line'>        <span class="n">hasAction</span><span class="o">(</span><span class="n">Intent</span><span class="o">.</span><span class="na">ACTION_PICK</span><span class="o">))</span>
</span><span class='line'>    <span class="o">).</span><span class="na">respondWith</span><span class="o">(</span><span class="n">result</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Test</span> <span class="kd">public</span> <span class="kt">void</span> <span class="n">pickContact_viewIsSet</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">//Check to make sure the Uri field is empty</span>
</span><span class='line'>  <span class="n">onView</span><span class="o">(</span><span class="n">withId</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">phone_number</span><span class="o">)).</span><span class="na">check</span><span class="o">(</span><span class="n">matches</span><span class="o">(</span><span class="n">withText</span><span class="o">(</span><span class="s">&quot;&quot;</span><span class="o">)));</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//Start contact picker</span>
</span><span class='line'>  <span class="n">onView</span><span class="o">(</span><span class="n">withId</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">pick_contact</span><span class="o">)).</span><span class="na">perform</span><span class="o">(</span><span class="n">click</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//Verify that Uri was set properly.</span>
</span><span class='line'>  <span class="n">onView</span><span class="o">(</span><span class="n">withId</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">phone_number</span><span class="o">)).</span><span class="na">check</span><span class="o">(</span><span class="n">matches</span><span class="o">(</span><span class="n">withText</span><span class="o">(</span><span class="n">TEST_URI</span><span class="o">)));</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using the <code>intending</code> API, we can respond with our mock <code>ActivityResult</code> data. If you&rsquo;ve used <a href="http://mockito.org/">Mockito</a> before, this stubbing will look very familiar to the <code>when</code>/<code>respondWith</code> methods. In this example, we&rsquo;re going to stub any Intents for the <code>ACTION_PICK</code> Intent with the <code>CONTENT_URI</code> data set to return a particular hard-coded Uri.</p>

<p>So this is great &mdash; our test no longer depends on any particular contact picker app, or any contacts even being present on the test device. But what do we do if we want to verify that a particular outgoing intent is launched with some given extras or data?</p>

<p>Let&rsquo;s say our sample app had an input field that would take a phone number, with a button to start the dialer to call that number. (Yes, I do realize that this application would likely not receive any venture capital funding).</p>

<p>All we have to do is use the <code>intended</code> API, which is most similar to Mockito&rsquo;s <code>verify</code> method. A sample of this might look like the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span> <span class="kd">public</span> <span class="kt">void</span> <span class="n">typeNumber_ValidInput_InitiatesCall</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">onView</span><span class="o">(</span><span class="n">withId</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">number_input</span><span class="o">)).</span><span class="na">perform</span><span class="o">(</span><span class="n">typeText</span><span class="o">(</span><span class="n">VALID_PHONE_NUMBER</span><span class="o">),</span> <span class="n">closeSoftKeyboard</span><span class="o">());</span>
</span><span class='line'>    <span class="n">onView</span><span class="o">(</span><span class="n">withId</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">dial_button</span><span class="o">)).</span><span class="na">perform</span><span class="o">(</span><span class="n">click</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">intended</span><span class="o">(</span><span class="n">allOf</span><span class="o">(</span><span class="n">hasAction</span><span class="o">(</span><span class="n">Intent</span><span class="o">.</span><span class="na">ACTION_DIAL</span><span class="o">),</span> <span class="n">hasData</span><span class="o">(</span><span class="n">INTENT_DATA_PHONE_NUMBER</span><span class="o">)));</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this case, we&rsquo;re just going to verify that the intended Intent had the right action and the right data that we&rsquo;d expect to hand off to the dialer.</p>

<p>And you&rsquo;ll notice that the Espresso-Intents package includes handy Hamcrest matchers that you can use for things like Strings on the different parts of the Intent.</p>

<p>Now go forth and test those inter-app component interactions!</p>

<p>The sample code for this blog post can be found <a href="https://github.com/MichaelEvans/Espresso-Samples/tree/master/espresso-intents-sample">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Droidcon NYC 2015: @AnnotationProcessors("ByExample")]]></title>
    <link href="http://michaelevans.org/blog/2015/09/09/droidcon-nyc-2015-at-annotationprocessors-byexample/"/>
    <updated>2015-09-09T16:30:48-04:00</updated>
    <id>http://michaelevans.org/blog/2015/09/09/droidcon-nyc-2015-at-annotationprocessors-byexample</id>
    <content type="html"><![CDATA[<p>Here are slides and the video for my talk from Droidcon NYC 2015 on writing your own Annotation Processor:</p>

<iframe width="640" height="510" src="http://www.youtube.com/embed/dBUAqPs0TB0 " frameborder="0" webkitAllowFullScreen mozallowfullscreen allowfullscreen></iframe>


<p></p>

<script async="true" class="speakerdeck-embed" data-id="95e696d902d845dcb5079e0691eb5f3f" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"> </script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Espresso for Easy UI Testing]]></title>
    <link href="http://michaelevans.org/blog/2015/08/03/using-espresso-for-easy-ui-testing/"/>
    <updated>2015-08-03T22:16:49-04:00</updated>
    <id>http://michaelevans.org/blog/2015/08/03/using-espresso-for-easy-ui-testing</id>
    <content type="html"><![CDATA[<p>One thing that I notice when I talk to Android developers is that a lot of them don&rsquo;t put an emphasis on testing. They say that it&rsquo;s too hard to write them or that they are too hard to integrate and set up, or give a bunch of other reasons why they don&rsquo;t. But it&rsquo;s actually pretty simple to write <a href="https://code.google.com/p/android-test-kit/wiki/Espresso">Espresso</a> tests, and they really aren&rsquo;t that hard to integrate with your code base.</p>

<!-- more -->


<h2>Easy to write</h2>

<p>Espresso tests are dead simple to write. They come in three parts.</p>

<ol>
<li>ViewMatchers &ndash; something to find the view to act upon/assert something about</li>
<li>ViewActions &ndash; something to perform an action (type text, click a button)</li>
<li>ViewAssertions &ndash; something to verify what you expect</li>
</ol>


<p>For example, the following test would type the name &ldquo;Steve&rdquo; into an EditText with the id <code>name_field</code>, click a Button with the id <code>greet_button</code> and then verify that the text &ldquo;Hello Steve!&rdquo; appears on the screen:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testSayHello</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">onView</span><span class="o">(</span><span class="n">withId</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">name_field</span><span class="o">)).</span><span class="na">perform</span><span class="o">(</span><span class="n">typeText</span><span class="o">(</span><span class="s">&quot;Steve&quot;</span><span class="o">));</span>
</span><span class='line'>  <span class="n">onView</span><span class="o">(</span><span class="n">withId</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">greet_button</span><span class="o">)).</span><span class="na">perform</span><span class="o">(</span><span class="n">click</span><span class="o">());</span>
</span><span class='line'>  <span class="n">onView</span><span class="o">(</span><span class="n">withText</span><span class="o">(</span><span class="s">&quot;Hello Steve!&quot;</span><span class="o">)).</span><span class="na">check</span><span class="o">(</span><span class="n">matches</span><span class="o">(</span><span class="n">isDisplayed</span><span class="o">()));</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Seems simple enough right? But what about when other threads are involved?</p>

<h2>Integration</h2>

<p>From the Espresso documentation:</p>

<blockquote><p>The centerpiece of Espresso is its ability to seamlessly synchronize all test operations with the application under test. By default, Espresso waits for UI events in the current message queue to process and default AsyncTasks* to complete before it moves on to the next test operation. This should address the majority of application/test synchronization in your application.&#8221;</p></blockquote>


<p>But if you&rsquo;re like me, you&rsquo;re not writing AsyncTasks to handle your background operations. My go-to tool for making HTTP requests (probably one of the most common uses of AsyncTask) is <a href="http://square.github.io/retrofit/">Retrofit</a>. So what can we do? Espresso has an API called <code>registerIdlingResource</code>, which allows you to synchronize your custom logic with Espresso.</p>

<p>With this knowledge, one way you might approach this is to implement a mock version of your Retrofit interface, and then use something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MockApiService</span> <span class="kd">implements</span> <span class="n">ApiService</span><span class="o">,</span> <span class="n">IdlingResource</span> <span class="o">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">ApiService</span> <span class="n">api</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">AtomicInteger</span> <span class="n">counter</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">ResourceCallback</span><span class="o">&gt;</span> <span class="n">callbacks</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">MockApiService</span><span class="o">(</span><span class="n">ApiService</span> <span class="n">api</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">api</span> <span class="o">=</span> <span class="n">api</span><span class="o">;</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">callbacks</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span> 
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">counter</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AtomicInteger</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">Response</span> <span class="nf">doWork</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">counter</span><span class="o">.</span><span class="na">incrementAndGet</span><span class="o">();</span>
</span><span class='line'>      <span class="k">return</span> <span class="nf">decrementAndNotify</span><span class="o">(</span><span class="n">api</span><span class="o">.</span><span class="na">doWork</span><span class="o">());</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getName</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isIdleNow</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">counter</span><span class="o">.</span><span class="na">get</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">registerIdleTransitionCallback</span><span class="o">(</span><span class="n">ResourceCallback</span> <span class="n">resourceCallback</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">callbacks</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">resourceCallback</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">T</span> <span class="n">decrementAndNotify</span><span class="o">(</span><span class="n">T</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">counter</span><span class="o">.</span><span class="na">decrementAndGet</span><span class="o">();</span>
</span><span class='line'>      <span class="n">notifyIdle</span><span class="o">();</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">data</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">void</span> <span class="nf">notifyIdle</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">counter</span><span class="o">.</span><span class="na">get</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">for</span> <span class="o">(</span><span class="n">ResourceCallback</span> <span class="n">cb</span> <span class="o">:</span> <span class="n">callbacks</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="n">cb</span><span class="o">.</span><span class="na">onTransitionToIdle</span><span class="o">();</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This tells Espresso that your app is idle after the methods are called. But you should immediately see the problem here &ndash; you&rsquo;ll end up writing a TON of boilerplate. As you have more methods in your interface, and lot of repeated increment and decrement code&hellip;there must be a better way. (There is!)</p>

<p>The &ldquo;trick&rdquo; lies right in the selling point in the Espresso documentation, &ldquo;Espresso waits for UI events&hellip; and default <em><strong>AsyncTasks</strong></em> to complete&rdquo;. If we could somehow execute our Retrofit requests on the AsyncTasks&#8217; ThreadPoolExecutor, we&rsquo;d get sychronization for free!</p>

<p>Fortunately, Retrofit&rsquo;s <code>RestAdapter.Builder</code> class has just such a method!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">new</span> <span class="n">RestAdapter</span><span class="o">.</span><span class="na">Builder</span><span class="o">()</span>
</span><span class='line'>   <span class="o">.</span><span class="na">setExecutors</span><span class="o">(</span><span class="n">AsyncTask</span><span class="o">.</span><span class="na">THREAD_POOL_EXECUTOR</span><span class="o">,</span> <span class="k">new</span> <span class="n">MainThreadExecutor</span><span class="o">())</span>
</span><span class='line'>   <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>And it&rsquo;s that simple &ndash; Now you have no excuse not to write some Espresso tests!</p>

<h4>More Resources</h4>

<ul>
<li><a href="https://code.google.com/p/android-test-kit/wiki/EspressoV2CheatSheet">The Espresso V2 Cheatsheet</a></li>
<li><a href="http://blog.sqisland.com/2015/04/espresso-custom-idling-resource.html">Read more about writing custom idling resources</a></li>
</ul>


<p>Thanks to <a href="https://twitter.com/queencodemonkey">Huyen Tue Dao</a> for editing this post!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Improving your code with Android Support Annotations]]></title>
    <link href="http://michaelevans.org/blog/2015/07/14/improving-your-code-with-android-support-annotations/"/>
    <updated>2015-07-14T22:46:56-04:00</updated>
    <id>http://michaelevans.org/blog/2015/07/14/improving-your-code-with-android-support-annotations</id>
    <content type="html"><![CDATA[<p>If you haven&rsquo;t heard of the Android Support Annotations library yet, you&rsquo;re missing out on a neat new package that will help you catch bugs in your apps. Included in the library is a number of Java annotations, that will help Android Studio check your code for possible errors and report them to you. There are quite a few of them, so I only plan to go over a few of them here, but you should definitely <a href="http://tools.android.com/tech-docs/support-annotations">check out the docs</a> for more info about the rest.</p>

<h2>@NonNull / @Nullable</h2>

<p><code>@NonNull</code> and <code>@Nullable</code> are probably the most basic of the support annotations, but also some of the most helpful! Annotate a parameter or method with either of these to denote if the parameter or method&rsquo;s return value can be null or not, and voila, now Android Studio can give us a nice warning that we&rsquo;re doing something unsafe.</p>

<!-- more -->


<p>Turn this:</p>

<p><img class="center" src="http://michaelevans.org/images/2015/07/14/no-annotations.png" width="600" height="300" title="Method with no annotations" ></p>

<p>into this:</p>

<p><img class="center" src="http://michaelevans.org/images/2015/07/14/nonnull.png" width="600" height="250" title="with @NonNull" ></p>

<p>Bonus points: We can even take this example one step further with the <code>@CheckResult</code> annotation, to tell us know that the return type of this method is something that we are expected to use, rather than the method having a side effect.</p>

<p><img class="center" src="http://michaelevans.org/images/2015/07/14/checkreturn.png" width="600" height="300" title="Check that return type!" ></p>

<h2>@StringRes / @DrawableRes / etc.</h2>

<p>Have you ever attempted to call <code>setText</code> on a TextView, and gotten a somewhat mysterious <code>android.content.res.Resources$NotFoundException: String resource ID #0x3039</code> exception? If you pass an integer to setText, TextView assumes it&rsquo;s a String resource id, and will look it up in order to set the text. If only there were a way to denote that integers are not valid ids for this method&hellip;<code>@StringRes</code> to the rescue!</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public void setText(@StringRes int id) {
</span><span class='line'>  // Do something like getString(id), etc.
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Now if you try to pass a non-String resource id to this method, you get something like this:</p>

<p><img class="center" src="http://michaelevans.org/images/2015/07/14/stringres.png" width="500" height="200" title="Method takes a @StringRes id, not an int" ></p>

<p>(There are resouce annotations for all resoruce types, <code>@DrawableRes</code>, <code>@ColorRes</code>, <code>@InterpolatorRes</code>, etc.)</p>

<h2>@Keep</h2>

<p>Today I discovered a new support annotation <code>@Keep</code>. According to the support annotation docs, this annotation hasn&rsquo;t been hooked up to the Gradle plugin yet<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>, but it will let you annotate methods and classes that should be retained when minimizing the app.</p>

<p>If you&rsquo;ve ever messed around with the cryptic <code>-keep class com.foo.bar { public static &lt;methods&gt; }</code> incantations that you need to use to summon the Proguard Gods, you&rsquo;ll know how painful it is to rip your hair out, while trying to exclude a particular method or class from being optimized away. This handy annotation will tell Proguard to leave the method or class alone &ndash; like so:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public class Example {
</span><span class='line'>  @Keep
</span><span class='line'>  public void doSomething() {
</span><span class='line'>      // hopefully this method does something
</span><span class='line'>  }
</span><span class='line'>  ...
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>The best part is &ndash; if you&rsquo;re using <code>appcompat-v7</code>, you&rsquo;re already including <code>support-annotations</code>, so just start using them already!</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p><a href="https://android-review.googlesource.com/#/c/152983/">Looks like this is merged</a> into the 1.3 version of the plugin<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Ripples with Rounded Corners]]></title>
    <link href="http://michaelevans.org/blog/2015/05/07/android-ripples-with-rounded-corners/"/>
    <updated>2015-05-07T22:55:36-04:00</updated>
    <id>http://michaelevans.org/blog/2015/05/07/android-ripples-with-rounded-corners</id>
    <content type="html"><![CDATA[<p>So recently I was trying to add a ripple to a view that had rounded corners. Simple enough right? Let&rsquo;s just say I have a FrameLayout with the background similar to this one:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?xml version="1.0" encoding="utf-8"?&gt;
</span><span class='line'>&lt;shape xmlns:android="http://schemas.android.com/apk/res/android"
</span><span class='line'>    android:shape="rectangle"&gt;
</span><span class='line'>    &lt;solid android:color="@android:color/transparent"/&gt;
</span><span class='line'>    &lt;corners android:radius="15dp" /&gt;
</span><span class='line'>    &lt;stroke
</span><span class='line'>        android:width="1px"
</span><span class='line'>        android:color="#000000" /&gt;
</span><span class='line'>&lt;/shape&gt;</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s not quite as simple as setting the foreground to <code>?attr/selectableItemBackground</code>, or else you&rsquo;ll see the ripple surpasses the corners (which doesn&rsquo;t look <em>so</em> bad when your border radius is small, but this would look terrible with a circlular view):</p>

<p><img class="center" src="http://michaelevans.org/images/2015/05/07/before.gif" width="600" height="600" title="Rounded Corner Fail!" ></p>

<p>The solution for this lies in the special mask layer of the <a href="https://developer.android.com/reference/android/graphics/drawable/RippleDrawable.html">RippleDrawable</a>. You specify the mask layer via the <code>android:id</code> value set to <code>@android:id/mask</code>. For the example above, you can set the mask to the same size/shape as the view you&rsquo;re masking, and then the ripple will only show for that area. For something like our example above, you&rsquo;d use something like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?xml version="1.0" encoding="utf-8"?&gt;
</span><span class='line'>&lt;ripple xmlns:android="http://schemas.android.com/apk/res/android"
</span><span class='line'>    android:color="?android:attr/colorControlHighlight"&gt;
</span><span class='line'>    &lt;item android:id="@android:id/mask"&gt;
</span><span class='line'>        &lt;shape android:shape="rectangle"&gt;
</span><span class='line'>            &lt;solid android:color="#000000" /&gt;
</span><span class='line'>            &lt;corners android:radius="15dp" /&gt;
</span><span class='line'>        &lt;/shape&gt;
</span><span class='line'>    &lt;/item&gt;
</span><span class='line'>    &lt;item android:drawable="@drawable/rounded_corners" /&gt;
</span><span class='line'>&lt;/ripple&gt;</span></code></pre></td></tr></table></div></figure>


<p>Now when you tap on the view, you&rsquo;ll see something like this:</p>

<p><img class="center" src="http://michaelevans.org/images/2015/05/07/after.gif" width="600" height="600" title="Rounded Corners!" ></p>

<p><em>Huzzah!</em></p>

<p>Another tip: if you don&rsquo;t set a click listener for a FrameLayout (like we used in this example), the pressed state will never be used!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blurred background effect for Android]]></title>
    <link href="http://michaelevans.org/blog/2014/07/09/blurred-background-effect-for-android/"/>
    <updated>2014-07-09T23:04:46-04:00</updated>
    <id>http://michaelevans.org/blog/2014/07/09/blurred-background-effect-for-android</id>
    <content type="html"><![CDATA[<p>A few months ago, the Android design team reviewed apps that they thought were good-looking, and were referred to as the &ldquo;<a href="https://play.google.com/store/apps/collection/promotion_3000235_beautiful_apps?hl=en">Beautiful Design Collection</a>&rdquo;, as part of their <a href="https://www.youtube.com/playlist?list=PLWz5rJ2EKKc8j2B95zGMb8muZvrIy-wcF">Android Design in Action</a> series.</p>

<p>One of these apps was <a href="https://play.google.com/store/apps/details?id=com.etsy.android&amp;hl=en">Etsy</a>, which had a very cool fading blur background effect, which you can see here:</p>

<p><img class="center" src="http://michaelevans.org/images/2014/07/09/2014-07-09-23_25_40.gif" width="600" height="600" title="Etsy Example" ></p>

<p>As a learning experiment, I set off to replicate this behavior. I had seen a library by Manuel Peinado called <a href="https://github.com/ManuelPeinado/GlassActionBar">GlassActionBar</a> which demonstrated a similar glass-like blur effect on the ActionBar, so I decided to use that code for blurring my background.</p>

<p>The code itself is pretty interesting, specifically the bit for versions on Jelly Bean or higher. If you&rsquo;re using API version 16 and up, you can use <a href="http://android-developers.blogspot.com/2013/08/renderscript-intrinsics.html">Renderscript Intrinsics</a>, which are a set of built-in functions that require very little code to use, but are optimized for high-performance.</p>

<p>In my sample tests, using Renderscript to blur the image took on average about ~175ms, vs ~2 seconds doing the blur using Java code. (The required code is also only a tiny fraction of the length of the Renderscript one).</p>

<p>Renderscript is extremely easy to add to your project, just throw</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>    renderscriptTargetApi 19
</span><span class='line'>    renderscriptSupportMode true</span></code></pre></td></tr></table></div></figure>


<p>in your <code>build.gradle</code> and you should be ready to roll.</p>

<p>Once you have the blurring, the rest of the process is fairly straight forward. When you plan to leave an activity, create a bitmap of the current view and write it to disk. When you start your new activity (which should have a transparent background), you override the transition (otherwise you&rsquo;ll get the default zoom), and set the background to the blurred image you saved earlier. Add a fade in for the alpha and you get a nice little effect!</p>

<p><img class="center" src="http://michaelevans.org/images/2014/07/09/2014-07-09-23_34_05.gif" width="600" height="600" title="My Example" ></p>

<p>If you&rsquo;d like to see how this looks in a sample project, you can find it on Github <a href="https://github.com/MichaelEvans/EtsyBlurExample">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building OBS Studio for OS X]]></title>
    <link href="http://michaelevans.org/blog/2014/06/07/building-obs-studio-for-os-x/"/>
    <updated>2014-06-07T22:59:38-04:00</updated>
    <id>http://michaelevans.org/blog/2014/06/07/building-obs-studio-for-os-x</id>
    <content type="html"><![CDATA[<p>Recently I&rsquo;ve been watching a bunch of streams on <a href="http://www.twitch.tv/">Twitch</a>, and was investigating the best options to stream from OS X. Sadly most of the ones I found were very expensive, until I saw that <a href="http://obsproject.com/">Open Broadcaster Software</a>, which was previously only for Windows, was <a href="https://github.com/jp9000/obs-studio">being rewritten</a> to work with OS X and Linux. However, it&rsquo;s still highly beta/under development and as a result, there&rsquo;s not a lot of documentation on how to build it.</p>

<p>Here&rsquo;s how I did it:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew install ffmpeg glew cmake qt5
</span><span class='line'>git clone https://github.com/jp9000/obs-studio.git
</span><span class='line'>cd obs-studio
</span><span class='line'>mkdir cmbuild && cd cmbuild
</span><span class='line'>export CMAKE_PREFIX_PATH=/usr/local/Cellar/qt5/5.2.1/lib/cmake
</span><span class='line'>cmake .. && make
</span><span class='line'>cpack</span></code></pre></td></tr></table></div></figure>


<p>This will leave you with a disk image named <code>obs-studio-x64-&lt;sha1-hash&gt;.dmg</code>, which you can mount and install, just like any other OS X application.</p>

<p>Happy Streaming!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Embedding Google+ Posts in Octopress]]></title>
    <link href="http://michaelevans.org/blog/2014/04/13/embedding-google-plus-posts-in-octopress/"/>
    <updated>2014-04-13T13:46:25-04:00</updated>
    <id>http://michaelevans.org/blog/2014/04/13/embedding-google-plus-posts-in-octopress</id>
    <content type="html"><![CDATA[<p>A few months back I wrote a blog post about my <a href="http://www.michaelevans.org/blog/2013/12/31/2013-in-review/">2013 in Review</a>. One thing I wanted to add to the post was a link to the #AutoAwesomed video, which was generated from photos and videos I took during the year, which were backed up to Google+.</p>

<p>Fortunately for me, Google allows you to embed posts into your pages using a technique which is documented <a href="https://developers.google.com/+/web/embedded-post/">here</a>. The problem with this method, for me at least, is that my blog is created using <a href="http://octopress.org/">Octopress</a>, and posts are written in Markdown and then rendered to HTML. Octopress does, however, allow you to write plugins which can help us with this issue.</p>

<p>Here&rsquo;s the <a href="https://gist.github.com/MichaelEvans/10590514">plugin</a> in all it&rsquo;s glory:</p>

<div><script src='https://gist.github.com/10590514.js?file=google_plus.rb'></script>
<noscript><pre><code>module Jekyll

  class GooglePlusEmbedTag &lt; Liquid::Tag
    @post = nil
    @height = &#39;&#39;
    @width = &#39;&#39;

    def initialize(tag_name, markup, tokens)
      if markup =~ /(https:\/\/plus.google.com\/\d+\/posts\/\w+)/i
        @url  = $1
      end
      super
    end

    def render(context)
      &quot;&lt;div align=&#39;center&#39;&gt;&lt;div class=&#39;g-post&#39; data-href=&#39;#{@url}&#39;&gt;&lt;/div&gt;&lt;/div&gt;&quot;
    end
  end
end

Liquid::Template.register_tag(&#39;google_plus&#39;, Jekyll::GooglePlusEmbedTag)</code></pre></noscript></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ADB over WiFi]]></title>
    <link href="http://michaelevans.org/blog/2014/03/03/adb-over-wifi/"/>
    <updated>2014-03-03T22:30:38-05:00</updated>
    <id>http://michaelevans.org/blog/2014/03/03/adb-over-wifi</id>
    <content type="html"><![CDATA[<p>I haven&rsquo;t updated my blog in a while, but this is a tip/trick that&rsquo;s so good that I had to share. It&rsquo;s not a very widely known feature, but once you try it, you&rsquo;ll wonder how you lived with out it: using ADB over WiFi! That&rsquo;s right, no more plugging in all your devices to your computer to debug/etc. Best of all, no root required.</p>

<p>It&rsquo;s also ingeniusly simple. First, connect the device you want to use via a USB cable.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>adb tcpip 5555
</span><span class='line'>(Feel free to unplug it now)
</span><span class='line'>adb connect &lt;IP address of your device&gt;</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s it! Enjoy your tether-free development.</p>
]]></content>
  </entry>
  
</feed>
