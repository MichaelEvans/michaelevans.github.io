<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Michael Evans]]></title>
  <link href="http://michaelevans.org/atom.xml" rel="self"/>
  <link href="http://michaelevans.org/"/>
  <updated>2025-07-13T00:38:37-04:00</updated>
  <id>http://michaelevans.org/</id>
  <author>
    <name><![CDATA[Michael Evans]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Smooth Theme Transitions in Compose with Animated ColorSchemes]]></title>
    <link href="http://michaelevans.org/blog/2025/07/01/smooth-theme-transitions-in-compose-with-animated-colorschemes/"/>
    <updated>2025-07-01T23:38:27-04:00</updated>
    <id>http://michaelevans.org/blog/2025/07/01/smooth-theme-transitions-in-compose-with-animated-colorschemes</id>
    <content type="html"><![CDATA[<p>If your Jetpack Compose app supports light and dark themes, you’ve probably noticed the default behavior: a sudden cut between color schemes when the system UI mode changes.</p>

<p>I think we&rsquo;ve all seen theme changes that look like this:</p>

<p><video width='270' height='600' preload='none' controls ><source src='http://michaelevans.org/images/2025/07/01/instant.webm' type='video/webm; codecs=vp8, vorbis'>Your browser does not support the video tag.</video></p>

<p>We can do better.</p>

<p>By wrapping your theme setup with some animation, we can achieve <strong>smooth transitions between light and dark themes</strong> that feel much more polished — without rebuilding your entire app structure.</p>

<!-- more -->


<p></p>

<h2>The Idea: Animate the ColorScheme</h2>

<p>Jetpack Compose’s <code>MaterialTheme</code> accepts a <code>ColorScheme</code>. If we gradually animate the colors inside that scheme when the system toggles between dark and light, we can fade the colors smoothly across the entire app.</p>

<p>Here’s a simplified example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@Composable
</span><span class='line'>fun AnimatedTheme(
</span><span class='line'>    darkTheme: Boolean = isSystemInDarkTheme(),
</span><span class='line'>    content: @Composable () -&gt; Unit
</span><span class='line'>) {
</span><span class='line'>    val targetScheme = if (darkTheme) DarkColorScheme else LightColorScheme
</span><span class='line'>
</span><span class='line'>    val animatedScheme = targetScheme.copy(
</span><span class='line'>        primary = animateColorAsState(targetScheme.primary).value,
</span><span class='line'>        background = animateColorAsState(targetScheme.background).value,
</span><span class='line'>        surface = animateColorAsState(targetScheme.surface).value,
</span><span class='line'>        onPrimary = animateColorAsState(targetScheme.onPrimary).value,
</span><span class='line'>        // Add more swatches as needed...
</span><span class='line'>    )
</span><span class='line'>
</span><span class='line'>    MaterialTheme(
</span><span class='line'>        colorScheme = animatedScheme,
</span><span class='line'>        typography = Typography,
</span><span class='line'>        shapes = Shapes,
</span><span class='line'>        content = content
</span><span class='line'>    )
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>You can expand this to include all 20+ color swatches if you want — but we’ll show a better way shortly.</p>

<hr />

<h2>The Problem: Too Many Animations</h2>

<p>Manually animating every color swatch with <code>animateColorAsState</code> works, but:</p>

<ul>
<li>It’s <strong>verbose</strong></li>
<li>It runs <strong>a lot of recompositions</strong> (even for unused swatches)</li>
<li>It can be <strong>hard to keep up</strong> if <code>ColorScheme</code> changes</li>
</ul>


<hr />

<h2>A Better Approach: Animating with updateTransition</h2>

<p>A cleaner solution is to animate all properties as part of a single <code>Transition</code>. That way, Compose shares the animation clock and easing, and you&rsquo;re not scattering a dozen independent animation calls.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>private fun defaultColorTransitionSpec(): FiniteAnimationSpec&lt;Color&gt; =
</span><span class='line'>    tween(durationMillis = 500, easing = LinearOutSlowInEasing)
</span><span class='line'>
</span><span class='line'>@Composable
</span><span class='line'>fun AnimatedTheme(
</span><span class='line'>    darkTheme: Boolean = isSystemInDarkTheme(),
</span><span class='line'>    content: @Composable () -&gt; Unit
</span><span class='line'>) {
</span><span class='line'>    val targetScheme = if (darkTheme) DarkColorScheme else LightColorScheme
</span><span class='line'>    val transition = updateTransition(targetScheme, label = "themeTransition")
</span><span class='line'>
</span><span class='line'>    val primary by transition.animateColor(
</span><span class='line'>        label = "primary",
</span><span class='line'>        transitionSpec = { defaultColorTransitionSpec() }) { it.primary }
</span><span class='line'>    val background by transition.animateColor(
</span><span class='line'>        label = "background",
</span><span class='line'>        transitionSpec = { defaultColorTransitionSpec() }) { it.background }
</span><span class='line'>    val surface by transition.animateColor(
</span><span class='line'>        label = "surface",
</span><span class='line'>        transitionSpec = { defaultColorTransitionSpec() }) { it.surface }
</span><span class='line'>    val onPrimary by transition.animateColor(
</span><span class='line'>        label = "onPrimary",
</span><span class='line'>        transitionSpec = { defaultColorTransitionSpec() }) { it.onPrimary }
</span><span class='line'>
</span><span class='line'>    val animatedScheme = targetScheme.copy(
</span><span class='line'>        primary = primary,
</span><span class='line'>        background = background,
</span><span class='line'>        surface = surface,
</span><span class='line'>        onPrimary = onPrimary
</span><span class='line'>    )
</span><span class='line'>    MaterialTheme(colorScheme = animatedScheme, content = content)
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>This version:</p>

<ul>
<li>Uses a single <code>Transition</code> to group related animations</li>
<li>Shares the same easing/duration across all swatches</li>
<li>Is easier to extend or modify incrementally</li>
</ul>


<p>After we add our animations, it will look more like this:</p>

<p><video width='270' height='600' preload='none' controls ><source src='http://michaelevans.org/images/2025/07/01/animated.webm' type='video/webm; codecs=vp8, vorbis'>Your browser does not support the video tag.</video></p>

<hr />

<h2>Final Notes</h2>

<ul>
<li>If you want to animate <strong>all</strong> color properties, you&rsquo;ll still need to call <code>animateColor</code> for each one — but this pattern scales better than copy-pasting 25 <code>animateColorAsState</code> calls.</li>
<li>For most apps, animating just a <strong>handful</strong> of swatches (<code>primary</code>, <code>background</code>, <code>surface</code>, <code>onPrimary</code>, <code>error</code>) gives most of the perceived polish.</li>
<li>Avoid using reflection or deep copying here — it’s better to be explicit and in control of what’s animated.</li>
</ul>


<hr />

<h2>Wrap-Up</h2>

<p>This technique brings a much smoother feel to your app, especially if your users frequently switch between light and dark mode (or you support a manual toggle).</p>

<p>(Hopefully the Compose team eventually provides a helper for this boilerplate.)</p>

<p>Happy theming!</p>

<h2>Sample Code</h2>

<p>Want to try it out yourself? I’ve published a small sample project on GitHub that demonstrates both animated and non-animated theme switching:</p>

<p><a href="https://github.com/MichaelEvans/AnimatedThemeExample">View the sample project on GitHub</a></p>

<p>It includes the exact code from this post and the toggle UI shown in the GIFs.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Turning Any Android Callback into a Flow with callbackFlow]]></title>
    <link href="http://michaelevans.org/blog/2025/03/22/turning-any-android-callback-into-a-flow-with-callbackflow/"/>
    <updated>2025-03-22T23:10:16-04:00</updated>
    <id>http://michaelevans.org/blog/2025/03/22/turning-any-android-callback-into-a-flow-with-callbackflow</id>
    <content type="html"><![CDATA[<p>If you&rsquo;ve been working with Android for any amount of time, you&rsquo;ve probably run into APIs that expose their results using callbacks or listeners. Whether it&rsquo;s something like <code>LocationManager</code>, a custom SDK, or a third-party service like Firebase, you&rsquo;re often stuck adapting old-school async patterns into your modern reactive code.</p>

<p>This approach is especially helpful in apps using Jetpack Compose, coroutines, or unidirectional data flow.</p>

<p>Fortunately, Kotlin&rsquo;s <code>callbackFlow</code> makes this much easier. In this post, we&rsquo;ll show how to wrap a listener-based API using <code>callbackFlow</code>, so you can collect updates as a <code>Flow</code>. We&rsquo;ll use the Firebase Realtime Database as an example, but this pattern works for nearly anything.</p>

<!-- more -->


<h2>The Problem: Listeners Aren’t Reactive</h2>

<p>Here’s the classic way of listening to changes in the Firebase Realtime Database:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>val postListener = object : ValueEventListener {
</span><span class='line'>    override fun onDataChange(dataSnapshot: DataSnapshot) {
</span><span class='line'>        val post = dataSnapshot.getValue&lt;Post&gt;()
</span><span class='line'>        // update UI
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    override fun onCancelled(error: DatabaseError) {
</span><span class='line'>        Log.w(TAG, "loadPost:onCancelled", error.toException())
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>postReference.addValueEventListener(postListener)</span></code></pre></td></tr></table></div></figure>


<p>This works fine — but it’s imperative and not easily composable with things like <code>StateFlow</code>, <code>LiveData</code>, or Jetpack Compose. Let’s fix that.</p>

<h2>The Fix: Wrap It with callbackFlow</h2>

<p>Kotlin’s <code>callbackFlow</code> is designed for exactly this kind of situation — where you need to bridge a listener-based API into a reactive stream.</p>

<p>Here’s what it looks like for Firebase:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>fun Query.asFlow(): Flow&lt;DataSnapshot&gt; = callbackFlow {
</span><span class='line'>    val listener = object : ValueEventListener {
</span><span class='line'>        override fun onDataChange(snapshot: DataSnapshot) {
</span><span class='line'>            trySend(snapshot).isSuccess // emit each snapshot into the Flow
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        override fun onCancelled(error: DatabaseError) {
</span><span class='line'>            close(error.toException()) // cancel the flow on error
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    // Start listening for updates
</span><span class='line'>    addValueEventListener(listener)
</span><span class='line'>
</span><span class='line'>    // Suspend until the flow is closed or cancelled, then clean up
</span><span class='line'>    awaitClose { removeEventListener(listener) }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Let’s break that down:</p>

<ul>
<li><code>callbackFlow { ... }</code>: Gives you a coroutine-safe way to emit values (<code>send</code> / <code>trySend</code>) from a callback-based API.</li>
<li><code>trySend(snapshot)</code>: Emits a value into the flow. This is non-blocking and returns a <code>ChannelResult</code>, which we&rsquo;re ignoring here.</li>
<li><code>close(error.toException())</code>: If the Firebase listener is cancelled, we close the flow with the exception. This cancels any active collectors.</li>
<li><code>awaitClose { ... }</code>: Suspends the coroutine until the collector stops collecting (i.e., it’s cancelled or the flow completes), and is the right place to clean up listeners or resources.</li>
</ul>


<p>The result is a clean <code>Flow&lt;DataSnapshot&gt;</code> that behaves just like you’d want: it emits every time Firebase sends an update and automatically stops listening when the consumer stops collecting.</p>

<h2>Consuming the Flow</h2>

<p>You can now collect this from anywhere in your app. Here’s a quick example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>lifecycleScope.launch {
</span><span class='line'>    postReference.asFlow().collect { snapshot -&gt;
</span><span class='line'>        val post = snapshot.getValue&lt;Post&gt;()
</span><span class='line'>        // Update UI or state
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>This could also be collected in a <code>ViewModel</code>, transformed with <code>map</code>, or turned into Compose <code>State</code>. But that’s outside the scope of this post — we just wanted to show the full round trip here.</p>

<h2>A Note on <code>.snapshots</code></h2>

<p>If you’re using the Firebase Realtime Database, you might have seen the (relatively new) <code>snapshots</code> extension, which does exactly this out of the box:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>postReference.snapshots.collect { snapshot -&gt; /* ... */ }</span></code></pre></td></tr></table></div></figure>


<p>So if you’re only dealing with Firebase, you might not need your own wrapper. But the <code>callbackFlow</code> approach is still incredibly useful for any API that doesn’t have a ready-made Flow extension.</p>

<h2>Wrap-Up</h2>

<p><code>callbackFlow</code> is a powerful tool for adapting listener-based or callback-heavy APIs into clean, composable Kotlin Flows. Once you wrap something like this, you can:</p>

<ul>
<li>Collect updates in your <code>ViewModel</code> or UI layer</li>
<li>Combine it with other Flows</li>
<li>Debounce, map, retry, or buffer updates</li>
</ul>


<p>Firebase was just the example here — but this trick works great for things like:</p>

<ul>
<li><code>SensorManager</code></li>
<li><code>TextWatcher</code></li>
<li><code>LocationManager</code></li>
<li>WebSocket libraries</li>
<li>Custom event systems</li>
</ul>


<p>Once you get used to wrapping listeners this way, it’s hard to go back.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UI Testing Made Easy: The Robot Test Pattern on Android]]></title>
    <link href="http://michaelevans.org/blog/2024/12/14/ui-testing-made-easy-the-robot-test-pattern-on-android/"/>
    <updated>2024-12-14T10:52:24-05:00</updated>
    <id>http://michaelevans.org/blog/2024/12/14/ui-testing-made-easy-the-robot-test-pattern-on-android</id>
    <content type="html"><![CDATA[<p>As Android applications grow in complexity, maintaining a robust testing strategy becomes increasingly challenging. The &ldquo;Robot Testing Pattern&rdquo; offers a structured approach to UI testing that can significantly improve your test suite&rsquo;s maintainability and reliability. This guide is designed for Android developers who have basic experience with testing and want to enhance their testing methodology.</p>

<h2>Understanding the Robot Pattern</h2>

<p>The Robot Testing Pattern, also known as the Robot Framework or Robot Pattern, is a testing methodology that creates an abstraction layer between your test code and UI interactions. Think of robots as specialized assistants that handle all the UI interactions on behalf of your tests.</p>

<h3>Key Benefits</h3>

<p>The Robot Pattern provides several advantages that make it particularly valuable for Android testing:</p>

<ol>
<li><p>Improved Test Readability: Tests become high-level descriptions of user behavior rather than low-level UI interactions, making them easier to understand and maintain.</p></li>
<li><p>Enhanced Maintainability: When UI changes occur, updates are needed only in the robot implementation rather than across multiple test files.</p></li>
<li><p>Code Reusability: Common interactions can be shared across multiple test cases, reducing duplication and ensuring consistency.</p></li>
<li><p>Better Test Organization: The pattern enforces a clear separation between test logic and UI interaction code.</p></li>
<li><p>Simplified Parallel Testing: Isolated UI interaction logic enables efficient parallel test execution and better test stability.</p></li>
</ol>


<h2>Implementation Guide</h2>

<p>Let&rsquo;s explore how to implement the Robot Pattern in both Jetpack Compose and traditional View-based applications.</p>

<h3>Jetpack Compose Implementation</h3>

<p>Here&rsquo;s a basic implementation for a login screen using Compose:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class LoginRobot {
</span><span class='line'>    private val composeTestRule = createComposeRule()
</span><span class='line'>    
</span><span class='line'>    fun enterUsername(username: String) = apply {
</span><span class='line'>        composeTestRule.onNodeWithContentDescription("UsernameTextField")
</span><span class='line'>            .performTextInput(username)
</span><span class='line'>    }
</span><span class='line'>    
</span><span class='line'>    fun enterPassword(password: String) = apply {
</span><span class='line'>        composeTestRule.onNodeWithContentDescription("PasswordTextField")
</span><span class='line'>            .performTextInput(password)
</span><span class='line'>    }
</span><span class='line'>    
</span><span class='line'>    fun clickLoginButton() = apply {
</span><span class='line'>        composeTestRule.onNodeWithContentDescription("LoginButton")
</span><span class='line'>            .performClick()
</span><span class='line'>    }
</span><span class='line'>    
</span><span class='line'>    // Add verification methods
</span><span class='line'>    fun verifyErrorMessage(message: String) = apply {
</span><span class='line'>        composeTestRule.onNodeWithText(message)
</span><span class='line'>            .assertIsDisplayed()
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h3>View-Based Implementation</h3>

<p>For applications using traditional Views, the robot implementation looks slightly different:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class LoginRobot {
</span><span class='line'>    fun enterUsername(username: String) = apply {
</span><span class='line'>        onView(withId(R.id.editTextUsername))
</span><span class='line'>            .perform(typeText(username))
</span><span class='line'>    }
</span><span class='line'>    
</span><span class='line'>    fun enterPassword(password: String) = apply {
</span><span class='line'>        onView(withId(R.id.editTextPassword))
</span><span class='line'>            .perform(typeText(password))
</span><span class='line'>    }
</span><span class='line'>    
</span><span class='line'>    fun clickLoginButton() = apply {
</span><span class='line'>        onView(withId(R.id.buttonLogin))
</span><span class='line'>            .perform(click())
</span><span class='line'>    }
</span><span class='line'>    
</span><span class='line'>    // Add verification methods
</span><span class='line'>    fun verifyErrorMessage(message: String) = apply {
</span><span class='line'>        onView(withId(R.id.textViewError))
</span><span class='line'>            .check(matches(withText(message)))
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h3>Writing Tests with Robots</h3>

<p>With these robot implementations, your tests become much more readable and maintainable:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@Test
</span><span class='line'>fun loginWithValidCredentials() {
</span><span class='line'>    val loginRobot = LoginRobot()
</span><span class='line'>    
</span><span class='line'>    composeTestRule.setContent {
</span><span class='line'>        LoginScreen()
</span><span class='line'>    }
</span><span class='line'>    
</span><span class='line'>    loginRobot
</span><span class='line'>        .enterUsername("user@example.com")
</span><span class='line'>        .enterPassword("password123")
</span><span class='line'>        .clickLoginButton()
</span><span class='line'>        .verifyLoginSuccess()
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>@Test
</span><span class='line'>fun loginWithInvalidCredentials() {
</span><span class='line'>    val loginRobot = LoginRobot()
</span><span class='line'>    
</span><span class='line'>    composeTestRule.setContent {
</span><span class='line'>        LoginScreen()
</span><span class='line'>    }
</span><span class='line'>    
</span><span class='line'>    loginRobot
</span><span class='line'>        .enterUsername("invalid@example.com")
</span><span class='line'>        .enterPassword("wrongpassword")
</span><span class='line'>        .clickLoginButton()
</span><span class='line'>        .verifyErrorMessage("Invalid credentials")
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h3>Creating a Base Robot</h3>

<p>To promote code reuse and establish common testing patterns, create a base robot class:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>abstract class BaseRobot {
</span><span class='line'>    protected val composeTestRule = createComposeRule()
</span><span class='line'>    
</span><span class='line'>    protected fun waitForElement(
</span><span class='line'>        matcher: SemanticsMatcher,
</span><span class='line'>        timeoutMs: Long = 5000
</span><span class='line'>    ) {
</span><span class='line'>        composeTestRule.waitUntil(timeoutMs) {
</span><span class='line'>            composeTestRule
</span><span class='line'>                .onAllNodes(matcher)
</span><span class='line'>                .fetchSemanticsNodes().isNotEmpty()
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>    
</span><span class='line'>    protected fun assertIsDisplayed(matcher: SemanticsMatcher) {
</span><span class='line'>        composeTestRule.onNode(matcher).assertIsDisplayed()
</span><span class='line'>    }
</span><span class='line'>    
</span><span class='line'>    protected fun assertTextEquals(matcher: SemanticsMatcher, text: String) {
</span><span class='line'>        composeTestRule.onNode(matcher)
</span><span class='line'>            .assertTextEquals(text)
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>Best Practices</h2>

<ol>
<li><p><strong>Keep Robots Focused</strong>: Each robot should represent a specific screen or component. Avoid creating &ldquo;super robots&rdquo; that handle multiple screens.</p></li>
<li><p><strong>Include Verification Methods</strong>: Add methods to verify the state of the UI after actions are performed.</p></li>
<li><p><strong>Use Method Chaining</strong>: Return the robot instance from each method to enable fluent method chaining.</p></li>
<li><p><strong>Handle Async Operations</strong>: Include proper wait mechanisms for loading states and animations.</p></li>
<li><p><strong>Document Robot Methods</strong>: Provide clear documentation for each robot method to explain its purpose and expected behavior.</p></li>
</ol>


<p>The Robot Testing Pattern significantly improves the maintainability and reliability of Android UI tests. By separating UI interaction logic into dedicated robot classes, you create more organized, readable, and maintainable tests. When UI changes occur, updates are localized to the robot implementations rather than scattered across test files. Happy coding!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Modernizing Your Android App's Data Storage: SharedPreferences to DataStore]]></title>
    <link href="http://michaelevans.org/blog/2024/10/10/modernizing-your-android-apps-data-storage-sharedpreferences-to-datastore/"/>
    <updated>2024-10-10T11:53:57-04:00</updated>
    <id>http://michaelevans.org/blog/2024/10/10/modernizing-your-android-apps-data-storage-sharedpreferences-to-datastore</id>
    <content type="html"><![CDATA[<p><a href="https://developer.android.com/reference/android/content/SharedPreferences">SharedPreferences</a> has long been a staple for storing small pieces of data and user preferences in Android apps. However, it has notable limitations, such as a lack of type safety, no support for safe schema evolution, and potential performance issues on the main thread. Google introduced <a href="https://developer.android.com/topic/libraries/architecture/datastore">Proto DataStore</a> as a modern and robust alternative, offering:</p>

<ul>
<li>Strong typing with Protocol Buffers</li>
<li>Safe schema evolution</li>
<li>Built-in migration support</li>
<li>Flow API for reactive programming</li>
<li>Coroutines support for main-thread safety</li>
</ul>


<p>In this post, we&rsquo;ll walk through the process of migrating your existing SharedPreferences data to Proto DataStore without data loss, including best practices and common pitfalls to avoid.</p>

<h2>Step 1: Add Dependencies</h2>

<p>First, add the necessary dependencies to your app&rsquo;s <code>build.gradle</code> file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dependencies {
</span><span class='line'>    def datastore_version = "1.0.0"
</span><span class='line'>    
</span><span class='line'>    // Proto DataStore
</span><span class='line'>    implementation "androidx.datastore:datastore:$datastore_version"
</span><span class='line'>    
</span><span class='line'>    // Protocol Buffers
</span><span class='line'>    implementation "com.google.protobuf:protobuf-javalite:3.18.0"
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>Step 2: Define Your Proto DataStore Schema</h2>

<p>Create a new <code>.proto</code> file in <code>app/src/main/proto/my_data.proto</code> to define your data schema:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>syntax = "proto3";
</span><span class='line'>
</span><span class='line'>option java_package = "com.example.app";
</span><span class='line'>option java_multiple_files = true;
</span><span class='line'>
</span><span class='line'>message UserPreferences {
</span><span class='line'>    // Define your fields with unique numbers
</span><span class='line'>    string user_name = 1;
</span><span class='line'>    bool notifications_enabled = 2;
</span><span class='line'>    string theme = 3;
</span><span class='line'>    
</span><span class='line'>    // Optional: Add a version field for future schema evolution
</span><span class='line'>    int32 schema_version = 999;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Note the <code>schema_version</code> field &ndash; this helps manage schema evolution as your app grows.</p>

<h2>Step 3: Create a Proto DataStore Serializer</h2>

<p>The serializer handles reading and writing your protocol buffer messages:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>object UserPreferencesSerializer : Serializer&lt;UserPreferences&gt; {
</span><span class='line'>    override val defaultValue: UserPreferences = UserPreferences.getDefaultInstance()
</span><span class='line'>    
</span><span class='line'>    override suspend fun readFrom(input: InputStream): UserPreferences {
</span><span class='line'>        try {
</span><span class='line'>            return UserPreferences.parseFrom(input)
</span><span class='line'>        } catch (exception: InvalidProtocolBufferException) {
</span><span class='line'>            throw CorruptionException("Cannot read proto.", exception)
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>    
</span><span class='line'>    override suspend fun writeTo(t: UserPreferences, output: OutputStream) {
</span><span class='line'>        t.writeTo(output)
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>Step 4: Create a Repository Class</h2>

<p>Following best practices, wrap the DataStore in a repository:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class UserPreferencesRepository(private val context: Context) {
</span><span class='line'>    private val dataStore: DataStore&lt;UserPreferences&gt; = context.createDataStore(
</span><span class='line'>        fileName = "user_prefs.pb",
</span><span class='line'>        serializer = UserPreferencesSerializer
</span><span class='line'>    )
</span><span class='line'>    
</span><span class='line'>    val userPreferencesFlow: Flow&lt;UserPreferences&gt; = dataStore.data
</span><span class='line'>        .catch { exception -&gt;
</span><span class='line'>            if (exception is IOException) {
</span><span class='line'>                emit(UserPreferences.getDefaultInstance())
</span><span class='line'>            } else {
</span><span class='line'>                throw exception
</span><span class='line'>            }
</span><span class='line'>        }
</span><span class='line'>    
</span><span class='line'>    suspend fun migrateFromSharedPreferences() = withContext(Dispatchers.IO) {
</span><span class='line'>        try {
</span><span class='line'>            val sharedPrefs = context.getSharedPreferences("user_prefs", Context.MODE_PRIVATE)
</span><span class='line'>            
</span><span class='line'>            // Read existing preferences
</span><span class='line'>            val userName = sharedPrefs.getString("user_name", "") ?: ""
</span><span class='line'>            val notificationsEnabled = sharedPrefs.getBoolean("notifications_enabled", true)
</span><span class='line'>            val theme = sharedPrefs.getString("theme", "system") ?: "system"
</span><span class='line'>            
</span><span class='line'>            // Migrate to DataStore
</span><span class='line'>            dataStore.updateData { preferences -&gt;
</span><span class='line'>                preferences.toBuilder()
</span><span class='line'>                    .setUserName(userName)
</span><span class='line'>                    .setNotificationsEnabled(notificationsEnabled)
</span><span class='line'>                    .setTheme(theme)
</span><span class='line'>                    .setSchemaVersion(1)
</span><span class='line'>                    .build()
</span><span class='line'>            }
</span><span class='line'>            
</span><span class='line'>            // Verify migration
</span><span class='line'>            val migratedData = dataStore.data.first()
</span><span class='line'>            if (migratedData.userName == userName &&
</span><span class='line'>                migratedData.notificationsEnabled == notificationsEnabled &&
</span><span class='line'>                migratedData.theme == theme) {
</span><span class='line'>                // Clear SharedPreferences after successful migration
</span><span class='line'>                sharedPrefs.edit().clear().apply()
</span><span class='line'>                Result.success(Unit)
</span><span class='line'>            } else {
</span><span class='line'>                Result.failure(Exception("Migration verification failed"))
</span><span class='line'>            }
</span><span class='line'>        } catch (e: Exception) {
</span><span class='line'>            Result.failure(e)
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>    
</span><span class='line'>    suspend fun updateUserName(name: String) {
</span><span class='line'>        dataStore.updateData { preferences -&gt;
</span><span class='line'>            preferences.toBuilder()
</span><span class='line'>                .setUserName(name)
</span><span class='line'>                .build()
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>    
</span><span class='line'>    suspend fun updateNotificationsEnabled(enabled: Boolean) {
</span><span class='line'>        dataStore.updateData { preferences -&gt;
</span><span class='line'>            preferences.toBuilder()
</span><span class='line'>                .setNotificationsEnabled(enabled)
</span><span class='line'>                .build()
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>    
</span><span class='line'>    suspend fun updateTheme(theme: String) {
</span><span class='line'>        dataStore.updateData { preferences -&gt;
</span><span class='line'>            preferences.toBuilder()
</span><span class='line'>                .setTheme(theme)
</span><span class='line'>                .build()
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>Step 5: Use in Your App</h2>

<p>Here&rsquo;s how to use the repository in your app:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class MainActivity : AppCompatActivity() {
</span><span class='line'>    private lateinit var repository: UserPreferencesRepository
</span><span class='line'>    
</span><span class='line'>    override fun onCreate(savedInstanceState: Bundle?) {
</span><span class='line'>        super.onCreate(savedInstanceState)
</span><span class='line'>        
</span><span class='line'>        repository = UserPreferencesRepository(applicationContext)
</span><span class='line'>        
</span><span class='line'>        // Migrate data on app first launch
</span><span class='line'>        lifecycleScope.launch {
</span><span class='line'>            repository.migrateFromSharedPreferences()
</span><span class='line'>        }
</span><span class='line'>        
</span><span class='line'>        // Observe preferences changes
</span><span class='line'>        lifecycleScope.launch {
</span><span class='line'>            repository.userPreferencesFlow.collect { preferences -&gt;
</span><span class='line'>                // Update UI based on preferences
</span><span class='line'>                updateUI(preferences)
</span><span class='line'>            }
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>    
</span><span class='line'>    private fun updateUI(preferences: UserPreferences) {
</span><span class='line'>        // Update your UI components based on preferences
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>Testing Your Migration</h2>

<p>Here&rsquo;s an example of how to test your migration:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@Test
</span><span class='line'>fun testMigrationFromSharedPreferences() = runTest {
</span><span class='line'>    val context = ApplicationProvider.getApplicationContext&lt;Context&gt;()
</span><span class='line'>    
</span><span class='line'>    // Set up test SharedPreferences
</span><span class='line'>    val sharedPrefs = context.getSharedPreferences("user_prefs", Context.MODE_PRIVATE)
</span><span class='line'>    sharedPrefs.edit()
</span><span class='line'>        .putString("user_name", "Test User")
</span><span class='line'>        .putBoolean("notifications_enabled", true)
</span><span class='line'>        .putString("theme", "dark")
</span><span class='line'>        .apply()
</span><span class='line'>    
</span><span class='line'>    // Perform migration
</span><span class='line'>    val repository = UserPreferencesRepository(context)
</span><span class='line'>    val result = repository.migrateFromSharedPreferences()
</span><span class='line'>    
</span><span class='line'>    // Verify migration
</span><span class='line'>    assert(result.isSuccess)
</span><span class='line'>    
</span><span class='line'>    val migratedData = repository.userPreferencesFlow.first()
</span><span class='line'>    assertEquals("Test User", migratedData.userName)
</span><span class='line'>    assertTrue(migratedData.notificationsEnabled)
</span><span class='line'>    assertEquals("dark", migratedData.theme)
</span><span class='line'>    
</span><span class='line'>    // Verify SharedPreferences was cleared
</span><span class='line'>    assertTrue(sharedPrefs.all.isEmpty())
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>Best Practices and Common Pitfalls</h2>

<ol>
<li><p><strong>Schema Evolution</strong>: When adding new fields to your proto schema, always:</p>

<ul>
<li>Use new field numbers</li>
<li>Provide default values</li>
<li>Increment the schema version</li>
</ul>
</li>
<li><p><strong>Error Handling</strong>: Always handle potential exceptions when reading/writing data:</p>

<ul>
<li><code>IOException</code> for file system issues</li>
<li><code>CorruptionException</code> for invalid data</li>
<li><code>InvalidProtocolBufferException</code> for proto parsing errors</li>
</ul>
</li>
<li><p><strong>Performance</strong>:</p>

<ul>
<li>Perform migrations in the background using Coroutines</li>
<li>Use Flow&rsquo;s <code>collectLatest</code> when frequent updates aren&rsquo;t necessary</li>
<li>Consider caching frequently accessed values</li>
</ul>
</li>
<li><p><strong>Testing</strong>:</p>

<ul>
<li>Write unit tests for your repository</li>
<li>Test migration with various SharedPreferences states</li>
<li>Include error cases in your tests</li>
<li>Test schema evolution scenarios</li>
</ul>
</li>
</ol>


<h2>Conclusion</h2>

<p>Migrating from SharedPreferences to Proto DataStore requires some initial setup, but the benefits of type safety, schema evolution, and reactive programming make it worthwhile. The resulting code will be more maintainable, type-safe, and resistant to runtime errors. Happy coding!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mastering ktlint: A Guide to Crafting Your Own Rules]]></title>
    <link href="http://michaelevans.org/blog/2024/09/07/mastering-ktlint-a-guide-to-crafting-your-own-rules/"/>
    <updated>2024-09-07T11:49:37-04:00</updated>
    <id>http://michaelevans.org/blog/2024/09/07/mastering-ktlint-a-guide-to-crafting-your-own-rules</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/pinterest/ktlint">Ktlint</a> is a powerful linting tool for Kotlin code that helps maintain code quality and consistency. While it comes with a set of built-in rules, there may be cases where you want to create custom rules tailored to your project&rsquo;s specific requirements. In this tutorial, we&rsquo;ll walk you through the process of writing a custom ktlint rule that detects and removes Android Log statements from your Kotlin code.</p>

<hr />

<h2>Prerequisites</h2>

<p>Before we dive into writing custom ktlint rules, ensure you have ktlint installed in your project. The tasks ktlintApplyToIdea and addKtlintCheckTask are provided by the ktlint Gradle plugin. If you haven&rsquo;t already, include the plugin in your project by adding the following to your <code>build.gradle.kts</code> file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>plugins {
</span><span class='line'>    id("org.jlleitschuh.gradle.ktlint") version "&lt;latest-version&gt;"
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Once the plugin is applied, run the following command to set up ktlint in your project:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>./gradlew ktlintApplyToIdea addKtlintCheckTask</span></code></pre></td></tr></table></div></figure>


<hr />

<h2>Writing a Custom ktlint Rule</h2>

<h3>1. Create a New Module</h3>

<p>To write a custom ktlint rule, start by creating a new module in your Kotlin project.</p>

<h3>2. Set Up Your Project</h3>

<p>In your new module, make sure you have ktlint as a dependency. Add it to your <code>build.gradle.kts</code> or <code>build.gradle</code> file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dependencies {
</span><span class='line'>    ktlint("io.gitlab.arturbosch.detekt:detekt-formatting:&lt;ktlint-version&gt;")
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h3>3. Define the ktlint Rule</h3>

<p>Now, let&rsquo;s define our custom rule. Create a Kotlin class that extends the <code>Rule</code> class and override the <code>visit</code> method to define the logic for your rule. In this example, we want to detect Android Log statements.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import io.gitlab.arturbosch.detekt.api.Rule
</span><span class='line'>import org.jetbrains.kotlin.psi.KtCallExpression
</span><span class='line'>
</span><span class='line'>class LogStatementRule : Rule() {
</span><span class='line'>    override fun visitCallExpression(expression: KtCallExpression) {
</span><span class='line'>        if (expression.calleeExpression?.text == "Log" &&
</span><span class='line'>            expression.valueArguments.size == 1
</span><span class='line'>        ) {
</span><span class='line'>            // Report a finding
</span><span class='line'>            report(
</span><span class='line'>                finding = "Found Android Log statement",
</span><span class='line'>                documentable = expression
</span><span class='line'>            )
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h3>4. Create a Test</h3>

<p>As with any code we write, it&rsquo;s great practice to write tests for your custom rule to ensure it behaves as expected. Use the ktlint testing library to create a test case that demonstrates the rule&rsquo;s functionality.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import io.gitlab.arturbosch.detekt.test.lint
</span><span class='line'>import org.spekframework.spek2.Spek
</span><span class='line'>import org.spekframework.spek2.style.specification.describe
</span><span class='line'>
</span><span class='line'>object LogStatementRuleSpec : Spek({
</span><span class='line'>    describe("a LogStatementRule") {
</span><span class='line'>        val subject = LogStatementRule()
</span><span class='line'>
</span><span class='line'>        it("should report Android Log statements") {
</span><span class='line'>            val code = """
</span><span class='line'>                import android.util.Log
</span><span class='line'>                fun example() {
</span><span class='line'>                    Log.d("Tag", "Message")
</span><span class='line'>                }
</span><span class='line'>            """.trimIndent()
</span><span class='line'>
</span><span class='line'>            subject.lint(code)
</span><span class='line'>                .shouldContainOnly(subject.findings.single())
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        it("should not report other function calls") {
</span><span class='line'>            val code = """
</span><span class='line'>                fun example() {
</span><span class='line'>                    someFunction()
</span><span class='line'>                }
</span><span class='line'>            """.trimIndent()
</span><span class='line'>
</span><span class='line'>            subject.lint(code)
</span><span class='line'>                .shouldBeEmpty()
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>})</span></code></pre></td></tr></table></div></figure>


<h3>5. Add the Rule to ktlint Configuration</h3>

<p>To make your custom rule part of your ktlint configuration, add it to the <code>.editorconfig</code> file in your project:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># .editorconfig
</span><span class='line'># Custom ktlint rules
</span><span class='line'>ktlint.ruleset = LogStatementRule</span></code></pre></td></tr></table></div></figure>


<h3>6. Run ktlint</h3>

<p>Run ktlint in your project to check for Android Log statements and automatically remove them using the <code>--apply-to-idea</code> flag:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>./gradlew ktlintApplyToIdea</span></code></pre></td></tr></table></div></figure>


<hr />

<h2>Conclusion</h2>

<p>In this tutorial, we&rsquo;ve shown you how to write a custom ktlint rule to detect and remove Android Log statements from your Kotlin code. Custom ktlint rules can help you maintain code quality and consistency by enforcing project-specific coding standards. This is obviously a simple example, but this is a good example to adapt for other custom rules that fit your project&rsquo;s needs.</p>

<p>Ktlint is a powerful tool that, when combined with custom rules, can significantly improve your Kotlin codebase&rsquo;s quality and readability. Happy coding!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stop Repeating Yourself 2: Using Test Fixtures with AGP]]></title>
    <link href="http://michaelevans.org/blog/2024/07/29/stop-repeating-yourself-2-using-test-fixtures-with-agp/"/>
    <updated>2024-07-29T19:43:27-04:00</updated>
    <id>http://michaelevans.org/blog/2024/07/29/stop-repeating-yourself-2-using-test-fixtures-with-agp</id>
    <content type="html"><![CDATA[<p>Modern Android development often involves modularization to enhance build performance and maintainability. As you break down your app into multiple modules, sharing test utilities such as fixtures, mocks, or fakes between modules can become challenging. A <a href="https://michaelevans.org/blog/2019/09/21/stop-repeating-yourself-sharing-test-code-across-android-modules/">few years ago</a> I wrote about the concept of test fixtures, but at the time they <a href="https://issuetracker.google.com/issues/139438142">weren&rsquo;t supported</a> for Android modules. Thankfully, with Android Gradle Plugin (AGP) 8.5.0, Google introduced native support for test fixtures, streamlining this process significantly.</p>

<h3>What Are Test Fixtures?</h3>

<p>Test fixtures are reusable components such as test data, helper classes, or mocks that you can use to support your tests. Prior to AGP 8.5.0, sharing these utilities across modules often required workarounds like creating dedicated &ldquo;test&rdquo; modules or manually wiring dependencies. With AGP 8.5.0, the <code>testFixture</code>s feature makes it easier to declare and consume test fixtures directly from your modules.</p>

<h3>Setting Up Test Fixtures</h3>

<p>To enable test fixtures for a module, you need to include the <code>testFixtures</code> feature in your module&rsquo;s <code>build.gradle.kts</code> file. Here’s how you can set it up:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>android {
</span><span class='line'>    // Enable test fixtures for the module
</span><span class='line'>    testFixtures.enable = true
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>dependencies {
</span><span class='line'>    // Declare dependencies for your test fixtures
</span><span class='line'>    testFixturesImplementation("com.example:some-library:1.0.0")
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>The testFixtures source set is automatically created under the src directory:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>module-name/
</span><span class='line'>  src/
</span><span class='line'>    main/
</span><span class='line'>      java/
</span><span class='line'>    testFixtures/
</span><span class='line'>      java/
</span><span class='line'>      kotlin/
</span><span class='line'>    test/
</span><span class='line'>      java/</span></code></pre></td></tr></table></div></figure>


<p>You can now place reusable test utilities, such as mock data generators or fake implementations, inside the <code>testFixtures</code> directory.</p>

<h3>Consuming Test Fixtures</h3>

<p>Modules can consume test fixtures by declaring a dependency on the <code>testFixtures</code> configuration of another module. For example, if <code>module-b</code> needs to use the test fixtures from <code>module-a</code>, add the following dependency:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dependencies {
</span><span class='line'>    testImplementation(testFixtures(project(":module-a")))
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Once this dependency is added, the test code in module-b can seamlessly access the fixtures provided by <code>module-a</code>.</p>

<h3>Example: Sharing a Fake API Client</h3>

<p>Suppose you have a fake API client used in multiple test cases. You can define it in the <code>testFixtures</code> source set of <code>module-a</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// module-a/src/testFixtures/kotlin/com/example/api/FakeApiClient.kt
</span><span class='line'>package com.example.api
</span><span class='line'>
</span><span class='line'>class FakeApiClient {
</span><span class='line'>    fun getFakeData(): String = "Fake Data"
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Then, in <code>module-b</code>, you can consume and use this fake client:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// module-b/src/test/kotlin/com/example/test/ApiClientTest.kt
</span><span class='line'>package com.example.test
</span><span class='line'>
</span><span class='line'>import com.example.api.FakeApiClient
</span><span class='line'>import org.junit.Test
</span><span class='line'>
</span><span class='line'>class ApiClientTest {
</span><span class='line'>
</span><span class='line'>    @Test
</span><span class='line'>    fun testFakeData() {
</span><span class='line'>        val fakeApiClient = FakeApiClient()
</span><span class='line'>        assert(fakeApiClient.getFakeData() == "Fake Data")
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h3>Conclusion</h3>

<p>The testFixtures feature in AGP 8.5.0 is a game-changer for modularized Android projects. It eliminates the friction of sharing test utilities, allowing you to write cleaner, more maintainable test setups. If you’re working on a modularized project and haven’t tried testFixtures yet, now is the perfect time to incorporate it into your testing strategy.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Understanding Referrals using Google Play]]></title>
    <link href="http://michaelevans.org/blog/2024/06/27/understanding-referrals-using-google-play/"/>
    <updated>2024-06-27T19:41:33-04:00</updated>
    <id>http://michaelevans.org/blog/2024/06/27/understanding-referrals-using-google-play</id>
    <content type="html"><![CDATA[<p>Tracking how users install your app can be tricky, especially when you want to measure the effectiveness of your campaigns or ads. That’s where the <a href="https://developer.android.com/google/play/installreferrer">Google Play Install Referrer API</a> comes in handy—it gives you reliable data about how users found your app.</p>

<p>If you’re developing an Android application, this guide will walk you through how to set up and use the InstallReferrerClient with Kotlin&rsquo;s callbackFlow to make integration simpler and more maintainable.</p>

<h3>What is the Install Referrer?</h3>

<p>The install referrer contains information about the source of the app installation. For example, if a user clicks an ad campaign link that leads to your app’s Play Store page, the referrer might include details about the campaign source, medium, or other specifics.</p>

<p>Here’s how this data can help:</p>

<ul>
<li>Attribution: Identify which campaigns drive installs.</li>
<li>Measure Success: Evaluate your marketing efforts&#8217; impact.</li>
<li>Prevent Fraud: Verify referrer data to avoid fraudulent installs.</li>
</ul>


<h3>Setting Up and Using the InstallReferrerClient</h3>

<p>Step 1: Add the Dependency</p>

<p>First, include the Install Referrer library in your build.gradle file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>implementation 'com.android.installreferrer:installreferrer:2.2'</span></code></pre></td></tr></table></div></figure>


<p>Step 2: Use <code>callbackFlow</code> for our implementation</p>

<p>The InstallReferrerClient is callback-based, but Kotlin’s <code>callbackFlow</code> lets you handle this more elegantly. Here’s an example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import com.android.installreferrer.api.InstallReferrerClient
</span><span class='line'>import com.android.installreferrer.api.InstallReferrerStateListener
</span><span class='line'>import com.android.installreferrer.api.ReferrerDetails
</span><span class='line'>import kotlinx.coroutines.channels.awaitClose
</span><span class='line'>import kotlinx.coroutines.flow.callbackFlow
</span><span class='line'>
</span><span class='line'>fun fetchInstallReferrer(context: Context) = callbackFlow {
</span><span class='line'>    val referrerClient = InstallReferrerClient.newBuilder(context).build()
</span><span class='line'>
</span><span class='line'>    val listener = object : InstallReferrerStateListener {
</span><span class='line'>        override fun onInstallReferrerSetupFinished(responseCode: Int) {
</span><span class='line'>            when (responseCode) {
</span><span class='line'>                InstallReferrerClient.InstallReferrerResponse.OK -&gt; {
</span><span class='line'>                    try {
</span><span class='line'>                        val response: ReferrerDetails = referrerClient.installReferrer
</span><span class='line'>                        trySend(Result.success(response))
</span><span class='line'>                    } catch (e: Exception) {
</span><span class='line'>                        trySend(Result.failure(e))
</span><span class='line'>                    } finally {
</span><span class='line'>                        referrerClient.endConnection()
</span><span class='line'>                    }
</span><span class='line'>                }
</span><span class='line'>                InstallReferrerClient.InstallReferrerResponse.FEATURE_NOT_SUPPORTED -&gt; {
</span><span class='line'>                    trySend(Result.failure(UnsupportedOperationException("Feature not supported")))
</span><span class='line'>                }
</span><span class='line'>                InstallReferrerClient.InstallReferrerResponse.SERVICE_UNAVAILABLE -&gt; {
</span><span class='line'>                    trySend(Result.failure(IllegalStateException("Service unavailable")))
</span><span class='line'>                }
</span><span class='line'>            }
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        override fun onInstallReferrerServiceDisconnected() {
</span><span class='line'>            // Handle service disconnection if needed
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    referrerClient.startConnection(listener)
</span><span class='line'>
</span><span class='line'>    awaitClose {
</span><span class='line'>        referrerClient.endConnection()
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Step 3: Consuming the Flow</p>

<p>Collect the flow to retrieve and process the install referrer details:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>fetchInstallReferrer(context).collect { result -&gt;
</span><span class='line'>        result.onSuccess { referrerDetails -&gt;
</span><span class='line'>            val referrerUrl = referrerDetails.installReferrer
</span><span class='line'>            val clickTimestamp = referrerDetails.referrerClickTimestampSeconds
</span><span class='line'>            val installTimestamp = referrerDetails.installBeginTimestampSeconds
</span><span class='line'>
</span><span class='line'>            println("Referrer URL: $referrerUrl")
</span><span class='line'>            println("Click Time: $clickTimestamp")
</span><span class='line'>            println("Install Time: $installTimestamp")
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        result.onFailure { exception -&gt;
</span><span class='line'>            println("Error: ${exception.message}")
</span><span class='line'>        }
</span><span class='line'>    }</span></code></pre></td></tr></table></div></figure>


<h3>Wrapping Up</h3>

<p>With this data, you&rsquo;ll gain valuable insights into your app’s install sources, helping you make data-driven marketing decisions. Happy coding!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Accessing Test Resources using Kotlin Multiplatform]]></title>
    <link href="http://michaelevans.org/blog/2024/04/17/accessing-test-resources-using-kotlin-multiplatform/"/>
    <updated>2024-04-17T20:11:01-04:00</updated>
    <id>http://michaelevans.org/blog/2024/04/17/accessing-test-resources-using-kotlin-multiplatform</id>
    <content type="html"><![CDATA[<p>Kotlin Multiplatform (KMP) offers a powerful way to share code across platforms like Android, iOS, and the JVM. However, when it comes to testing, you might encounter a common challenge: how to handle test resources such as JSON files, configurations, or other data needed for tests. In this post, we’ll dive into strategies for accessing test resources in KMP projects.</p>

<h3>Why Test Resources Matter</h3>

<p>Test resources are essential for validating your code against real-world scenarios. For example, if you’re writing a library to parse JSON, you’d want to test it against diverse JSON samples representing different edge cases. While resource access is straightforward in single-platform projects, KMP’s multi-target nature requires some additional setup.</p>

<h3>The Challenge in Kotlin Multiplatform</h3>

<p>In KMP, test code resides in the <code>commonTest</code> source set, but resources aren’t directly bundled with it. Each platform manages file paths and resource access differently, so you need platform-specific setups for your resources and shared logic to load them efficiently.</p>

<h3>Organizing Test Resources</h3>

<p>Start by structuring your resources in a way that aligns with your project layout:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>project-root/
</span><span class='line'>  src/
</span><span class='line'>    commonTest/
</span><span class='line'>      kotlin/
</span><span class='line'>        ...
</span><span class='line'>    androidTest/
</span><span class='line'>      resources/
</span><span class='line'>        test-data.json
</span><span class='line'>    jvmTest/
</span><span class='line'>      resources/
</span><span class='line'>        test-data.json
</span><span class='line'>    iosTest/
</span><span class='line'>      resources/
</span><span class='line'>        test-data.json</span></code></pre></td></tr></table></div></figure>


<p>This setup ensures that each target platform can access its respective resources while keeping them logically grouped.</p>

<h3>Loading Resources by Platform</h3>

<p>For Android, place your test resources in the <code>androidTest/resources</code> directory. Use the <code>javaClass.classLoader</code> to load them:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>fun loadTestResource(resourceName: String): String {
</span><span class='line'>    val inputStream = javaClass.classLoader?.getResourceAsStream(resourceName)
</span><span class='line'>    return inputStream?.bufferedReader()?.use { it.readText() }
</span><span class='line'>        ?: throw IllegalArgumentException("Resource not found: $resourceName")
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>For iOS, add your resources to the test target in Xcode. Use platform-specific code to load them:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import platform.Foundation.*
</span><span class='line'>
</span><span class='line'>fun loadTestResource(resourceName: String): String {
</span><span class='line'>    val bundle = NSBundle.bundleForClass(MyTestClass::class)
</span><span class='line'>    val path = bundle.pathForResource(resourceName, ofType = null)
</span><span class='line'>        ?: throw IllegalArgumentException("Resource not found: $resourceName")
</span><span class='line'>    return NSString.stringWithContentsOfFile(path, encoding = NSUTF8StringEncoding, error = null) as String
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h3>Sharing the Resource Loader</h3>

<p>To avoid duplication, define a common function in <code>commonTest</code> and use the <code>expect/actual</code> pattern for platform-specific implementations:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// commonTest
</span><span class='line'>expect fun loadTestResource(resourceName: String): String
</span><span class='line'>
</span><span class='line'>// androidTest
</span><span class='line'>actual fun loadTestResource(resourceName: String): String {
</span><span class='line'>    val inputStream = javaClass.classLoader?.getResourceAsStream(resourceName)
</span><span class='line'>    return inputStream?.bufferedReader()?.use { it.readText() }
</span><span class='line'>        ?: throw IllegalArgumentException("Resource not found: $resourceName")
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>// iosTest
</span><span class='line'>actual fun loadTestResource(resourceName: String): String {
</span><span class='line'>    val bundle = NSBundle.bundleForClass(MyTestClass::class)
</span><span class='line'>    val path = bundle.pathForResource(resourceName, ofType = null)
</span><span class='line'>        ?: throw IllegalArgumentException("Resource not found: $resourceName")
</span><span class='line'>    return NSString.stringWithContentsOfFile(path, encoding = NSUTF8StringEncoding, error = null) as String
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Putting It All Together</p>

<p>With this setup, your <code>commonTest</code> code can seamlessly access resources across platforms. For example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@Test
</span><span class='line'>fun testJsonParsing() {
</span><span class='line'>    val jsonData = loadTestResource("test-data.json")
</span><span class='line'>    val parsedData = parseJson(jsonData)
</span><span class='line'>    assertEquals(expectedData, parsedData)
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Accessing test resources in Kotlin Multiplatform involves a bit of extra setup, but the payoff is a unified testing strategy across platforms. By leveraging the expect/actual pattern, you can create platform-specific resource loaders while keeping your test logic shared and consistent. Dive into KMP’s capabilities, and streamline your tests for every target platform!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building Flipper Plugins for Fun and Profit]]></title>
    <link href="http://michaelevans.org/blog/2022/09/28/flipper-plugins-for-fun-and-profit/"/>
    <updated>2022-09-28T23:41:17-04:00</updated>
    <id>http://michaelevans.org/blog/2022/09/28/flipper-plugins-for-fun-and-profit</id>
    <content type="html"><![CDATA[<p>A long, long time ago, I wrote a <a href="http://michaelevans.org/blog/2020/03/10/improving-app-debugging-with-flipper/">blog post</a> about how I was using <a href="https://fbflipper.com/">Flipper</a> as one of my favorite development tools. Since then, Android Studio has come a long way adding tons of features like a new <a href="https://androidstudio.googleblog.com/2022/03/android-studio-dolphin-canary-6-now.html">Logcat</a> and <a href="https://developer.android.com/studio/debug/layout-inspector">Layout Inspector</a>.</p>

<p>However, there are often times that you&rsquo;ll need a tool more specific to your own workflow that Android Studio doesn&rsquo;t provide, and that&rsquo;s exactly where Flipper&rsquo;s extensibility really shines. As an example, I&rsquo;d like to go through building a custom plugin for Flipper, similar to one that I&rsquo;ve used on my own projects, that demonstrates how easy it is to get started building these tools.</p>

<!-- more -->


<h2>The Problem</h2>

<p>As most apps grow, there becomes a need to measure app usage and engagement to better understand user behavior. In order to measure that, we often turn to analytics libraries (like <a href="https://firebase.google.com/docs/analytics">Firebase Analytics</a>) to handle this in-app behavior reporting. However, when implementing these client events, it&rsquo;s often helpful to have a quick feedback loop to ensure that the event and associated payload are correct, without having to check an analytics dashboard (which can often take some time to refresh).</p>

<p>Luckily, most analytics libraries (including Firebase) have different solutions for this problem. In the Firebase Analytics library, the recommended debugging method is <a href="https://firebase.google.com/docs/analytics/events?platform=android#view_events_in_the_android_studio_debug_log">to set a property with ADB</a> to log all the events to logcat. This does provide much faster feedback than checking a dashboard, but it&rsquo;s not the most user friendly &ndash; developers need to set the property at the command line, and need to be monitoring logcat for all of the events (and also doesn&rsquo;t offer much of a search/filter function).</p>

<h2>The Solution</h2>

<p>Rather than sticking to plain text in logcat, we can build a custom Flipper plugin that will display our analytics events in a filterable table. Most Flipper plugins are comprised of two parts &ndash; a client library that runs as part of your Android app, and a desktop plugin that runs inside Flipper for processing and displaying the data sent by the client.</p>

<p>All of the code for this example can be found in this example <a href="https://github.com/MichaelEvans/FlipperPluginSample">Github Repository</a>.</p>

<h3>Part 1: Client Side</h3>

<p>On the Android side, you&rsquo;ll need to add the <a href="https://fbflipper.com/docs/getting-started/android-native/">Flipper SDK</a> if you haven&rsquo;t already. If you have Flipper set up already, you can skip to the next section. If not, here&rsquo;s a quick run-down:</p>

<h4>Add Flipper</h4>

<p>Add the Gradle dependencies:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dependencies {
</span><span class='line'>  debugImplementation 'com.facebook.flipper:flipper:0.164.0'
</span><span class='line'>  debugImplementation 'com.facebook.soloader:soloader:0.10.4'
</span><span class='line'>
</span><span class='line'>  releaseImplementation 'com.facebook.flipper:flipper-noop:0.164.0'
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Configure your Application class:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class MyApplication : Application {
</span><span class='line'>  override fun onCreate() {
</span><span class='line'>    super.onCreate()
</span><span class='line'>    SoLoader.init(this, false)
</span><span class='line'>
</span><span class='line'>    if (BuildConfig.DEBUG && FlipperUtils.shouldEnableFlipper(this)) {
</span><span class='line'>      val client = AndroidFlipperClient.getInstance(this)
</span><span class='line'>      client.addPlugin(InspectorFlipperPlugin(this, DescriptorMapping.withDefaults()))
</span><span class='line'>      client.start()
</span><span class='line'>    }
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h4>Building the Plugin</h4>

<p>And now it&rsquo;s time to build the plugin! Create a class to hold your plugin logic (For this example, I will call mine <code>AnalyticsPlugin</code>). For the purposes of this sample, it&rsquo;ll be a singleton <code>object</code> for reasons that we&rsquo;ll see later.</p>

<p>We&rsquo;ll subclass the <code>BufferingFlipperPlugin</code> class, rather than <code>FlipperPlugin</code>, because the bufffering version will keep our events in a buffer until the connection is made with the desktop client (so that we don&rsquo;t lose any events).</p>

<p>We need to override <code>getId()</code>, which is how Flipper will correlate our client plugin with the matching desktop plugin, and <code>runInBackground()</code> in order to tell Flipper to keep communicating with the desktop client, even if our plugin isn&rsquo;t the currently in the foreground.</p>

<p>Lastly, we&rsquo;re going to create a <code>reportEvent</code> method, which will send whatever data we want to the server. In this example, we&rsquo;ll send a unique identifier for the event, the event name, and the timestamp that the event occured at. <strong>Note: <code>FlipperObject</code> can even be constructed by using JSON text or a <code>JSONObject</code>!</strong></p>

<p>Here&rsquo;s what our plugin might look like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>object AnalyticsPlugin : BufferingFlipperPlugin() {
</span><span class='line'>
</span><span class='line'>    fun reportEvent(eventName: String) {
</span><span class='line'>        val flipperObject = FlipperObject.Builder()
</span><span class='line'>            .put("id", UUID.randomUUID())
</span><span class='line'>            .put("event", eventName)
</span><span class='line'>            .put("timestamp", Date().toLocaleString())
</span><span class='line'>            .build()
</span><span class='line'>        send("newRow", flipperObject)
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    override fun getId(): String {
</span><span class='line'>        return "org.michaelevans.flipper.analytics"
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    override fun runInBackground(): Boolean {
</span><span class='line'>        return true
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>After we create our plugin, we&rsquo;ll need to go back to our Application class to install our plugin, just like we would with the pre-loaded ones:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>val flipperClient = AndroidFlipperClient.getInstance(this)
</span><span class='line'>  // ...
</span><span class='line'>flipperClient.addPlugin(AnalyticsPlugin)
</span><span class='line'>flipperClient.start()</span></code></pre></td></tr></table></div></figure>


<p>The last thing we need to do is actually call our plugin somewhere. The implementation of this part will depend a lot on the particular implementation of your own app, but for this example we&rsquo;ll have an <code>Analytics</code> class that conditionally logs our events to Flipper in debug builds, and would do some normal production logic otherwise.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Analytics() {
</span><span class='line'>
</span><span class='line'>    private val plugin = AnalyticsPlugin
</span><span class='line'>  
</span><span class='line'>    fun reportEvent(eventName: String) {
</span><span class='line'>        if (BuildConfig.DEBUG) {
</span><span class='line'>            plugin.reportEvent(eventName)
</span><span class='line'>        } else {
</span><span class='line'>            // do normal analytics logic here
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Once that&rsquo;s all done, the client work is complete!</p>

<h3>Part 2: Desktop Side</h3>

<h4>Setup</h4>

<p>In order to build the desktop-side plugin, we&rsquo;ll need to set up our environment. We&rsquo;ll need something called <code>npx</code>, which is a tool to execute Javascript packages. <code>npx</code> can be installed from <a href="https://brew.sh/">Homebrew</a> with <code>brew install npx</code>.</p>

<p>Once <code>npx</code> is installed, run the following command in the directory that you&rsquo;d like to create your plugin in:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npx flipper-pkg init</span></code></pre></td></tr></table></div></figure>


<p>This command will kick off a little bit of a &ldquo;new plugin wizard&rdquo;, asking a few questions about the plugin we&rsquo;ll be creating:</p>

<ol>
<li>Whether the plugin is a &ldquo;client&rdquo; plugin or a &ldquo;device&rdquo; plugin &ndash; our plugin will require our app to communicate, we&rsquo;ll choose <code>client</code>. (Flipper also supports <code>device</code> plugins that don&rsquo;t need any particular app to be running. For example, Logcat provides logs for the <em>entire</em> device, rather than needing any individual app).</li>
<li>An ID. This needs to be the same as the ID we specified in the client code, otherwise Flipper will have no way of matching up the two halves of our plugin.</li>
<li>A title. This is the human readable name of the plugin that will show up in the sidebar.</li>
</ol>


<p>After that, you should be able to <code>cd</code> into the newly created module directory and run <code>yarn watch</code> to have the plugin continuously be compiled when you make changes.</p>

<h4>Building the Plugin</h4>

<p>If you&rsquo;re familiar with JavaScript and React (I&rsquo;m not especially), creating the desktop side of the plugin might be easy. However, if you&rsquo;re <em>not</em> experienced with these tools, Flipper includes some <a href="https://fbflipper.com/docs/extending/flipper-plugin/#createtableplugin">very convenient helpers</a> for building a simple table UI. In this example, that&rsquo;s exactly what we&rsquo;ll be doing &ndash; let&rsquo;s get started!</p>

<p>The init command we ran earlier auto-generated some files, one of which is <code>index.tsx</code> inside the <code>src</code> directory. Majority of the changes we&rsquo;ll need to make will be in this file.</p>

<p>For our table, the first thing we&rsquo;ll need to define is the fields that will be shown in each row:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>type Row = {
</span><span class='line'>  id: string;
</span><span class='line'>  event: string;
</span><span class='line'>  timestamp: Date;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>The next thing we need to do is create something called a <code>DataTableColumn</code>, which tells Flipper how to display our data. Each object defined in this section will map to the columns in our table &ndash; we can optionally provide a <code>title</code> to provide a more meaningful label at the top of the table and a <code>width</code> in either pixels, percent or nothing (which will distribute the space evenly).</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>const columns: DataTableColumn&lt;Row&gt;[] = [
</span><span class='line'>  {
</span><span class='line'>      title: 'Event Name',
</span><span class='line'>    key: 'event'
</span><span class='line'>  },
</span><span class='line'>  {
</span><span class='line'>    key: 'timestamp',
</span><span class='line'>    width: 150
</span><span class='line'>  }
</span><span class='line'>];</span></code></pre></td></tr></table></div></figure>


<p>Lastly, we will use the Flipper <code>createTablePlugin</code> function to glue this all together:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>const {plugin, Component} = createTablePlugin&lt;Row&gt;({
</span><span class='line'>  columns,
</span><span class='line'>  method: 'newRow',
</span><span class='line'>  key: 'id'
</span><span class='line'>});
</span><span class='line'>export {plugin, Component};</span></code></pre></td></tr></table></div></figure>


<p>If a simple table is not what you&rsquo;re looking for, there&rsquo;s <a href="https://fbflipper.com/docs/tutorial/js-custom/">an entire section in the documentation</a> about how to build a custom UI, and even how to write tests for the display logic.</p>

<p>After you have finished with this part, you should be able to open Flipper and see your plugin listed in the &ldquo;Unavailable Plugins&rdquo; display of the Flipper desktop app. Our plugin is considered &ldquo;Unavailable&rdquo; because no currently running application is available to connect to it&hellip;yet.</p>

<p><img class="center" src="http://michaelevans.org/images/2022/09/28/unavailable.jpg" width="800"></p>

<p>Build and launch your Android app and the plugin should now become &ldquo;Disabled&rdquo;.</p>

<p><img class="center" src="http://michaelevans.org/images/2022/09/28/disabled.jpg" width="800"></p>

<p>We can now click &ldquo;+&rdquo; on the plugin row to &ldquo;enable&rdquo; it and start sending those analytics events &ndash; They should start showing up in the Flipper UI immediately!</p>

<p><img class="center" src="http://michaelevans.org/images/2022/09/28/working.jpg" width="800"></p>

<p>Depending on your use-case, your events might not just be a simple string and timestamp. You&rsquo;ll likely have defined some attributes, maybe the ID of an item being viewed, or the level number completed in a game. It would be great if there was a simple way to see all the data that corresponds to an event, right? Conveniently, the Flipper sidebar to show us that information in an easy to read way. All you need to do is click on the row, and a side panel will appear that renders our event as as JSON tree (I added some additional fields as a demo here):</p>

<p><img class="center" src="http://michaelevans.org/images/2022/09/28/sidebar.jpg" width="800"></p>

<h3>Wrap up</h3>

<p>By using the table plugin on the desktop side, searching and filtering behavior all comes for free, which is amazing if your app sends a lot of analytics events!</p>

<p>The code for both the Desktop Plugin and the Android sample app can be found on <a href="https://github.com/MichaelEvans/FlipperPluginSample">Github here</a>.</p>

<p>As this post demonstrates &ndash; the Flipper SDK is pretty flexible and allows you to build all sorts of custom development tools to help ease everday tasks. Come up with an idea for a cool plugin? Send me a <a href="https://twitter.com/m_evans10">tweet</a>, I&rsquo;d love to hear about it!</p>

<p>(Thanks to <a href="https://twitter.com/zarahjutz">Zarah</a> for the editing and feedback for this post!)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Developer Challenge]]></title>
    <link href="http://michaelevans.org/blog/2020/06/21/android-developer-challenge/"/>
    <updated>2020-06-21T23:41:17-04:00</updated>
    <id>http://michaelevans.org/blog/2020/06/21/android-developer-challenge</id>
    <content type="html"><![CDATA[<p>Late last year, Google announced the <a href="https://developer.android.com/dev-challenge">Android Developer Challenge</a>, a contest for Android developers to show off new experiences made possible by on-device Machine Learning. Since then, tons of developers have submitted their ideas and been hard at work developing their apps. Today, the <a href="https://android-developers.googleblog.com/2020/06/dev-challenge-winners.html">winners of the challenge have been announced</a>!</p>

<!-- more -->


<p>I was lucky to get access to a cool trial box that Google sent out, complete with little goodies to try out some of the apps from the winners! Here are some obligatory unboxing photos:</p>

<p><img class="center" src="http://michaelevans.org/images/2020/06/21/box_a.jpg" width="800" height="800"></p>

<p><img class="center" src="http://michaelevans.org/images/2020/06/21/box_b.jpg" width="800" height="800"></p>

<p><img class="center" src="http://michaelevans.org/images/2020/06/21/box_c.jpg" width="800" height="800"></p>

<p>After checking out the cool loot, I downloaded the winning apps to check them out, and wanted to show off some of my favorites.</p>

<h2>Trashly</h2>

<p>The first app I tried was <a href="https://play.google.com/store/apps/details?id=com.epam.mobilelabs.trashly">Trashly</a>. The goal of this app is to make recycling easier by providing up-to-date information about where and how to recycle your items. You can type in any item that you&rsquo;re interested in recycling, but what&rsquo;s cooler (and relevant to the challenge) is that you can use the camera to detect an object and find out 1) if the item is recyclable, and 2) where you can go to recycle it. I tried this with a can of soda, which was instantly recognized:</p>

<p><img class="center" src="http://michaelevans.org/images/2020/06/21/trashly_capture.png" width="800" height="800"></p>

<p><img class="center" src="http://michaelevans.org/images/2020/06/21/trashly_info.png" width="800" height="800"></p>

<p>And was given a map of nearby places that I could take my can to recycle. Very cool and useful!</p>

<p><img class="center" src="http://michaelevans.org/images/2020/06/21/trashly_map.png" width="800" height="800"></p>

<h2>Leepi</h2>

<p>The next app that I tried was <a href="https://play.google.com/store/apps/details?id=com.mangoai.leepi">Leepi</a>. It&rsquo;s a fun, educational app to help users learn American Sign Language. I personally had never learned Sign Language, so this was a really cool way to start! It uses the camera and on-device machine learning to interpret the user&rsquo;s hand positions to verify that they are doing the hand positions and gestures correctly.</p>

<p><img class="center" src="http://michaelevans.org/images/2020/06/21/leepi_a.png" width="800" height="800"></p>

<p><img class="center" src="http://michaelevans.org/images/2020/06/21/leepi_capture.png" width="800" height="800"></p>

<h2>Path Finder</h2>

<p>The last app I wanted to talk about was called <a href="https://play.google.com/store/apps/details?id=com.br.ml.brpathfinder">Path Finder</a>. The gist of this app is to use the camera and machine learning to build a heatmap of obstacles that might be problematic for visually impaired people in public environments. I tried the app out on the streets of New York City and have some screenshots of the results below. I am not sure how useful this would be in practice, but it certainly looks interesting. I would be curious to hear feedback from someone who is visually impaired to hear their thoughts on the presentation format.</p>

<p><img class="center" src="http://michaelevans.org/images/2020/06/21/pathfinder.png" width="800" height="800"></p>

<p>If you&rsquo;re interested in seeing the very cool and interesting things you can do with on-device machine learning, I definitely encourage you to check out these and the rest of the winning apps. And if you&rsquo;re an author of one of these applications, congratulations on a job well done!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Improving App Debugging with Flipper]]></title>
    <link href="http://michaelevans.org/blog/2020/03/10/improving-app-debugging-with-flipper/"/>
    <updated>2020-03-10T20:10:22-04:00</updated>
    <id>http://michaelevans.org/blog/2020/03/10/improving-app-debugging-with-flipper</id>
    <content type="html"><![CDATA[<p>Some time last year, Facebook released a new mobile debugging tool, named <a href="https://fbflipper.com/">Flipper</a>. It&rsquo;s essentially the successor to the widely popular <a href="http://facebook.github.io/stetho/">Stetho</a>. Although after talking to many developers, it seems like this newer tool is relatively unknown.</p>

<p>Like Stetho, Flipper has many built-in features &ndash; including a layout inspector, a database inspector and a network inspector. Unlike Stetho though, Flipper has a very extensible API which allows for tons of customization. Over the next few articles, we&rsquo;re going to take a look at Flipper and its plugins, the APIs it provides, and how we can leverage them to help us debug various parts of our app. This post will focus on getting set up with Flipper, as well as taking a look at two of its most useful default plugins.</p>

<h2>Getting Started</h2>

<p>Getting started with Flipper is really easy:</p>

<ul>
<li><a href="https://fbflipper.com/">Download the desktop client</a>,</li>
<li>Add the dependencies in your build.gradle:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>repositories {
</span><span class='line'>  jcenter()
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>dependencies {
</span><span class='line'>  debugImplementation 'com.facebook.flipper:flipper:0.33.1'
</span><span class='line'>  debugImplementation 'com.facebook.soloader:soloader:0.8.2'
</span><span class='line'>
</span><span class='line'>  releaseImplementation 'com.facebook.flipper:flipper-noop:0.33.1'
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Initialize the Flipper client when your application starts:</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class SampleApplication : Application() {
</span><span class='line'>    override fun onCreate() {
</span><span class='line'>        super.onCreate()
</span><span class='line'>        SoLoader.init(this, false)
</span><span class='line'>
</span><span class='line'>        if (BuildConfig.DEBUG && FlipperUtils.shouldEnableFlipper(this)) {
</span><span class='line'>            val client = AndroidFlipperClient.getInstance(this)
</span><span class='line'>            client.addPlugin(InspectorFlipperPlugin(this, DescriptorMapping.withDefaults()))
</span><span class='line'>            client.start()
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>And that&rsquo;s it! Opening the desktop client should show you an overview of your app with the Inspector plugin configured.</p>

<h2>Inspector Plugin</h2>

<p>The Inspector Plugin is similar to the one found in <a href="https://developer.android.com/studio/debug/layout-inspector">Android Studio 4.0</a>, but has a few neat features. I like it because it operates in real-time, and doesn&rsquo;t require any attaching to process in Studio every time you want to inspect a layout.</p>

<p>Another thing you can do in the Layout Inspector that&rsquo;s really cool is actually <em>edit</em> properties! Pretty mind blowing to make tweaks in the inspector and watch the views change in realtime. It&rsquo;s really handy for experimenting with changing padding, and text colors. It doesn&rsquo;t actually edit any of your xml files, but this allows you to iterate quickly to make sure everything looks right.</p>

<p>Let&rsquo;s find a view we want to update (like our repository name):</p>

<p><img class="center" src="http://michaelevans.org/images/2020/03/10/inspecting.png" width="800" height="800"></p>

<p><img class="center" src="http://michaelevans.org/images/2020/03/10/selecting.png" width="800" height="800"></p>

<p>We can click on the the color swatch to open a color picker:</p>

<p><img class="center" src="http://michaelevans.org/images/2020/03/10/editing.png" width="800" height="800"></p>

<p>And now when we look over at our device:</p>

<p><img class="center" src="http://michaelevans.org/images/2020/03/10/previewing.png" width="800" height="800"></p>

<p>Neat!</p>

<h2>Database Browser / Plugin</h2>

<p>Something I&rsquo;ve wanted for a long time was a way to view the contents of my database from Android Studio. Right now, if you want to visualize your data or try out some queries &ndash; the best solution is to pull the sqlite database file off your emulator/device and run sqlite locally. But with Flipper, there&rsquo;s a better way!</p>

<p>All we need to do is configure the database plugin, and our tables should show up right away:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>client.addPlugin(DatabasesFlipperPlugin(context))</span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="http://michaelevans.org/images/2020/03/10/database_browser.png" width="800" height="800"></p>

<p>Now we can easily inspect the contents of our tables, and even run queries on the live running application!</p>

<p><img class="center" src="http://michaelevans.org/images/2020/03/10/writing_queries.png" width="800" height="800"></p>

<p>I&rsquo;ve <a href="https://github.com/MichaelEvans/architecture-components-samples/commit/274ea5702cb5f10ea13012ce6d9fc6b6896f471e">pushed a branch</a> of the Github Browser Architecture Component sample with these changes to GitHub if you&rsquo;d like to try it out. Next time we&rsquo;ll take advantage of Flipper&rsquo;s extensibility to create our own plugins to make debugging our app easier!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dropping Columns Like It's Hot]]></title>
    <link href="http://michaelevans.org/blog/2020/02/10/dropping-columns-like-its-hot/"/>
    <updated>2020-02-10T20:03:03-05:00</updated>
    <id>http://michaelevans.org/blog/2020/02/10/dropping-columns-like-its-hot</id>
    <content type="html"><![CDATA[<p>Recently, I was doing some code cleanup and noticed that there were some data in the database that was no longer needed. I think most developers clean up their codebase of deprecated patterns and unused code, but I personally have not done a good job of ensuring that the same cleanup happens for unused columns in my databases.</p>

<p>Dropping tables that are no longer used is pretty easy (especially if you can just use something like Room&rsquo;s <a href="https://developer.android.com/training/data-storage/room/migrating-db-versions">Migrations</a>) but when trying to remove unused columns, I ran into an unexpected problem. I thought to myself, it’s pretty easy to add or rename a column, why would dropping one be any harder? The existing database library I was using already had a convenient &ldquo;drop column&rdquo; method, so I simply called that and tried to run the migration. During the process, I ended up with a <code>ForeignKeyConstraintException</code>! I quickly scanned the schema to see what could have caused that, and didn&rsquo;t see anything obvious. The table I was trying to modify didn&rsquo;t have any foreign keys itself, and the column I was dropping was not a foreign key. Curious to understand what was happening, I started to dig into what this method call was doing.</p>

<!-- more -->


<p>I saw that although you can add a column with SQLite&rsquo;s <code>ALTER TABLE ${tableName} ADD COLUMN ${columnName} ${columnType}</code> statements, there&rsquo;s <a href="https://www.sqlite.org/lang_altertable.html">no support for removing a column out of the box</a>. The library method I was using emulates dropping a column by doing the following:</p>

<ol>
<li>Rename the existing table into <code>$tablename_old</code></li>
<li>Creating a new table with all the existing columns, minus the one we don’t want</li>
<li>Copying all the data from <code>$tablename_old</code> to <code>$tablename</code></li>
<li>Dropping <code>$tablename_old</code>, since we don’t need it anymore.</li>
</ol>


<p>This process seems to make a lot of sense &ndash; since we can’t remove the column on its own, let’s just make a new table with the structure we want and copy over the data that we want to keep. So why does this process not work?</p>

<h3>The Gotcha!</h3>

<p>If you read the SQlite documentation linked above closely, you might have noticed an important note:</p>

<blockquote><p>Compatibility Note: The behavior of ALTER TABLE when renaming a table was enhanced in versions 3.25.0 (2018-09-15) and 3.26.0 (2018-12-01) in order to carry the rename operation forward into triggers and views that reference the renamed table. This is considered an improvement. Applications that depend on the older (and arguably buggy) behavior can use the PRAGMA legacy_alter_table=ON statement or the SQLITE_DBCONFIG_LEGACY_ALTER_TABLE configuration parameter on sqlite3_db_config() interface to make ALTER TABLE RENAME behave as it did prior to version 3.25.0.</p></blockquote>

<p>What this means is that when we use <code>ALTER</code> to rename a table, any triggers/views/foreign keys that reference that table will now be updated to support it. As an example:</p>

<p>Let&rsquo;s say we had a table <code>users</code> with a few columns: <code>id</code>, <code>first_name</code>, <code>last_name</code>, and <code>age</code>, and we had a table <code>orders</code> with the columns <code>id</code>, <code>order_number</code> and <code>user_id</code>, where <code>user_id</code> was a foreign key back to the <code>users</code> table. It might look a little like this:</p>

<p><img class="center" src="http://michaelevans.org/images/2020/02/10/before_step1.png" width="400" height="400"></p>

<p>Following the steps above, let&rsquo;s try to drop the <code>age</code> column. First we&rsquo;ll rename the existing table into <code>users_old</code>, and create the new table:</p>

<p><img class="center" src="http://michaelevans.org/images/2020/02/10/before_step2.png" width="400" height="600"></p>

<p>Then we copy the the data, and try to drop <code>users_old</code>, and this is where we run into the exception. The grey line in the diagram is our foreign key association, and that will no longer be valid because the <code>orders</code> table will be trying to reference <code>users_old</code> which we are trying to drop.</p>

<p><img class="center" src="http://michaelevans.org/images/2020/02/10/before_step3.png" width="400" height="600"></p>

<p>Fortunately the documentation lists out a better sequence of steps to perform this operation:</p>

<ol>
<li>Create the new table</li>
<li>Copy over the data we need</li>
<li>Drop old table</li>
<li>Rename the new table with the name of the old table</li>
</ol>


<p>Looking at it more visually &ndash; we&rsquo;ll start with the same tables and create a new table named <code>users_new</code> to hold the preserved data:</p>

<p><img class="center" src="http://michaelevans.org/images/2020/02/10/after_step1.png" width="400" height="600"></p>

<p>Then we&rsquo;ll do the data copy, drop, the old table (but the foreign key relation will still reference the <code>users</code> table), and rename <code>users_new</code> to <code>users</code>.</p>

<p><img class="center" src="http://michaelevans.org/images/2020/02/10/after_step2.png" width="400" height="400"></p>

<p>These steps will ensure that no existing links (views, triggers, etc) are modified. That way when we rename the table in the final step, the existing links will end up referencing the new table already.</p>

<p><img class="center" src="http://michaelevans.org/images/2020/02/10/after_step3.png" width="400" height="400"></p>

<p>TLDR:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>override fun migrate(database: SupportSQLiteDatabase) {
</span><span class='line'>    // Create the new table
</span><span class='line'>    database.execSQL("CREATE TABLE users_new (id INTEGER, first_name TEXT, last_name TEXT, PRIMARY KEY(userid))")
</span><span class='line'>    // Copy the data
</span><span class='line'>    database.execSQL("INSERT INTO users_new (id, first_name, last_name) SELECT id, first_name, last_name FROM users")
</span><span class='line'>    // Remove the old table
</span><span class='line'>    database.execSQL("DROP TABLE users")
</span><span class='line'>    // Change the table name to the correct one
</span><span class='line'>    database.execSQL("ALTER TABLE users_new RENAME TO users")
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Hopefully this discovery helps you better clean up those unused columns in your databases!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stop Repeating Yourself: Sharing test code across Android Modules]]></title>
    <link href="http://michaelevans.org/blog/2019/09/21/stop-repeating-yourself-sharing-test-code-across-android-modules/"/>
    <updated>2019-09-21T21:34:52-04:00</updated>
    <id>http://michaelevans.org/blog/2019/09/21/stop-repeating-yourself-sharing-test-code-across-android-modules</id>
    <content type="html"><![CDATA[<p>It seems like nowadays, the <a href="https://jeroenmols.com/blog/2019/03/06/modularizationwhy/">best advice</a> <a href="https://robinhood.engineering/breaking-up-the-app-module-monolith-the-story-of-robinhoods-android-app-707fb993a50c">is to modularize</a> <a href="https://www.youtube.com/watch?v=PZBg5DIzNww">your Android app</a>. It&rsquo;s a great suggestion for many reasons, including but not limited to:</p>

<pre><code>- improved build performance
- enables on-demand delivery
- pushes you to build reusable, discrete components
</code></pre>

<p>Sounds great, right? Are there any downsides? There is one in particular which has been a a pain point for many.</p>

<p>Often times when you&rsquo;re writing tests, you&rsquo;ll want to use some <a href="https://testing.googleblog.com/2013/07/testing-on-toilet-know-your-test-doubles.html">test doubles</a> like fakes or fixtures in order to help simulate the system under test. Maybe you have a <code>FakeUser</code> instance that you use in your tests to avoid having to mock a <code>User</code> every time your test calls for one. Generally these classes live alongside tests in <code>src/test</code> directories and are used to test out your code within a module.</p>

<p>For example, maybe you have a model object like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public class User {
</span><span class='line'>    private final String firstName;
</span><span class='line'>    private final String lastName;
</span><span class='line'>
</span><span class='line'>    public User(String firstName, String lastName) {
</span><span class='line'>        this.firstName = firstName;
</span><span class='line'>        this.lastName = lastName;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    public String getFirstName() {
</span><span class='line'>        return firstName;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    public String getLastName() {
</span><span class='line'>        return lastName;
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>You might have some code in <code>src/test</code> that creates a bunch of fake users for your tests like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class TheOfficeFixtures {
</span><span class='line'>        public static User manager = new User("Michael", "Scott");
</span><span class='line'>        public static User assistantToTheRegionalManager = new User("Dwight", "Schrute");
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>This works great if you&rsquo;re testing code <em>within</em> a module, but as soon as you&rsquo;d like to use these fake users in other modules, you&rsquo;ll note that these classes aren&rsquo;t shared!</p>

<p>This code can&rsquo;t be shared between modules because Gradle doesn&rsquo;t expose the output of your test source set as a build artifact. There are all kinds of solutions for this problem out there, including <a href="https://treatwell.engineering/mock-factory-for-android-testing-in-multi-module-system-7654f45808be">creating a special module for all your fixtures</a>, and using <a href="https://stackoverflow.com/questions/5644011/multi-project-test-dependencies-with-gradle">gradle dependency hacks</a> to wire up source sets.</p>

<p>However, that&rsquo;s not necessary anymore! As of version 5.6, Gradle now ships a new &lsquo;test-fixtures&rsquo; plugin! This plugin creates a new <code>testFixtures</code> source set, and configures that source set so that:</p>

<pre><code>- classes in this set can see the main source set classes
- test sources can see the test fixtures classes
</code></pre>

<h3>Using the Plugin</h3>

<p>You can apply the <code>java-test-fixtures</code> plugin in your build.gradle script:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>plugins {
</span><span class='line'>    id 'java-test-fixtures'
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>This plugin will define the necessary source set, and handle all the wiring up of test artifacts. We can now  move those test fixtures from <code>src/test/java</code> to <code>src/testFixtures/java</code>, and that&rsquo;s it! These classes will be ready to be consumed by other modules.</p>

<h3>Wiring it all together</h3>

<p>Finally, we need to use a special keyword to pull these new fixtures in as a dependency for our tests. In our  gradle configuration, we add a test dependency (either API or Implementation) like so:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dependencies {
</span><span class='line'>    testImplementation(testFixtures(project(":lib")))
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>And that&rsquo;s it! Our other module can now consume these test fixtures without any sort of intermediate modules or workarounds.</p>

<p>If you&rsquo;d like to check out the complete configuration with examples sharing fixtures between both Kotlin and Java modules to a shared &ldquo;app&rdquo; module, I&rsquo;ve uploaded a sample project demonstrating how to use this new configuration <a href="https://github.com/MichaelEvans/TestFixturesExample">here</a>.</p>

<h2>Important Caveat</h2>

<p>It&rsquo;s important to note that this feature is currently only available with the <code>java-library</code> plugin, and has limited functionality in Kotlin modules, and not yet available for Android modules. There are currently feature requests on <a href="https://youtrack.jetbrains.com/issue/KT-33877">YouTrack</a> and the <a href="https://issuetracker.google.com/issues/139438142">Android Issue Tracker</a> to take advantage of this new functionality.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hands on with ViewPager2]]></title>
    <link href="http://michaelevans.org/blog/2019/02/07/hands-on-with-viewpager2/"/>
    <updated>2019-02-07T21:38:07-05:00</updated>
    <id>http://michaelevans.org/blog/2019/02/07/hands-on-with-viewpager2</id>
    <content type="html"><![CDATA[<p>Today Google released their alpha of <a href="https://developer.android.com/jetpack/androidx/releases/viewpager2#1.0.0-alpha01">ViewPager2</a>, a signal of the nail in the coffin for the original ViewPager, originally <a href="https://android-developers.googleblog.com/2011/08/horizontal-view-swiping-with-viewpager.html">released in 2011</a>!</p>

<p>Since then, I think it&rsquo;s safe to say that most developers have needed to make a ViewPager. Despite how prolific it is, it certainly isn&rsquo;t the most straightforward widget to include. I think we all have at least once wondered whether we should use a <code>FragmentPagerAdapter</code> or a <code>FragmentStatePagerAdapter</code>. Or wondered if we can use a <a href="https://www.bignerdranch.com/blog/viewpager-without-fragments/">ViewPager <em>without</em> Fragments</a>.</p>

<p>And API confusion aside, we&rsquo;ve still had long standing, feature requests. <a href="https://issuetracker.google.com/issues/36973591">RTL support</a>? <a href="https://issuetracker.google.com/issues/36952939">Vertical orientation</a>? There are numerous <a href="https://github.com/duolingo/rtl-viewpager">open source</a> <a href="https://github.com/kaelaela/VerticalViewPager">solutions</a> for these, but nothing official from the support library (now AndroidX)&hellip;until now!</p>

<p>Let&rsquo;s dive in and try to set up ViewPager2! You&rsquo;ll need your project configured with AndroidX already, as well as supporting minSdkVersion 14 or higher.</p>

<!-- more -->


<p>The first thing we&rsquo;ll need to do is add the library to our build.gradle dependencies.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>implementation 'androidx.viewpager2:viewpager2:1.0.0-alpha01'</span></code></pre></td></tr></table></div></figure>


<p>If you&rsquo;re familiar with RecyclerView, setting up ViewPager2 will be very familiar. We start off by creating an adapter:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class CheesePagerAdapter(private val cheeseStrings: Array&lt;String&gt;) : RecyclerView.Adapter&lt;CheeseViewHolder&gt;() {
</span><span class='line'>    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): CheeseViewHolder {
</span><span class='line'>        return CheeseViewHolder(LayoutInflater.from(parent.context).inflate(R.layout.cheese_list_item, parent, false))
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    override fun onBindViewHolder(holder: CheeseViewHolder, position: Int) {
</span><span class='line'>        holder.cheeseName.text = cheeseStrings[position]
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    override fun getItemCount() = cheeseStrings.size
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>and pair it with a RecyclerView.ViewHolder.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class CheeseViewHolder(view: View) : RecyclerView.ViewHolder(view) {
</span><span class='line'>
</span><span class='line'>    val cheeseName: TextView = view.findViewById(R.id.cheese_name)
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Finally, just like RecyclerView, we set the adapter of our ViewPager2 to be an instance of the RecyclerView adapter. However, you&rsquo;ll note that there&rsquo;s no need for a LayoutManager.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>viewPager.adapter = CheesePagerAdapter(Cheeses.CheeseStrings)</span></code></pre></td></tr></table></div></figure>


<p>And with that, we have a working ViewPager2!</p>

<p><img class="center" src="http://michaelevans.org/images/2019/02/07/Horizontal.gif" width="600" height="600" title="Horizontal ViewPager2" ></p>

<p>We can even set the orientation to scroll vertically with just one line:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>viewPager.orientation = ViewPager2.ORIENTATION_VERTICAL</span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="http://michaelevans.org/images/2019/02/07/Vertical.gif" width="600" height="600" title="Vertical ViewPager2" ></p>

<p>Based on the release notes there are a lot of issues left to fix before this moves to a final release &ndash; but this is a long awaited update for one of those oldest support library components.</p>

<p>The sample code for this post can be found <a href="https://github.com/MichaelEvans/ViewPager2Sample">here</a>. Thanks to Chris Banes&#8217; <a href="https://github.com/chrisbanes/cheesesquare">CheeseSquare</a> for the sample data for this demo!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Enabling Night Mode on Android Nougat]]></title>
    <link href="http://michaelevans.org/blog/2016/08/23/enabling-night-mode-on-android-nougat/"/>
    <updated>2016-08-23T18:27:01-04:00</updated>
    <id>http://michaelevans.org/blog/2016/08/23/enabling-night-mode-on-android-nougat</id>
    <content type="html"><![CDATA[<p>If you&rsquo;re like me, you loved the <a href="http://www.androidpolice.com/2016/03/09/android-n-feature-spotlight-night-mode-is-back-with-expanded-features-including-red-filter-and-brightness/">Night Mode feature</a> that was added to the Nougat Developer Preview a few months ago. You might have been disappointed when you found out that it was missing in later preview builds, and was probably going to be removed <a href="https://www.reddit.com/r/androiddev/comments/4tm8i6/were_on_the_android_engineering_team_and_built/d5igc5t">because it wasn&rsquo;t ready</a>.</p>

<p>When the source code for Nougat was released this morning, my friend <a href="https://twitter.com/vishnurajeevan">Vishnu</a> found this interesting snippet in the <a href="https://android.googlesource.com/platform/frameworks/base/+/android-7.0.0_r1/packages/SystemUI/src/com/android/systemui/tuner/TunerActivity.java#42">SystemUI source</a> (better known to end users as the System UI Tuner):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">boolean</span> <span class="n">showNightMode</span> <span class="o">=</span> <span class="n">getIntent</span><span class="o">().</span><span class="na">getBooleanExtra</span><span class="o">(</span>
</span><span class='line'>    <span class="n">NightModeFragment</span><span class="o">.</span><span class="na">EXTRA_SHOW_NIGHT_MODE</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
</span><span class='line'><span class="kd">final</span> <span class="n">PreferenceFragment</span> <span class="n">fragment</span> <span class="o">=</span> <span class="n">showNightMode</span> <span class="o">?</span> <span class="k">new</span> <span class="n">NightModeFragment</span><span class="o">()</span>
</span><span class='line'>    <span class="o">:</span> <span class="n">showDemoMode</span> <span class="o">?</span> <span class="k">new</span> <span class="n">DemoModeFragment</span><span class="o">()</span>
</span><span class='line'>    <span class="o">:</span> <span class="k">new</span> <span class="n">TunerFragment</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Long story short, if you pass the right extras to this activity, and you&rsquo;ll get access to the Night Mode settings (as well as the infamous Quick Tile!).</p>

<p>Fortunately for us, this is pretty trivial to accomplish with <code>adb</code> via <code>adb -d shell am start  --ez show_night_mode true com.android.systemui/.tuner.TunerActivity</code>, but not everyone who wants this feature is familiar with <code>adb</code>. So I published an app to the Play Store that does exactly that &ndash; click one button, and get access to those settings! You can find the app on the Play Store <a href="https://play.google.com/store/apps/details?id=org.michaelevans.nightmodeenabler">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Build Types with the Google Services Gradle Plugin]]></title>
    <link href="http://michaelevans.org/blog/2016/03/31/using-build-types-with-the-google-services-gradle-plugin/"/>
    <updated>2016-03-31T21:11:55-04:00</updated>
    <id>http://michaelevans.org/blog/2016/03/31/using-build-types-with-the-google-services-gradle-plugin</id>
    <content type="html"><![CDATA[<p>If you want to integrate your Android app with most of Google Play Services nowadays, you&rsquo;ll find that you are instructed to set up the <a href="https://developers.google.com/android/guides/google-services-plugin">Google Services Gradle plugin</a> to handle configuring dependencies. The plugin allows you to drop a JSON file into your project, and then the plugin will do a bunch of the configuration for your project, such as handling the API keys.</p>

<p>This is all well and good—unless you&rsquo;re like me (<a href="https://github.com/googlesamples/google-services/issues/54">and countless others</a>) and want to use a different configuration for your debug and release builds. This would be useful, as an example, if you use Google Play Services for GCM and would like to have development builds recieve pushes from non-production systems.</p>

<p>It seems that the plugin is configured in such a way that it supports build flavors, but it does not yet support build types. However, with a little Gradle magic, we can hack that support in.</p>

<!-- more -->


<p><strong>Disclaimer: This approach worked for me—but as with any hack, it is subject to break.</strong></p>

<p>So how can we go about doing this? We want to put the debug JSON file into the root of our app module during debug builds and use the release one for release builds. If you don&rsquo;t do that, or if you attempt to put it in <code>app/debug</code> and <code>app/release</code>, you&rsquo;ll get an error that says <code>File google-services.json is missing from module root folder. The Google Services Plugin cannot function without it</code>.</p>

<p>This error is thrown by a task named <code>process{VariantName}GoogleServices</code>. What we could do to solve this is swap the file in before that task is run! Using a little Groovy magic, I came up with this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">android</span><span class="o">.</span><span class="na">applicationVariants</span><span class="o">.</span><span class="na">all</span> <span class="o">{</span> <span class="n">variant</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="kt">def</span> <span class="n">hackTask</span> <span class="o">=</span> <span class="n">task</span><span class="o">(</span><span class="s2">&quot;hackGps${variant.name.capitalize()}&quot;</span><span class="o">)</span> <span class="o">&lt;&lt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">copy</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">from</span> <span class="n">rootProject</span><span class="o">.</span><span class="na">file</span><span class="o">(</span><span class="s2">&quot;config/${variant.buildType.name}/google-services.json&quot;</span><span class="o">)</span>
</span><span class='line'>            <span class="n">into</span> <span class="s2">&quot;${projectDir}&quot;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="kt">def</span> <span class="n">googleTask</span> <span class="o">=</span> <span class="n">tasks</span><span class="o">.</span><span class="na">findByName</span><span class="o">(</span><span class="s2">&quot;process${variant.name.capitalize()}GoogleServices&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="n">googleTask</span><span class="o">.</span><span class="na">dependsOn</span> <span class="n">hackTask</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>For each one of your variants, this code will create a new task &ndash; <code>hackGps{VariantName}</code>, which copies a <code>google-services.json</code> file from a <code>config</code> directory into the root of your app module. Then it finds the corresponding Google Services task, and hooks itself in to run right before that! Now when you assemble your application, the right <code>google-services.json</code> file will be in the right place, ready to be picked up by the plugin.</p>

<p><em>You might also want to .gitignore the <code>app/google-services.json</code> file, so that you don&rsquo;t keep committing the changed file to git</em></p>

<p>Hopefully Google will fix this issue in an upcoming release of the Google Services plugin, but until then &ndash; this technique should work!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Changelog for N Support Libraries]]></title>
    <link href="http://michaelevans.org/blog/2016/03/09/changelog-for-n-support-libraries/"/>
    <updated>2016-03-09T19:38:46-05:00</updated>
    <id>http://michaelevans.org/blog/2016/03/09/changelog-for-n-support-libraries</id>
    <content type="html"><![CDATA[<p>Pssst! If you&rsquo;re an Android developer, you might not have heard yet&hellip;the <a href="http://android-developers.blogspot.com/2016/03/first-preview-of-android-n-developer.html">N Preview started today</a>! As part of the festivities, a new alpha version of the support libraries was released. There was no changelog that I could find, so I decided to make one. Here&rsquo;s what has changed (so far) in the public API of a few of these libraries:</p>

<!-- more -->


<h2>Support-V4:</h2>

<div><script src='https://gist.github.com/5d7c55382198640345dc.js?file=support-v4.diff'></script>
<noscript><pre><code>diff -U 0 -N support-v4-23.2.0_df13b086/android.support.v4.app.FragmentController support-v4-24.0.0-alpha1_41849fd4/android.support.v4.app.FragmentController
--- support-v4-23.2.0_df13b086/android.support.v4.app.FragmentController    2016-03-09 19:28:24.000000000 -0500
+++ support-v4-24.0.0-alpha1_41849fd4/android.support.v4.app.FragmentController 2016-03-09 19:28:24.000000000 -0500
@@ -11,0 +12 @@
+  public void restoreAllState(android.os.Parcelable, android.support.v4.app.FragmentManagerNonConfig);
@@ -12,0 +14 @@
+  public android.support.v4.app.FragmentManagerNonConfig retainNestedNonConfig();
diff -U 0 -N support-v4-23.2.0_df13b086/android.support.v4.app.FragmentManagerNonConfig support-v4-24.0.0-alpha1_41849fd4/android.support.v4.app.FragmentManagerNonConfig
--- support-v4-23.2.0_df13b086/android.support.v4.app.FragmentManagerNonConfig  1969-12-31 19:00:00.000000000 -0500
+++ support-v4-24.0.0-alpha1_41849fd4/android.support.v4.app.FragmentManagerNonConfig   2016-03-09 19:28:24.000000000 -0500
@@ -0,0 +1,2 @@
+public class android.support.v4.app.FragmentManagerNonConfig {
+}
diff -U 0 -N support-v4-23.2.0_df13b086/android.support.v4.app.FragmentTransaction support-v4-24.0.0-alpha1_41849fd4/android.support.v4.app.FragmentTransaction
--- support-v4-23.2.0_df13b086/android.support.v4.app.FragmentTransaction   2016-03-09 19:28:24.000000000 -0500
+++ support-v4-24.0.0-alpha1_41849fd4/android.support.v4.app.FragmentTransaction    2016-03-09 19:28:24.000000000 -0500
@@ -34,0 +35,2 @@
+  public abstract void commitNow();
+  public abstract void commitNowAllowingStateLoss();
diff -U 0 -N support-v4-23.2.0_df13b086/android.support.v4.content.ContextCompat support-v4-24.0.0-alpha1_41849fd4/android.support.v4.content.ContextCompat
--- support-v4-23.2.0_df13b086/android.support.v4.content.ContextCompat 2016-03-09 19:28:24.000000000 -0500
+++ support-v4-24.0.0-alpha1_41849fd4/android.support.v4.content.ContextCompat  2016-03-09 19:28:24.000000000 -0500
@@ -13,0 +14,2 @@
+  public static android.content.Context createDeviceEncryptedStorageContext(android.content.Context);
+  public static boolean isDeviceEncryptedStorage(android.content.Context);
diff -U 0 -N support-v4-23.2.0_df13b086/android.support.v4.content.res.TypedArrayUtils support-v4-24.0.0-alpha1_41849fd4/android.support.v4.content.res.TypedArrayUtils
--- support-v4-23.2.0_df13b086/android.support.v4.content.res.TypedArrayUtils   2016-03-09 19:28:24.000000000 -0500
+++ support-v4-24.0.0-alpha1_41849fd4/android.support.v4.content.res.TypedArrayUtils    2016-03-09 19:28:24.000000000 -0500
@@ -8,0 +9 @@
+  public static int getAttr(android.content.Context, int, int);
diff -U 0 -N support-v4-23.2.0_df13b086/android.support.v4.media.session.IMediaSession support-v4-24.0.0-alpha1_41849fd4/android.support.v4.media.session.IMediaSession
--- support-v4-23.2.0_df13b086/android.support.v4.media.session.IMediaSession   2016-03-09 19:28:24.000000000 -0500
+++ support-v4-24.0.0-alpha1_41849fd4/android.support.v4.media.session.IMediaSession    2016-03-09 19:28:24.000000000 -0500
@@ -33,0 +34,4 @@
+  public abstract void prepare() throws android.os.RemoteException;
+  public abstract void prepareFromMediaId(java.lang.String, android.os.Bundle) throws android.os.RemoteException;
+  public abstract void prepareFromSearch(java.lang.String, android.os.Bundle) throws android.os.RemoteException;
+  public abstract void prepareFromUri(android.net.Uri, android.os.Bundle) throws android.os.RemoteException;
diff -U 0 -N support-v4-23.2.0_df13b086/android.support.v4.media.session.MediaControllerCompat$TransportControls support-v4-24.0.0-alpha1_41849fd4/android.support.v4.media.session.MediaControllerCompat$TransportControls
--- support-v4-23.2.0_df13b086/android.support.v4.media.session.MediaControllerCompat$TransportControls 2016-03-09 19:28:24.000000000 -0500
+++ support-v4-24.0.0-alpha1_41849fd4/android.support.v4.media.session.MediaControllerCompat$TransportControls  2016-03-09 19:28:24.000000000 -0500
@@ -1,0 +2,4 @@
+  public abstract void prepare();
+  public abstract void prepareFromMediaId(java.lang.String, android.os.Bundle);
+  public abstract void prepareFromSearch(java.lang.String, android.os.Bundle);
+  public abstract void prepareFromUri(android.net.Uri, android.os.Bundle);
diff -U 0 -N support-v4-23.2.0_df13b086/android.support.v4.media.session.MediaSessionCompat support-v4-24.0.0-alpha1_41849fd4/android.support.v4.media.session.MediaSessionCompat
--- support-v4-23.2.0_df13b086/android.support.v4.media.session.MediaSessionCompat  2016-03-09 19:28:24.000000000 -0500
+++ support-v4-24.0.0-alpha1_41849fd4/android.support.v4.media.session.MediaSessionCompat   2016-03-09 19:28:24.000000000 -0500
@@ -4,3 +3,0 @@
-  public static final java.lang.String ACTION_PLAY_FROM_URI;
-  public static final java.lang.String ACTION_ARGUMENT_URI;
-  public static final java.lang.String ACTION_ARGUMENT_EXTRAS;
diff -U 0 -N support-v4-23.2.0_df13b086/android.support.v4.media.session.MediaSessionCompat$Callback support-v4-24.0.0-alpha1_41849fd4/android.support.v4.media.session.MediaSessionCompat$Callback
--- support-v4-23.2.0_df13b086/android.support.v4.media.session.MediaSessionCompat$Callback 2016-03-09 19:28:24.000000000 -0500
+++ support-v4-24.0.0-alpha1_41849fd4/android.support.v4.media.session.MediaSessionCompat$Callback  2016-03-09 19:28:24.000000000 -0500
@@ -4,0 +5,4 @@
+  public void onPrepare();
+  public void onPrepareFromMediaId(java.lang.String, android.os.Bundle);
+  public void onPrepareFromSearch(java.lang.String, android.os.Bundle);
+  public void onPrepareFromUri(android.net.Uri, android.os.Bundle);
diff -U 0 -N support-v4-23.2.0_df13b086/android.support.v4.media.session.PlaybackStateCompat support-v4-24.0.0-alpha1_41849fd4/android.support.v4.media.session.PlaybackStateCompat
--- support-v4-23.2.0_df13b086/android.support.v4.media.session.PlaybackStateCompat 2016-03-09 19:28:24.000000000 -0500
+++ support-v4-24.0.0-alpha1_41849fd4/android.support.v4.media.session.PlaybackStateCompat  2016-03-09 19:28:24.000000000 -0500
@@ -15,0 +16,4 @@
+  public static final long ACTION_PREPARE;
+  public static final long ACTION_PREPARE_FROM_MEDIA_ID;
+  public static final long ACTION_PREPARE_FROM_SEARCH;
+  public static final long ACTION_PREPARE_FROM_URI;
diff -U 0 -N support-v4-23.2.0_df13b086/android.support.v4.net.TrafficStatsCompat support-v4-24.0.0-alpha1_41849fd4/android.support.v4.net.TrafficStatsCompat
--- support-v4-23.2.0_df13b086/android.support.v4.net.TrafficStatsCompat    2016-03-09 19:28:24.000000000 -0500
+++ support-v4-24.0.0-alpha1_41849fd4/android.support.v4.net.TrafficStatsCompat 2016-03-09 19:28:24.000000000 -0500
@@ -8,0 +9,2 @@
+  public static void tagDatagramSocket(java.net.DatagramSocket) throws java.net.SocketException;
+  public static void untagDatagramSocket(java.net.DatagramSocket) throws java.net.SocketException;
diff -U 0 -N support-v4-23.2.0_df13b086/android.support.v4.os.BuildCompat support-v4-24.0.0-alpha1_41849fd4/android.support.v4.os.BuildCompat
--- support-v4-23.2.0_df13b086/android.support.v4.os.BuildCompat    1969-12-31 19:00:00.000000000 -0500
+++ support-v4-24.0.0-alpha1_41849fd4/android.support.v4.os.BuildCompat 2016-03-09 19:28:24.000000000 -0500
@@ -0,0 +1,3 @@
+public class android.support.v4.os.BuildCompat {
+  public static boolean isAtLeastN();
+}
diff -U 0 -N support-v4-23.2.0_df13b086/android.support.v4.os.UserManagerCompat support-v4-24.0.0-alpha1_41849fd4/android.support.v4.os.UserManagerCompat
--- support-v4-23.2.0_df13b086/android.support.v4.os.UserManagerCompat  1969-12-31 19:00:00.000000000 -0500
+++ support-v4-24.0.0-alpha1_41849fd4/android.support.v4.os.UserManagerCompat   2016-03-09 19:28:24.000000000 -0500
@@ -0,0 +1,6 @@
+public class android.support.v4.os.UserManagerCompat {
+  public android.support.v4.os.UserManagerCompat();
+  public static boolean isUserRunningAndLocked(android.content.Context);
+  public static boolean isUserRunningAndUnlocked(android.content.Context);
+  public static boolean isUserUnlocked(android.content.Context);
+}
diff -U 0 -N support-v4-23.2.0_df13b086/android.support.v4.view.AsyncLayoutInflater support-v4-24.0.0-alpha1_41849fd4/android.support.v4.view.AsyncLayoutInflater
--- support-v4-23.2.0_df13b086/android.support.v4.view.AsyncLayoutInflater  1969-12-31 19:00:00.000000000 -0500
+++ support-v4-24.0.0-alpha1_41849fd4/android.support.v4.view.AsyncLayoutInflater   2016-03-09 19:28:24.000000000 -0500
@@ -0,0 +1,4 @@
+public final class android.support.v4.view.AsyncLayoutInflater {
+  public android.support.v4.view.AsyncLayoutInflater(android.content.Context);
+  public void inflate(int, android.view.ViewGroup, android.support.v4.view.AsyncLayoutInflater$OnInflateFinishedListener);
+}
diff -U 0 -N support-v4-23.2.0_df13b086/android.support.v4.view.AsyncLayoutInflater$OnInflateFinishedListener support-v4-24.0.0-alpha1_41849fd4/android.support.v4.view.AsyncLayoutInflater$OnInflateFinishedListener
--- support-v4-23.2.0_df13b086/android.support.v4.view.AsyncLayoutInflater$OnInflateFinishedListener    1969-12-31 19:00:00.000000000 -0500
+++ support-v4-24.0.0-alpha1_41849fd4/android.support.v4.view.AsyncLayoutInflater$OnInflateFinishedListener 2016-03-09 19:28:24.000000000 -0500
@@ -0,0 +1,3 @@
+public interface android.support.v4.view.AsyncLayoutInflater$OnInflateFinishedListener {
+  public abstract void onInflateFinished(android.view.View, int, android.view.ViewGroup);
+}
diff -U 0 -N support-v4-23.2.0_df13b086/android.support.v4.view.KeyEventCompat support-v4-24.0.0-alpha1_41849fd4/android.support.v4.view.KeyEventCompat
--- support-v4-23.2.0_df13b086/android.support.v4.view.KeyEventCompat   2016-03-09 19:28:24.000000000 -0500
+++ support-v4-24.0.0-alpha1_41849fd4/android.support.v4.view.KeyEventCompat    2016-03-09 19:28:24.000000000 -0500
@@ -10,0 +11 @@
+  public static boolean isCtrlPressed(android.view.KeyEvent);
diff -U 0 -N support-v4-23.2.0_df13b086/android.support.v4.view.MotionEventCompat support-v4-24.0.0-alpha1_41849fd4/android.support.v4.view.MotionEventCompat
--- support-v4-23.2.0_df13b086/android.support.v4.view.MotionEventCompat    2016-03-09 19:28:24.000000000 -0500
+++ support-v4-24.0.0-alpha1_41849fd4/android.support.v4.view.MotionEventCompat 2016-03-09 19:28:24.000000000 -0500
@@ -36,0 +37,2 @@
+  public static final int AXIS_RELATIVE_X;
+  public static final int AXIS_RELATIVE_Y;
@@ -52,0 +55 @@
+  public static final int BUTTON_PRIMARY;
@@ -60,0 +64 @@
+  public static boolean isFromSource(android.view.MotionEvent, int);
@@ -62,0 +67 @@
+  public static int getButtonState(android.view.MotionEvent);
diff -U 0 -N support-v4-23.2.0_df13b086/android.support.v4.view.PointerIconCompat support-v4-24.0.0-alpha1_41849fd4/android.support.v4.view.PointerIconCompat
--- support-v4-23.2.0_df13b086/android.support.v4.view.PointerIconCompat    1969-12-31 19:00:00.000000000 -0500
+++ support-v4-24.0.0-alpha1_41849fd4/android.support.v4.view.PointerIconCompat 2016-03-09 19:28:24.000000000 -0500
@@ -0,0 +1,29 @@
+public final class android.support.v4.view.PointerIconCompat {
+  public static final int STYLE_NULL;
+  public static final int STYLE_ARROW;
+  public static final int STYLE_CONTEXT_MENU;
+  public static final int STYLE_HAND;
+  public static final int STYLE_HELP;
+  public static final int STYLE_WAIT;
+  public static final int STYLE_CELL;
+  public static final int STYLE_CROSSHAIR;
+  public static final int STYLE_TEXT;
+  public static final int STYLE_VERTICAL_TEXT;
+  public static final int STYLE_ALIAS;
+  public static final int STYLE_COPY;
+  public static final int STYLE_NO_DROP;
+  public static final int STYLE_ALL_SCROLL;
+  public static final int STYLE_HORIZONTAL_DOUBLE_ARROW;
+  public static final int STYLE_VERTICAL_DOUBLE_ARROW;
+  public static final int STYLE_TOP_RIGHT_DIAGONAL_DOUBLE_ARROW;
+  public static final int STYLE_TOP_LEFT_DIAGONAL_DOUBLE_ARROW;
+  public static final int STYLE_ZOOM_IN;
+  public static final int STYLE_ZOOM_OUT;
+  public static final int STYLE_GRAB;
+  public static final int STYLE_GRABBING;
+  public static final int STYLE_DEFAULT;
+  public java.lang.Object getPointerIcon();
+  public static android.support.v4.view.PointerIconCompat getSystemIcon(android.content.Context, int);
+  public static android.support.v4.view.PointerIconCompat createCustomIcon(android.graphics.Bitmap, float, float);
+  public static android.support.v4.view.PointerIconCompat loadCustomIcon(android.content.res.Resources, int);
+}
diff -U 0 -N support-v4-23.2.0_df13b086/android.support.v4.view.ViewCompat support-v4-24.0.0-alpha1_41849fd4/android.support.v4.view.ViewCompat
--- support-v4-23.2.0_df13b086/android.support.v4.view.ViewCompat   2016-03-09 19:28:24.000000000 -0500
+++ support-v4-24.0.0-alpha1_41849fd4/android.support.v4.view.ViewCompat    2016-03-09 19:28:24.000000000 -0500
@@ -1 +1 @@
-public final class android.support.v4.view.ViewCompat {
+public class android.support.v4.view.ViewCompat {
@@ -141,0 +142,4 @@
+  public static void setPointerCapture(android.view.View);
+  public static boolean hasPointerCapture(android.view.View);
+  public static void releasePointerCapture(android.view.View);
+  public static void setPointerIcon(android.view.View, android.support.v4.view.PointerIconCompat);
diff -U 0 -N support-v4-23.2.0_df13b086/android.support.v4.view.ViewCompat$FocusDirection support-v4-24.0.0-alpha1_41849fd4/android.support.v4.view.ViewCompat$FocusDirection
--- support-v4-23.2.0_df13b086/android.support.v4.view.ViewCompat$FocusDirection    1969-12-31 19:00:00.000000000 -0500
+++ support-v4-24.0.0-alpha1_41849fd4/android.support.v4.view.ViewCompat$FocusDirection 2016-03-09 19:28:24.000000000 -0500
@@ -0,0 +1,2 @@
+public interface android.support.v4.view.ViewCompat$FocusDirection extends java.lang.annotation.Annotation {
+}
diff -U 0 -N support-v4-23.2.0_df13b086/android.support.v4.view.ViewCompat$FocusRealDirection support-v4-24.0.0-alpha1_41849fd4/android.support.v4.view.ViewCompat$FocusRealDirection
--- support-v4-23.2.0_df13b086/android.support.v4.view.ViewCompat$FocusRealDirection    1969-12-31 19:00:00.000000000 -0500
+++ support-v4-24.0.0-alpha1_41849fd4/android.support.v4.view.ViewCompat$FocusRealDirection 2016-03-09 19:28:24.000000000 -0500
@@ -0,0 +1,2 @@
+public interface android.support.v4.view.ViewCompat$FocusRealDirection extends java.lang.annotation.Annotation {
+}
diff -U 0 -N support-v4-23.2.0_df13b086/android.support.v4.view.ViewCompat$FocusRelativeDirection support-v4-24.0.0-alpha1_41849fd4/android.support.v4.view.ViewCompat$FocusRelativeDirection
--- support-v4-23.2.0_df13b086/android.support.v4.view.ViewCompat$FocusRelativeDirection    1969-12-31 19:00:00.000000000 -0500
+++ support-v4-24.0.0-alpha1_41849fd4/android.support.v4.view.ViewCompat$FocusRelativeDirection 2016-03-09 19:28:24.000000000 -0500
@@ -0,0 +1,2 @@
+public interface android.support.v4.view.ViewCompat$FocusRelativeDirection extends java.lang.annotation.Annotation {
+}
diff -U 0 -N support-v4-23.2.0_df13b086/android.support.v4.view.accessibility.AccessibilityNodeInfoCompat support-v4-24.0.0-alpha1_41849fd4/android.support.v4.view.accessibility.AccessibilityNodeInfoCompat
--- support-v4-23.2.0_df13b086/android.support.v4.view.accessibility.AccessibilityNodeInfoCompat    2016-03-09 19:28:24.000000000 -0500
+++ support-v4-24.0.0-alpha1_41849fd4/android.support.v4.view.accessibility.AccessibilityNodeInfoCompat 2016-03-09 19:28:24.000000000 -0500
@@ -148,0 +149,2 @@
+  public java.lang.CharSequence getRoleDescription();
+  public void setRoleDescription(java.lang.CharSequence);
diff -U 0 -N support-v4-23.2.0_df13b086/android.support.v4.widget.ExploreByTouchHelper support-v4-24.0.0-alpha1_41849fd4/android.support.v4.widget.ExploreByTouchHelper
--- support-v4-23.2.0_df13b086/android.support.v4.widget.ExploreByTouchHelper   2016-03-09 19:28:24.000000000 -0500
+++ support-v4-24.0.0-alpha1_41849fd4/android.support.v4.widget.ExploreByTouchHelper    2016-03-09 19:28:24.000000000 -0500
@@ -6,4 +6,9 @@
-  public boolean dispatchHoverEvent(android.view.MotionEvent);
-  public boolean sendEventForVirtualView(int, int);
-  public void invalidateRoot();
-  public void invalidateVirtualView(int);
+  public final boolean dispatchHoverEvent(android.view.MotionEvent);
+  public final boolean dispatchKeyEvent(android.view.KeyEvent);
+  public final void onFocusChanged(boolean, int, android.graphics.Rect);
+  public final int getAccessibilityFocusedVirtualViewId();
+  public final int getKeyboardFocusedVirtualViewId();
+  public final boolean sendEventForVirtualView(int, int);
+  public final void invalidateRoot();
+  public final void invalidateVirtualView(int);
+  public final void invalidateVirtualView(int, int);
@@ -11 +16,4 @@
-  public void onPopulateNodeForHost(android.support.v4.view.accessibility.AccessibilityNodeInfoCompat);
+  public void onInitializeAccessibilityEvent(android.view.View, android.view.accessibility.AccessibilityEvent);
+  public void onInitializeAccessibilityNodeInfo(android.view.View, android.support.v4.view.accessibility.AccessibilityNodeInfoCompat);
+  public final boolean requestKeyboardFocusForVirtualView(int);
+  public final boolean clearKeyboardFocusForVirtualView(int);
diff -U 0 -N support-v4-23.2.0_df13b086/android.support.v4.widget.FocusStrategy$BoundsAdapter&lt;T&gt; support-v4-24.0.0-alpha1_41849fd4/android.support.v4.widget.FocusStrategy$BoundsAdapter&lt;T&gt;
--- support-v4-23.2.0_df13b086/android.support.v4.widget.FocusStrategy$BoundsAdapter&lt;T&gt;   1969-12-31 19:00:00.000000000 -0500
+++ support-v4-24.0.0-alpha1_41849fd4/android.support.v4.widget.FocusStrategy$BoundsAdapter&lt;T&gt;    2016-03-09 19:28:24.000000000 -0500
@@ -0,0 +1,3 @@
+public interface android.support.v4.widget.FocusStrategy$BoundsAdapter&lt;T&gt; {
+  public abstract void obtainBounds(T, android.graphics.Rect);
+}
diff -U 0 -N support-v4-23.2.0_df13b086/android.support.v4.widget.FocusStrategy$CollectionAdapter&lt;T, support-v4-24.0.0-alpha1_41849fd4/android.support.v4.widget.FocusStrategy$CollectionAdapter&lt;T,
--- support-v4-23.2.0_df13b086/android.support.v4.widget.FocusStrategy$CollectionAdapter&lt;T,  1969-12-31 19:00:00.000000000 -0500
+++ support-v4-24.0.0-alpha1_41849fd4/android.support.v4.widget.FocusStrategy$CollectionAdapter&lt;T,   2016-03-09 19:28:24.000000000 -0500
@@ -0,0 +1,4 @@
+public interface android.support.v4.widget.FocusStrategy$CollectionAdapter&lt;T, V&gt; {
+  public abstract V get(T, int);
+  public abstract int size(T);
+}</code></pre></noscript></div>


<h2>AppCompat:</h2>

<div><script src='https://gist.github.com/5d7c55382198640345dc.js?file=appcompat.diff'></script>
<noscript><pre><code>diff -U 0 -N appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.app.AppCompatDelegateImplV7$PanelFeatureState appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.app.AppCompatDelegateImplV7$PanelFeatureState
--- appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.app.AppCompatDelegateImplV7$PanelFeatureState   1969-12-31 19:00:00.000000000 -0500
+++ appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.app.AppCompatDelegateImplV7$PanelFeatureState    2016-03-09 19:28:22.000000000 -0500
@@ -0,0 +1,5 @@
+public final class android.support.v7.app.AppCompatDelegateImplV7$PanelFeatureState {
+  public boolean qwertyMode;
+  public boolean hasPanelItems();
+  public void clearMenuPresenters();
+}
diff -U 0 -N appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.view.WindowCallbackWrapper appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.view.WindowCallbackWrapper
--- appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.view.WindowCallbackWrapper  2016-03-09 19:28:22.000000000 -0500
+++ appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.view.WindowCallbackWrapper   2016-03-09 19:28:22.000000000 -0500
@@ -25,0 +26 @@
+  public void onProvideKeyboardShortcuts(java.util.List&lt;android.view.KeyboardShortcutGroup&gt;, android.view.Menu);
diff -U 0 -N appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.view.menu.ActionMenuItemView$PopupCallback appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.view.menu.ActionMenuItemView$PopupCallback
--- appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.view.menu.ActionMenuItemView$PopupCallback  2016-03-09 19:28:22.000000000 -0500
+++ appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.view.menu.ActionMenuItemView$PopupCallback   2016-03-09 19:28:22.000000000 -0500
@@ -3 +3 @@
-  public abstract android.support.v7.widget.ListPopupWindow getPopup();
+  public abstract android.support.v7.view.menu.ShowableListMenu getPopup();
diff -U 0 -N appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.view.menu.CascadingMenuPopup$HorizPosition appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.view.menu.CascadingMenuPopup$HorizPosition
--- appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.view.menu.CascadingMenuPopup$HorizPosition  1969-12-31 19:00:00.000000000 -0500
+++ appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.view.menu.CascadingMenuPopup$HorizPosition   2016-03-09 19:28:22.000000000 -0500
@@ -0,0 +1,2 @@
+public interface android.support.v7.view.menu.CascadingMenuPopup$HorizPosition extends java.lang.annotation.Annotation {
+}
diff -U 0 -N appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.view.menu.ListMenuItemView appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.view.menu.ListMenuItemView
--- appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.view.menu.ListMenuItemView  2016-03-09 19:28:22.000000000 -0500
+++ appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.view.menu.ListMenuItemView   2016-03-09 19:28:22.000000000 -0500
@@ -2 +1,0 @@
-  public android.support.v7.view.menu.ListMenuItemView(android.content.Context, android.util.AttributeSet, int);
@@ -3,0 +3 @@
+  public android.support.v7.view.menu.ListMenuItemView(android.content.Context, android.util.AttributeSet, int);
diff -U 0 -N appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.view.menu.MenuAdapter appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.view.menu.MenuAdapter
--- appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.view.menu.MenuAdapter   1969-12-31 19:00:00.000000000 -0500
+++ appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.view.menu.MenuAdapter    2016-03-09 19:28:22.000000000 -0500
@@ -0,0 +1,12 @@
+public class android.support.v7.view.menu.MenuAdapter extends android.widget.BaseAdapter {
+  public android.support.v7.view.menu.MenuAdapter(android.support.v7.view.menu.MenuBuilder, android.view.LayoutInflater, boolean);
+  public boolean getForceShowIcon();
+  public void setForceShowIcon(boolean);
+  public int getCount();
+  public android.support.v7.view.menu.MenuBuilder getAdapterMenu();
+  public android.support.v7.view.menu.MenuItemImpl getItem(int);
+  public long getItemId(int);
+  public android.view.View getView(int, android.view.View, android.view.ViewGroup);
+  public void notifyDataSetChanged();
+  public java.lang.Object getItem(int);
+}
diff -U 0 -N appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.view.menu.MenuBuilder appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.view.menu.MenuBuilder
--- appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.view.menu.MenuBuilder   2016-03-09 19:28:22.000000000 -0500
+++ appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.view.menu.MenuBuilder    2016-03-09 19:28:22.000000000 -0500
@@ -60,0 +61 @@
+  public void setOptionalIconsVisible(boolean);
diff -U 0 -N appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.view.menu.MenuPopupHelper appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.view.menu.MenuPopupHelper
--- appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.view.menu.MenuPopupHelper   2016-03-09 19:28:22.000000000 -0500
+++ appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.view.menu.MenuPopupHelper    2016-03-09 19:28:22.000000000 -0500
@@ -1 +1 @@
-public class android.support.v7.view.menu.MenuPopupHelper implements android.widget.AdapterView$OnItemClickListener,android.view.View$OnKeyListener,android.view.ViewTreeObserver$OnGlobalLayoutListener,android.widget.PopupWindow$OnDismissListener,android.support.v7.view.menu.MenuPresenter {
+public class android.support.v7.view.menu.MenuPopupHelper implements android.support.v7.view.menu.MenuHelper {
@@ -5,0 +6 @@
+  public void setOnDismissListener(android.widget.PopupWindow$OnDismissListener);
@@ -11 +12,2 @@
-  public android.support.v7.widget.ListPopupWindow getPopup();
+  public void show(int, int);
+  public android.support.v7.view.menu.MenuPopup getPopup();
@@ -12,0 +15 @@
+  public boolean tryShow(int, int);
@@ -14 +16,0 @@
-  public void onDismiss();
@@ -16,15 +18 @@
-  public void onItemClick(android.widget.AdapterView&lt;?&gt;, android.view.View, int, long);
-  public boolean onKey(android.view.View, int, android.view.KeyEvent);
-  public void onGlobalLayout();
-  public void initForMenu(android.content.Context, android.support.v7.view.menu.MenuBuilder);
-  public android.support.v7.view.menu.MenuView getMenuView(android.view.ViewGroup);
-  public void updateMenuView(boolean);
-  public void setCallback(android.support.v7.view.menu.MenuPresenter$Callback);
-  public boolean onSubMenuSelected(android.support.v7.view.menu.SubMenuBuilder);
-  public void onCloseMenu(android.support.v7.view.menu.MenuBuilder, boolean);
-  public boolean flagActionItems();
-  public boolean expandItemActionView(android.support.v7.view.menu.MenuBuilder, android.support.v7.view.menu.MenuItemImpl);
-  public boolean collapseItemActionView(android.support.v7.view.menu.MenuBuilder, android.support.v7.view.menu.MenuItemImpl);
-  public int getId();
-  public android.os.Parcelable onSaveInstanceState();
-  public void onRestoreInstanceState(android.os.Parcelable);
+  public void setPresenterCallback(android.support.v7.view.menu.MenuPresenter$Callback);
diff -U 0 -N appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.view.menu.ShowableListMenu appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.view.menu.ShowableListMenu
--- appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.view.menu.ShowableListMenu  1969-12-31 19:00:00.000000000 -0500
+++ appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.view.menu.ShowableListMenu   2016-03-09 19:28:22.000000000 -0500
@@ -0,0 +1,6 @@
+public interface android.support.v7.view.menu.ShowableListMenu {
+  public abstract void show();
+  public abstract void dismiss();
+  public abstract boolean isShowing();
+  public abstract android.widget.ListView getListView();
+}
diff -U 0 -N appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.widget.AppCompatSeekBar appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.widget.AppCompatSeekBar
--- appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.widget.AppCompatSeekBar 2016-03-09 19:28:22.000000000 -0500
+++ appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.widget.AppCompatSeekBar  2016-03-09 19:28:22.000000000 -0500
@@ -4,0 +5 @@
+  public void jumpDrawablesToCurrentState();
diff -U 0 -N appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.widget.ForwardingListener appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.widget.ForwardingListener
--- appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.widget.ForwardingListener   1969-12-31 19:00:00.000000000 -0500
+++ appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.widget.ForwardingListener    2016-03-09 19:28:22.000000000 -0500
@@ -0,0 +1,5 @@
+public abstract class android.support.v7.widget.ForwardingListener implements android.view.View$OnTouchListener {
+  public android.support.v7.widget.ForwardingListener(android.view.View);
+  public abstract android.support.v7.view.menu.ShowableListMenu getPopup();
+  public boolean onTouch(android.view.View, android.view.MotionEvent);
+}
diff -U 0 -N appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.widget.ListPopupWindow appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.widget.ListPopupWindow
--- appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.widget.ListPopupWindow  2016-03-09 19:28:22.000000000 -0500
+++ appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.widget.ListPopupWindow   2016-03-09 19:28:22.000000000 -0500
@@ -1 +1 @@
-public class android.support.v7.widget.ListPopupWindow {
+public class android.support.v7.widget.ListPopupWindow implements android.support.v7.view.menu.ShowableListMenu {
@@ -33,0 +34 @@
+  public void setEpicenterBounds(android.graphics.Rect);
diff -U 0 -N appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.widget.ListPopupWindow$ForwardingListener appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.widget.ListPopupWindow$ForwardingListener
--- appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.widget.ListPopupWindow$ForwardingListener   2016-03-09 19:28:22.000000000 -0500
+++ appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.widget.ListPopupWindow$ForwardingListener    1969-12-31 19:00:00.000000000 -0500
@@ -1,5 +0,0 @@
-public abstract class android.support.v7.widget.ListPopupWindow$ForwardingListener implements android.view.View$OnTouchListener {
-  public android.support.v7.widget.ListPopupWindow$ForwardingListener(android.view.View);
-  public abstract android.support.v7.widget.ListPopupWindow getPopup();
-  public boolean onTouch(android.view.View, android.view.MotionEvent);
-}
diff -U 0 -N appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.widget.MenuItemHoverListener appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.widget.MenuItemHoverListener
--- appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.widget.MenuItemHoverListener    1969-12-31 19:00:00.000000000 -0500
+++ appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.widget.MenuItemHoverListener 2016-03-09 19:28:22.000000000 -0500
@@ -0,0 +1,4 @@
+public interface android.support.v7.widget.MenuItemHoverListener {
+  public abstract void onItemHoverExit(android.support.v7.view.menu.MenuBuilder, android.view.MenuItem);
+  public abstract void onItemHoverEnter(android.support.v7.view.menu.MenuBuilder, android.view.MenuItem);
+}
diff -U 0 -N appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.widget.MenuPopupWindow appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.widget.MenuPopupWindow
--- appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.widget.MenuPopupWindow  1969-12-31 19:00:00.000000000 -0500
+++ appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.widget.MenuPopupWindow   2016-03-09 19:28:22.000000000 -0500
@@ -0,0 +1,9 @@
+public class android.support.v7.widget.MenuPopupWindow extends android.support.v7.widget.ListPopupWindow implements android.support.v7.widget.MenuItemHoverListener {
+  public android.support.v7.widget.MenuPopupWindow(android.content.Context, android.util.AttributeSet, int, int);
+  public void setEnterTransition(java.lang.Object);
+  public void setExitTransition(java.lang.Object);
+  public void setHoverListener(android.support.v7.widget.MenuItemHoverListener);
+  public void setTouchModal(boolean);
+  public void onItemHoverEnter(android.support.v7.view.menu.MenuBuilder, android.view.MenuItem);
+  public void onItemHoverExit(android.support.v7.view.menu.MenuBuilder, android.view.MenuItem);
+}
diff -U 0 -N appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.widget.MenuPopupWindow$MenuDropDownListView appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.widget.MenuPopupWindow$MenuDropDownListView
--- appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.widget.MenuPopupWindow$MenuDropDownListView 1969-12-31 19:00:00.000000000 -0500
+++ appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.widget.MenuPopupWindow$MenuDropDownListView  2016-03-09 19:28:22.000000000 -0500
@@ -0,0 +1,12 @@
+public class android.support.v7.widget.MenuPopupWindow$MenuDropDownListView extends android.support.v7.widget.DropDownListView {
+  public android.support.v7.widget.MenuPopupWindow$MenuDropDownListView(android.content.Context, boolean);
+  public void setHoverListener(android.support.v7.widget.MenuItemHoverListener);
+  public void clearSelection();
+  public boolean onKeyDown(int, android.view.KeyEvent);
+  public boolean onHoverEvent(android.view.MotionEvent);
+  public boolean hasFocus();
+  public boolean isFocused();
+  public boolean hasWindowFocus();
+  public boolean isInTouchMode();
+  public boolean onForwardedEvent(android.view.MotionEvent, int);
+}
diff -U 0 -N appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.widget.PopupMenu appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.widget.PopupMenu
--- appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.widget.PopupMenu    2016-03-09 19:28:22.000000000 -0500
+++ appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.widget.PopupMenu 2016-03-09 19:28:22.000000000 -0500
@@ -1 +1 @@
-public class android.support.v7.widget.PopupMenu implements android.support.v7.view.menu.MenuBuilder$Callback,android.support.v7.view.menu.MenuPresenter$Callback {
+public class android.support.v7.widget.PopupMenu {
@@ -15,5 +14,0 @@
-  public boolean onMenuItemSelected(android.support.v7.view.menu.MenuBuilder, android.view.MenuItem);
-  public void onCloseMenu(android.support.v7.view.menu.MenuBuilder, boolean);
-  public boolean onOpenSubMenu(android.support.v7.view.menu.MenuBuilder);
-  public void onCloseSubMenu(android.support.v7.view.menu.SubMenuBuilder);
-  public void onMenuModeChange(android.support.v7.view.menu.MenuBuilder);
diff -U 0 -N appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.widget.TintTypedArray appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.widget.TintTypedArray
--- appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.widget.TintTypedArray   2016-03-09 19:28:22.000000000 -0500
+++ appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.widget.TintTypedArray    2016-03-09 19:28:22.000000000 -0500
@@ -3,0 +4 @@
+  public static android.support.v7.widget.TintTypedArray obtainStyledAttributes(android.content.Context, int, int[]);
diff -U 0 -N appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.widget.Toolbar appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.widget.Toolbar
--- appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.widget.Toolbar  2016-03-09 19:28:22.000000000 -0500
+++ appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.widget.Toolbar   2016-03-09 19:28:22.000000000 -0500
@@ -6,0 +7,9 @@
+  public void setTitleMargin(int, int, int, int);
+  public int getTitleMarginStart();
+  public void setTitleMarginStart(int);
+  public int getTitleMarginTop();
+  public void setTitleMarginTop(int);
+  public int getTitleMarginEnd();
+  public void setTitleMarginEnd(int);
+  public int getTitleMarginBottom();
+  public void setTitleMarginBottom(int);</code></pre></noscript></div>


<h2>Design:</h2>

<div><script src='https://gist.github.com/5d7c55382198640345dc.js?file=design.diff'></script>
<noscript><pre><code>diff -U 0 -N design-23.2.0_c138856a/android.support.design.widget.FloatingActionButton design-24.0.0-alpha1_c951a944/android.support.design.widget.FloatingActionButton
--- design-23.2.0_c138856a/android.support.design.widget.FloatingActionButton   2016-03-09 19:28:22.000000000 -0500
+++ design-24.0.0-alpha1_c951a944/android.support.design.widget.FloatingActionButton    2016-03-09 19:28:22.000000000 -0500
@@ -21,0 +22 @@
+  public boolean onTouchEvent(android.view.MotionEvent);</code></pre></noscript></div>


<p>There are no API changes in RecyclerView nor my personal <a href="http://michaelevans.org/blog/2015/07/14/improving-your-code-with-android-support-annotations/">favorite support library</a> &ndash; Support Annotations.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Dagger 1 and Kotlin]]></title>
    <link href="http://michaelevans.org/blog/2016/02/17/using-dagger-1-and-kotlin/"/>
    <updated>2016-02-17T13:43:25-05:00</updated>
    <id>http://michaelevans.org/blog/2016/02/17/using-dagger-1-and-kotlin</id>
    <content type="html"><![CDATA[<p>Unless you&rsquo;ve been hiding from all the news about Android development, you&rsquo;ve <a href="https://medium.com/@CodingDoug/kotlin-android-a-brass-tacks-experiment-part-1-3e5028491bcc#.15w4ypfer">likely</a> <a href="http://antonioleiva.com/kotlin-awesome-tricks-for-android/">heard</a> <a href="http://vishnurajeevan.com/2016/02/13/Using-Kotlin-Extensions-for-Rx-ifying/">about</a> <a href="https://realm.io/news/oredev-jake-wharton-kotlin-advancing-android-dev/">Kotlin</a> (<a href="https://blog.jetbrains.com/kotlin/2016/02/kotlin-1-0-released-pragmatic-language-for-jvm-and-android/">which hit version 1.0 on Monday</a>!). I&rsquo;ve been toying around with it lately (the <a href="https://kotlinlang.org/docs/tutorials/koans.html">Kotlin Koans</a> are a great place to start for a beginner) and wanted to try building an app with it &ndash; that is, until I hit a few road blocks.</p>

<!-- more -->


<p>Personally, I&rsquo;m still a fan of Dagger 1 (or as I refer to it, <a href="https://en.wikipedia.org/wiki/New_Coke#New_Coke_after_Coke_Classic">Dagger Classic</a>), and when I started working on my Kotlin app, that&rsquo;s what I was planning to use. I knew Annotation Processing support was a relatively new addition to Kotlin, so I began to search for some information about how to get Dagger to play nicely with the Kotlin compiler. There&rsquo;s a lot of information about using Dagger 2 with Kotlin but not so much about Dagger Classic. Finally, I stumbled upon <a href="http://www.beyondtechnicallycorrect.com/2015/12/30/android-kotlin-dagger/">this article</a>, which said, &ldquo;Unfortunately, Square’s Dagger 1 does not appear to work with Kotlin while Google’s Dagger 2 does&rdquo;.</p>

<p><em>Bummer.</em></p>

<p>This didn&rsquo;t really deter me, however, because I&rsquo;m stubborn like that. So I proceeded to give it a try with <code>kapt</code><sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> anyway (which seemed like it <em>might</em> do what I want).</p>

<h2>Modules</h2>

<p>The first thing I did was try to create the various Dagger Modules that I&rsquo;d need, which is where I hit my first roadblock. Attempting to compile my module gave the following error:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Error:Modules must not extend from other classes: org.michaelevans.example.AppModule</span></code></pre></td></tr></table></div></figure>


<p>My intial thought was that Kotlin was causing my Module to extend <code>Any</code>, rather than <code>Object</code>. (<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/">Any</a> is the root of the class hierarchy in Kotlin, similar to the way that Object is the root of the Java class hierarchy.) Upon closer inspection, that didn&rsquo;t seem to be the issue, but rather than get hung up on this &ndash; I just converted my modules to Java classes and decided to come back to this issue later.</p>

<h2>@Inject</h2>

<p>So now I had my modules set up, and I went about trying to <code>@Inject</code> some fields on an Activity or two. This yielded another problem: Kotlin doesn&rsquo;t have fields, and we obviously can&rsquo;t do constructor injection on something for which we don&rsquo;t control the constructor &ndash; like <code>Activity</code>.</p>

<p>I thought I&rsquo;d use Dagger to inject a property with &ldquo;method&rdquo; injection like so:</p>

<p><code>lateinit var service : MyService @Inject set</code></p>

<p>But when you try this &ndash; you&rsquo;ll find out that Dagger doesn&rsquo;t support Method injection!</p>

<p>So what can we do? We can target the <a href="https://kotlinlang.org/docs/reference/annotations.html#annotation-use-site-targets">annotation on the backing field</a> like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@field:Inject
</span><span class='line'>lateinit var app : Application</span></code></pre></td></tr></table></div></figure>


<p>And now when we compile, our dependencies are injected! Woo, progress.</p>

<h2>Modules (part 2)</h2>

<p>I was pretty pleased that I had Dagger and Kotlin playing nicely enough that I could write things (other than my modules) in Kotlin, and that DI was working. But it did bother me that I was so close to having the ability to use Kotlin for everything with one exception &ndash; why wouldn&rsquo;t these Modules play nicely?</p>

<p>I dug into the Dagger source to find out where this error was coming from and found <a href="https://github.com/square/dagger/blob/2f9579c48e887ffa316f329c12c2fa2abbec27b1/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java#L217">this</a>. The JavaDoc for <a href="https://docs.oracle.com/javase/8/docs/api/javax/lang/model/type/TypeMirror.html#equals-java.lang.Object-">TypeMirror&rsquo;s equals method</a> says, <code>Semantic comparisons of type equality should instead use Types.isSameType(TypeMirror, TypeMirror). The results of t1.equals(t2) and Types.isSameType(t1, t2) may differ.</code></p>

<p>I was pretty proud of myself for finding this potential issue in Dagger, and was about to submit a Pull Request until I noticed&hellip;<a href="https://github.com/square/dagger/commit/61e471df3891cf017755998b83839042f8455c29">that Jake had solved this issue about 18 months ago</a>.</p>

<p>Running the <code>1.3-SNAPSHOT</code> builds of Dagger that include this change allow my Modules to be compiled properly from Kotlin. <em>Success!</em></p>

<h2>In Summary (aka TL;DR)</h2>

<ul>
<li>Dagger works just fine with Kotlin (as long as you&rsquo;re on 1.3)</li>
<li>Use annotations on the backing fields to perform injection</li>
<li>Use <code>kapt</code> instead of <code>apt</code> for the scope of your <code>dagger-compiler</code> dependency</li>
<li>Make sure to have the following lines in your <code>build.gradle</code></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>kapt {
</span><span class='line'>    generateStubs = true
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Hopefully this helps others who are still using Dagger Classic and want to try out Kotlin!</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p><code>kapt</code> is <a href="http://blog.jetbrains.com/kotlin/2015/06/better-annotation-processing-supporting-stubs-in-kapt/">the annotation processing tool for Kotlin</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Studio Tips and Tricks]]></title>
    <link href="http://michaelevans.org/blog/2016/01/06/android-studio-tips-and-tricks/"/>
    <updated>2016-01-06T20:25:53-05:00</updated>
    <id>http://michaelevans.org/blog/2016/01/06/android-studio-tips-and-tricks</id>
    <content type="html"><![CDATA[<p>I recently attended Google&rsquo;s <a href="https://androiddevsummit.withgoogle.com/">Android Dev Summit</a> where the Tools team presented a talk entitled <a href="https://www.youtube.com/watch?v=Y2GC6P5hPeA">Android Studio For Experts</a>. The room was packed for the 90 minute session, where a lot of great Android Studio tips were shared. This gave me the idea of showing off some of my favorite Android Studio tips!</p>

<!-- more -->


<h2>Language Injection</h2>

<p>Ever needed to type a JSON String? Perhaps you&rsquo;ve used one as a text fixture for one of your GSON deserializers and know that it&rsquo;s a huge pain to manage all those backslashes. Fortunately, IntelliJ has a feature called <em>Language Injection</em>, which allows you to edit the JSON fragment in its own editor, and then IntelliJ will properly inject that fragment into your code as an escaped String.</p>

<p><img class="center" src="http://michaelevans.org/images/2016/01/06/fragment_intention.png" width="300" height="100" title="Intention Action" ></p>

<p>Inject Language/Reference is an intention action<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>, so you can start it by using <kbd>⌥</kbd>+<kbd>Return</kbd>, or <kbd>⌘</kbd>+<kbd>⇧</kbd>+<kbd>A</kbd> and searching for it.</p>

<p><img class="center" src="http://michaelevans.org/images/2016/01/06/fragment_editor.png" width="300" height="300" title="Editing JSON" ></p>

<h2><a href="https://xkcd.com/1171/">Check RegExp</a></h2>

<p>This is pretty similar to the last tip, but if you select the language of the fragment as &ldquo;RegExp&rdquo;, you&rsquo;ll get a handy regular expression tester!</p>

<p><img class="center" src="http://michaelevans.org/images/2016/01/06/reg_exp_1.png" width="300" height="150" title="Editing Regex" ></p>

<p><img class="center" src="http://michaelevans.org/images/2016/01/06/reg_exp_2.png" width="300" height="200" title="Valid Regex" ></p>

<p><img class="center" src="http://michaelevans.org/images/2016/01/06/reg_exp_3.png" width="300" height="200" title="Invalid Regex" ></p>

<h2>Smart(er) Completion</h2>

<p>Now I’m pretty sure most of you have used IntelliJ’s code completion features. Press <kbd>⌥</kbd>+<kbd>Space</kbd>, and IntelliJ/Android Studio lists options to complete the names of classes, methods, fields, and keywords within the visibility scope. But have you ever noticed that the suggestions seem to be based off the characters you&rsquo;ve typed, rather than the actual <em>types</em> that are expected in the scope of the caret? Something like this:</p>

<p><img class="center" src="http://michaelevans.org/images/2016/01/06/basic_autocomplete.png" width="300" height="200" title="Autocomplete" ></p>

<p>Well if you use <em>Type Completion</em> (by pressing <kbd>⌥</kbd>+<kbd>⇧</kbd>+<kbd>Space</kbd>), you will see a list of suggestions containing only those types that are applicable to the current context. In the example below, you&rsquo;ll only get types that return a <code>Reader</code>, which is the type that the <code>BufferedReader</code>&rsquo;s constructor expects:</p>

<p><img class="center" src="http://michaelevans.org/images/2016/01/06/smart_autocomplete.png" width="300" height="200" title="Better Autocomplete" ></p>

<p>What&rsquo;s even cooler is that you can press it an additional time, and IntelliJ will do a deeper scan (looking at static method calls, chained expressions, etc.) to find more options for you:</p>

<p><img class="center" src="http://michaelevans.org/images/2016/01/06/chained_autocomplete.png" width="300" height="200" title="Chained Autocomplete" ></p>

<h2>Discovering Your Own Tips and Tricks</h2>

<p>Another really cool feature is the <em>Productivity Guide</em>. It shows you usage statistics for a lot of IntelliJ&rsquo;s features, such as how many keystokes you have saved or possible bugs you&rsquo;ve avoided by using the various shortcuts. It&rsquo;s also very helpful for discovering features you might not have known about; you can scroll through the list of unused features to see what you&rsquo;re missing out on! To find the productivity guide, go to <code>Help -&gt; Productivity Guide</code>.</p>

<p><img class="center" src="http://michaelevans.org/images/2016/01/06/productivity_guide.png" width="700" height="500" title="Invalid Regex" ></p>

<h2>Bonus Round &ndash; IntelliJ 15 Only</h2>

<p>Did you know IntelliJ has <a href="https://www.jetbrains.com/idea/help/testing-restful-web-services.html">its own REST client</a>? Super handy for testing out API calls without something like <a href="https://luckymarmot.com/paw">Paw</a> or <a href="https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop?hl=en">Postman</a>.</p>

<p>Have any other favorite tips or tricks? Let me know!</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p><a href="https://www.jetbrains.com/idea/help/intention-actions.html">Intention Actions</a> are those suggestions in the little popup menus that allow you to quick-fix things like classes that haven&rsquo;t been imported, etc.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing Intents with Espresso Intents]]></title>
    <link href="http://michaelevans.org/blog/2015/09/15/testing-intents-with-espresso-intents/"/>
    <updated>2015-09-15T22:03:57-04:00</updated>
    <id>http://michaelevans.org/blog/2015/09/15/testing-intents-with-espresso-intents</id>
    <content type="html"><![CDATA[<p>A few weeks ago, I wrote <a href="http://michaelevans.org/blog/2015/08/03/using-espresso-for-easy-ui-testing/">a basic introduction</a> on how to use Espresso to test the UI of an Android application. However, when I went to write instrumentation tests for <a href="https://github.com/MichaelEvans/Aftermath">Aftermath</a>, I ran into trouble testing things that exist outside my application&rsquo;s process. For example, what do you do when your app needs to use the Android Intent system to call upon the dialer or the browser, or pick a contact with the contact picker? What about testing a share action? Because these apps run outside your application itself, you can&rsquo;t use Espresso to interact with them. So how can you test your app&rsquo;s behavior? You can either use Espresso-Intents or UI Automator (but that&rsquo;s another show).</p>

<!-- more -->


<h2>The Setup</h2>

<p>Setting up Espresso-Intents is dead simple if you&rsquo;re already using Espresso. Make sure you&rsquo;re already depending on Espresso, the rules, and the runner and then add the dependency:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>androidTestCompile 'com.android.support.test.espresso:espresso-intents:2.2.1'</span></code></pre></td></tr></table></div></figure>


<h2>The Tests</h2>

<p>Let&rsquo;s imagine that you had an application with a button to launch the contact picker, which would then show the contact <code>Uri</code> of the selected contact in a text view. Not only would this be hard to test because you are leaving your own application&rsquo;s process, but you don&rsquo;t even know if your test can rely on any contacts even existing on the test device (not to mention not knowing which app is registered to handle the contact-picking Intent itself). Fortunately we can use Espresso-Intents to stub out the response for activities that are launched with <code>startActivityForResult</code>.</p>

<p>Here&rsquo;s what that might look like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Before</span> <span class="kd">public</span> <span class="kt">void</span> <span class="n">stubContactIntent</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Intent</span> <span class="n">intent</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Intent</span><span class="o">();</span>
</span><span class='line'>    <span class="n">intent</span><span class="o">.</span><span class="na">setData</span><span class="o">(</span><span class="n">Uri</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="n">TEST_URI</span><span class="o">));</span>
</span><span class='line'>    <span class="n">ActivityResult</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ActivityResult</span><span class="o">(</span><span class="n">Activity</span><span class="o">.</span><span class="na">RESULT_OK</span><span class="o">,</span> <span class="n">intent</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">intending</span><span class="o">(</span><span class="n">allOf</span><span class="o">(</span>
</span><span class='line'>        <span class="n">hasData</span><span class="o">(</span><span class="n">ContactsContract</span><span class="o">.</span><span class="na">CommonDataKinds</span><span class="o">.</span><span class="na">Phone</span><span class="o">.</span><span class="na">CONTENT_URI</span><span class="o">),</span>
</span><span class='line'>        <span class="n">hasAction</span><span class="o">(</span><span class="n">Intent</span><span class="o">.</span><span class="na">ACTION_PICK</span><span class="o">))</span>
</span><span class='line'>    <span class="o">).</span><span class="na">respondWith</span><span class="o">(</span><span class="n">result</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Test</span> <span class="kd">public</span> <span class="kt">void</span> <span class="n">pickContact_viewIsSet</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">//Check to make sure the Uri field is empty</span>
</span><span class='line'>  <span class="n">onView</span><span class="o">(</span><span class="n">withId</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">phone_number</span><span class="o">)).</span><span class="na">check</span><span class="o">(</span><span class="n">matches</span><span class="o">(</span><span class="n">withText</span><span class="o">(</span><span class="s">&quot;&quot;</span><span class="o">)));</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//Start contact picker</span>
</span><span class='line'>  <span class="n">onView</span><span class="o">(</span><span class="n">withId</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">pick_contact</span><span class="o">)).</span><span class="na">perform</span><span class="o">(</span><span class="n">click</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//Verify that Uri was set properly.</span>
</span><span class='line'>  <span class="n">onView</span><span class="o">(</span><span class="n">withId</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">phone_number</span><span class="o">)).</span><span class="na">check</span><span class="o">(</span><span class="n">matches</span><span class="o">(</span><span class="n">withText</span><span class="o">(</span><span class="n">TEST_URI</span><span class="o">)));</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using the <code>intending</code> API, we can respond with our mock <code>ActivityResult</code> data. If you&rsquo;ve used <a href="http://mockito.org/">Mockito</a> before, this stubbing will look very familiar to the <code>when</code>/<code>respondWith</code> methods. In this example, we&rsquo;re going to stub any Intents for the <code>ACTION_PICK</code> Intent with the <code>CONTENT_URI</code> data set to return a particular hard-coded Uri.</p>

<p>So this is great &mdash; our test no longer depends on any particular contact picker app, or any contacts even being present on the test device. But what do we do if we want to verify that a particular outgoing intent is launched with some given extras or data?</p>

<p>Let&rsquo;s say our sample app had an input field that would take a phone number, with a button to start the dialer to call that number. (Yes, I do realize that this application would likely not receive any venture capital funding).</p>

<p>All we have to do is use the <code>intended</code> API, which is most similar to Mockito&rsquo;s <code>verify</code> method. A sample of this might look like the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span> <span class="kd">public</span> <span class="kt">void</span> <span class="n">typeNumber_ValidInput_InitiatesCall</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">onView</span><span class="o">(</span><span class="n">withId</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">number_input</span><span class="o">)).</span><span class="na">perform</span><span class="o">(</span><span class="n">typeText</span><span class="o">(</span><span class="n">VALID_PHONE_NUMBER</span><span class="o">),</span> <span class="n">closeSoftKeyboard</span><span class="o">());</span>
</span><span class='line'>    <span class="n">onView</span><span class="o">(</span><span class="n">withId</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">dial_button</span><span class="o">)).</span><span class="na">perform</span><span class="o">(</span><span class="n">click</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">intended</span><span class="o">(</span><span class="n">allOf</span><span class="o">(</span><span class="n">hasAction</span><span class="o">(</span><span class="n">Intent</span><span class="o">.</span><span class="na">ACTION_DIAL</span><span class="o">),</span> <span class="n">hasData</span><span class="o">(</span><span class="n">INTENT_DATA_PHONE_NUMBER</span><span class="o">)));</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this case, we&rsquo;re just going to verify that the intended Intent had the right action and the right data that we&rsquo;d expect to hand off to the dialer.</p>

<p>And you&rsquo;ll notice that the Espresso-Intents package includes handy Hamcrest matchers that you can use for things like Strings on the different parts of the Intent.</p>

<p>Now go forth and test those inter-app component interactions!</p>

<p>The sample code for this blog post can be found <a href="https://github.com/MichaelEvans/Espresso-Samples/tree/master/espresso-intents-sample">here</a>.</p>
]]></content>
  </entry>
  
</feed>
