<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Michael Evans]]></title>
  <link href="http://michaelevans.org/atom.xml" rel="self"/>
  <link href="http://michaelevans.org/"/>
  <updated>2016-04-01T11:20:09-04:00</updated>
  <id>http://michaelevans.org/</id>
  <author>
    <name><![CDATA[Michael Evans]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using Build Types with the Google Services Gradle Plugin]]></title>
    <link href="http://michaelevans.org/blog/2016/03/31/using-build-types-with-the-google-services-gradle-plugin/"/>
    <updated>2016-03-31T21:11:55-04:00</updated>
    <id>http://michaelevans.org/blog/2016/03/31/using-build-types-with-the-google-services-gradle-plugin</id>
    <content type="html"><![CDATA[<p>If you want to integrate your Android app with most of Google Play Services nowadays, you&rsquo;ll find that you are instructed to set up the <a href="https://developers.google.com/android/guides/google-services-plugin">Google Services Gradle plugin</a> to handle configuring dependencies. The plugin allows you to drop a JSON file into your project, and then the plugin will do a bunch of the configuration for your project, such as handling the API keys.</p>

<p>This is all well and good—unless you&rsquo;re like me (<a href="https://github.com/googlesamples/google-services/issues/54">and countless others</a>) and want to use a different configuration for your debug and release builds. This would be useful, as an example, if you use Google Play Services for GCM and would like to have development builds recieve pushes from non-production systems.</p>

<p>It seems that the plugin is configured in such a way that it supports build flavors, but it does not yet support build types. However, with a little Gradle magic, we can hack that support in.</p>

<!-- more -->


<p><strong>Disclaimer: This approach worked for me—but as with any hack, it is subject to break.</strong></p>

<p>So how can we go about doing this? We want to put the debug JSON file into the root of our app module during debug builds and use the release one for release builds. If you don&rsquo;t do that, or if you attempt to put it in <code>app/debug</code> and <code>app/release</code>, you&rsquo;ll get an error that says <code>File google-services.json is missing from module root folder. The Google Services Plugin cannot function without it</code>.</p>

<p>This error is thrown by a task named <code>process{VariantName}GoogleServices</code>. What we could do to solve this is swap the file in before that task is run! Using a little Groovy magic, I came up with this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">android</span><span class="o">.</span><span class="na">applicationVariants</span><span class="o">.</span><span class="na">all</span> <span class="o">{</span> <span class="n">variant</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="kt">def</span> <span class="n">hackTask</span> <span class="o">=</span> <span class="n">task</span><span class="o">(</span><span class="s2">&quot;hackGps${variant.name.capitalize()}&quot;</span><span class="o">)</span> <span class="o">&lt;&lt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">copy</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">from</span> <span class="n">rootProject</span><span class="o">.</span><span class="na">file</span><span class="o">(</span><span class="s2">&quot;config/${variant.buildType.name}/google-services.json&quot;</span><span class="o">)</span>
</span><span class='line'>            <span class="n">into</span> <span class="s2">&quot;${projectDir}&quot;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="kt">def</span> <span class="n">googleTask</span> <span class="o">=</span> <span class="n">tasks</span><span class="o">.</span><span class="na">findByName</span><span class="o">(</span><span class="s2">&quot;process${variant.name.capitalize()}GoogleServices&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="n">googleTask</span><span class="o">.</span><span class="na">dependsOn</span> <span class="n">hackTask</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>For each one of your variants, this code will create a new task &ndash; <code>hackGps{VariantName}</code>, which copies a <code>google-services.json</code> file from a <code>config</code> directory into the root of your app module. Then it finds the corresponding Google Services task, and hooks itself in to run right before that! Now when you assemble your application, the right <code>google-services.json</code> file will be in the right place, ready to be picked up by the plugin.</p>

<p><em>You might also want to .gitignore the <code>app/google-services.json</code> file, so that you don&rsquo;t keep committing the changed file to git</em></p>

<p>Hopefully Google will fix this issue in an upcoming release of the Google Services plugin, but until then &ndash; this technique should work!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Changelog for N Support Libraries]]></title>
    <link href="http://michaelevans.org/blog/2016/03/09/changelog-for-n-support-libraries/"/>
    <updated>2016-03-09T19:38:46-05:00</updated>
    <id>http://michaelevans.org/blog/2016/03/09/changelog-for-n-support-libraries</id>
    <content type="html"><![CDATA[<p>Pssst! If you&rsquo;re an Android developer, you might not have heard yet&hellip;the <a href="http://android-developers.blogspot.com/2016/03/first-preview-of-android-n-developer.html">N Preview started today</a>! As part of the festivities, a new alpha version of the support libraries was released. There was no changelog that I could find, so I decided to make one. Here&rsquo;s what has changed (so far) in the public API of a few of these libraries:</p>

<!-- more -->


<h2>Support-V4:</h2>

<div><script src='https://gist.github.com/5d7c55382198640345dc.js?file=support-v4.diff'></script>
<noscript><pre><code>diff -U 0 -N support-v4-23.2.0_df13b086/android.support.v4.app.FragmentController support-v4-24.0.0-alpha1_41849fd4/android.support.v4.app.FragmentController
--- support-v4-23.2.0_df13b086/android.support.v4.app.FragmentController    2016-03-09 19:28:24.000000000 -0500
+++ support-v4-24.0.0-alpha1_41849fd4/android.support.v4.app.FragmentController 2016-03-09 19:28:24.000000000 -0500
@@ -11,0 +12 @@
+  public void restoreAllState(android.os.Parcelable, android.support.v4.app.FragmentManagerNonConfig);
@@ -12,0 +14 @@
+  public android.support.v4.app.FragmentManagerNonConfig retainNestedNonConfig();
diff -U 0 -N support-v4-23.2.0_df13b086/android.support.v4.app.FragmentManagerNonConfig support-v4-24.0.0-alpha1_41849fd4/android.support.v4.app.FragmentManagerNonConfig
--- support-v4-23.2.0_df13b086/android.support.v4.app.FragmentManagerNonConfig  1969-12-31 19:00:00.000000000 -0500
+++ support-v4-24.0.0-alpha1_41849fd4/android.support.v4.app.FragmentManagerNonConfig   2016-03-09 19:28:24.000000000 -0500
@@ -0,0 +1,2 @@
+public class android.support.v4.app.FragmentManagerNonConfig {
+}
diff -U 0 -N support-v4-23.2.0_df13b086/android.support.v4.app.FragmentTransaction support-v4-24.0.0-alpha1_41849fd4/android.support.v4.app.FragmentTransaction
--- support-v4-23.2.0_df13b086/android.support.v4.app.FragmentTransaction   2016-03-09 19:28:24.000000000 -0500
+++ support-v4-24.0.0-alpha1_41849fd4/android.support.v4.app.FragmentTransaction    2016-03-09 19:28:24.000000000 -0500
@@ -34,0 +35,2 @@
+  public abstract void commitNow();
+  public abstract void commitNowAllowingStateLoss();
diff -U 0 -N support-v4-23.2.0_df13b086/android.support.v4.content.ContextCompat support-v4-24.0.0-alpha1_41849fd4/android.support.v4.content.ContextCompat
--- support-v4-23.2.0_df13b086/android.support.v4.content.ContextCompat 2016-03-09 19:28:24.000000000 -0500
+++ support-v4-24.0.0-alpha1_41849fd4/android.support.v4.content.ContextCompat  2016-03-09 19:28:24.000000000 -0500
@@ -13,0 +14,2 @@
+  public static android.content.Context createDeviceEncryptedStorageContext(android.content.Context);
+  public static boolean isDeviceEncryptedStorage(android.content.Context);
diff -U 0 -N support-v4-23.2.0_df13b086/android.support.v4.content.res.TypedArrayUtils support-v4-24.0.0-alpha1_41849fd4/android.support.v4.content.res.TypedArrayUtils
--- support-v4-23.2.0_df13b086/android.support.v4.content.res.TypedArrayUtils   2016-03-09 19:28:24.000000000 -0500
+++ support-v4-24.0.0-alpha1_41849fd4/android.support.v4.content.res.TypedArrayUtils    2016-03-09 19:28:24.000000000 -0500
@@ -8,0 +9 @@
+  public static int getAttr(android.content.Context, int, int);
diff -U 0 -N support-v4-23.2.0_df13b086/android.support.v4.media.session.IMediaSession support-v4-24.0.0-alpha1_41849fd4/android.support.v4.media.session.IMediaSession
--- support-v4-23.2.0_df13b086/android.support.v4.media.session.IMediaSession   2016-03-09 19:28:24.000000000 -0500
+++ support-v4-24.0.0-alpha1_41849fd4/android.support.v4.media.session.IMediaSession    2016-03-09 19:28:24.000000000 -0500
@@ -33,0 +34,4 @@
+  public abstract void prepare() throws android.os.RemoteException;
+  public abstract void prepareFromMediaId(java.lang.String, android.os.Bundle) throws android.os.RemoteException;
+  public abstract void prepareFromSearch(java.lang.String, android.os.Bundle) throws android.os.RemoteException;
+  public abstract void prepareFromUri(android.net.Uri, android.os.Bundle) throws android.os.RemoteException;
diff -U 0 -N support-v4-23.2.0_df13b086/android.support.v4.media.session.MediaControllerCompat$TransportControls support-v4-24.0.0-alpha1_41849fd4/android.support.v4.media.session.MediaControllerCompat$TransportControls
--- support-v4-23.2.0_df13b086/android.support.v4.media.session.MediaControllerCompat$TransportControls 2016-03-09 19:28:24.000000000 -0500
+++ support-v4-24.0.0-alpha1_41849fd4/android.support.v4.media.session.MediaControllerCompat$TransportControls  2016-03-09 19:28:24.000000000 -0500
@@ -1,0 +2,4 @@
+  public abstract void prepare();
+  public abstract void prepareFromMediaId(java.lang.String, android.os.Bundle);
+  public abstract void prepareFromSearch(java.lang.String, android.os.Bundle);
+  public abstract void prepareFromUri(android.net.Uri, android.os.Bundle);
diff -U 0 -N support-v4-23.2.0_df13b086/android.support.v4.media.session.MediaSessionCompat support-v4-24.0.0-alpha1_41849fd4/android.support.v4.media.session.MediaSessionCompat
--- support-v4-23.2.0_df13b086/android.support.v4.media.session.MediaSessionCompat  2016-03-09 19:28:24.000000000 -0500
+++ support-v4-24.0.0-alpha1_41849fd4/android.support.v4.media.session.MediaSessionCompat   2016-03-09 19:28:24.000000000 -0500
@@ -4,3 +3,0 @@
-  public static final java.lang.String ACTION_PLAY_FROM_URI;
-  public static final java.lang.String ACTION_ARGUMENT_URI;
-  public static final java.lang.String ACTION_ARGUMENT_EXTRAS;
diff -U 0 -N support-v4-23.2.0_df13b086/android.support.v4.media.session.MediaSessionCompat$Callback support-v4-24.0.0-alpha1_41849fd4/android.support.v4.media.session.MediaSessionCompat$Callback
--- support-v4-23.2.0_df13b086/android.support.v4.media.session.MediaSessionCompat$Callback 2016-03-09 19:28:24.000000000 -0500
+++ support-v4-24.0.0-alpha1_41849fd4/android.support.v4.media.session.MediaSessionCompat$Callback  2016-03-09 19:28:24.000000000 -0500
@@ -4,0 +5,4 @@
+  public void onPrepare();
+  public void onPrepareFromMediaId(java.lang.String, android.os.Bundle);
+  public void onPrepareFromSearch(java.lang.String, android.os.Bundle);
+  public void onPrepareFromUri(android.net.Uri, android.os.Bundle);
diff -U 0 -N support-v4-23.2.0_df13b086/android.support.v4.media.session.PlaybackStateCompat support-v4-24.0.0-alpha1_41849fd4/android.support.v4.media.session.PlaybackStateCompat
--- support-v4-23.2.0_df13b086/android.support.v4.media.session.PlaybackStateCompat 2016-03-09 19:28:24.000000000 -0500
+++ support-v4-24.0.0-alpha1_41849fd4/android.support.v4.media.session.PlaybackStateCompat  2016-03-09 19:28:24.000000000 -0500
@@ -15,0 +16,4 @@
+  public static final long ACTION_PREPARE;
+  public static final long ACTION_PREPARE_FROM_MEDIA_ID;
+  public static final long ACTION_PREPARE_FROM_SEARCH;
+  public static final long ACTION_PREPARE_FROM_URI;
diff -U 0 -N support-v4-23.2.0_df13b086/android.support.v4.net.TrafficStatsCompat support-v4-24.0.0-alpha1_41849fd4/android.support.v4.net.TrafficStatsCompat
--- support-v4-23.2.0_df13b086/android.support.v4.net.TrafficStatsCompat    2016-03-09 19:28:24.000000000 -0500
+++ support-v4-24.0.0-alpha1_41849fd4/android.support.v4.net.TrafficStatsCompat 2016-03-09 19:28:24.000000000 -0500
@@ -8,0 +9,2 @@
+  public static void tagDatagramSocket(java.net.DatagramSocket) throws java.net.SocketException;
+  public static void untagDatagramSocket(java.net.DatagramSocket) throws java.net.SocketException;
diff -U 0 -N support-v4-23.2.0_df13b086/android.support.v4.os.BuildCompat support-v4-24.0.0-alpha1_41849fd4/android.support.v4.os.BuildCompat
--- support-v4-23.2.0_df13b086/android.support.v4.os.BuildCompat    1969-12-31 19:00:00.000000000 -0500
+++ support-v4-24.0.0-alpha1_41849fd4/android.support.v4.os.BuildCompat 2016-03-09 19:28:24.000000000 -0500
@@ -0,0 +1,3 @@
+public class android.support.v4.os.BuildCompat {
+  public static boolean isAtLeastN();
+}
diff -U 0 -N support-v4-23.2.0_df13b086/android.support.v4.os.UserManagerCompat support-v4-24.0.0-alpha1_41849fd4/android.support.v4.os.UserManagerCompat
--- support-v4-23.2.0_df13b086/android.support.v4.os.UserManagerCompat  1969-12-31 19:00:00.000000000 -0500
+++ support-v4-24.0.0-alpha1_41849fd4/android.support.v4.os.UserManagerCompat   2016-03-09 19:28:24.000000000 -0500
@@ -0,0 +1,6 @@
+public class android.support.v4.os.UserManagerCompat {
+  public android.support.v4.os.UserManagerCompat();
+  public static boolean isUserRunningAndLocked(android.content.Context);
+  public static boolean isUserRunningAndUnlocked(android.content.Context);
+  public static boolean isUserUnlocked(android.content.Context);
+}
diff -U 0 -N support-v4-23.2.0_df13b086/android.support.v4.view.AsyncLayoutInflater support-v4-24.0.0-alpha1_41849fd4/android.support.v4.view.AsyncLayoutInflater
--- support-v4-23.2.0_df13b086/android.support.v4.view.AsyncLayoutInflater  1969-12-31 19:00:00.000000000 -0500
+++ support-v4-24.0.0-alpha1_41849fd4/android.support.v4.view.AsyncLayoutInflater   2016-03-09 19:28:24.000000000 -0500
@@ -0,0 +1,4 @@
+public final class android.support.v4.view.AsyncLayoutInflater {
+  public android.support.v4.view.AsyncLayoutInflater(android.content.Context);
+  public void inflate(int, android.view.ViewGroup, android.support.v4.view.AsyncLayoutInflater$OnInflateFinishedListener);
+}
diff -U 0 -N support-v4-23.2.0_df13b086/android.support.v4.view.AsyncLayoutInflater$OnInflateFinishedListener support-v4-24.0.0-alpha1_41849fd4/android.support.v4.view.AsyncLayoutInflater$OnInflateFinishedListener
--- support-v4-23.2.0_df13b086/android.support.v4.view.AsyncLayoutInflater$OnInflateFinishedListener    1969-12-31 19:00:00.000000000 -0500
+++ support-v4-24.0.0-alpha1_41849fd4/android.support.v4.view.AsyncLayoutInflater$OnInflateFinishedListener 2016-03-09 19:28:24.000000000 -0500
@@ -0,0 +1,3 @@
+public interface android.support.v4.view.AsyncLayoutInflater$OnInflateFinishedListener {
+  public abstract void onInflateFinished(android.view.View, int, android.view.ViewGroup);
+}
diff -U 0 -N support-v4-23.2.0_df13b086/android.support.v4.view.KeyEventCompat support-v4-24.0.0-alpha1_41849fd4/android.support.v4.view.KeyEventCompat
--- support-v4-23.2.0_df13b086/android.support.v4.view.KeyEventCompat   2016-03-09 19:28:24.000000000 -0500
+++ support-v4-24.0.0-alpha1_41849fd4/android.support.v4.view.KeyEventCompat    2016-03-09 19:28:24.000000000 -0500
@@ -10,0 +11 @@
+  public static boolean isCtrlPressed(android.view.KeyEvent);
diff -U 0 -N support-v4-23.2.0_df13b086/android.support.v4.view.MotionEventCompat support-v4-24.0.0-alpha1_41849fd4/android.support.v4.view.MotionEventCompat
--- support-v4-23.2.0_df13b086/android.support.v4.view.MotionEventCompat    2016-03-09 19:28:24.000000000 -0500
+++ support-v4-24.0.0-alpha1_41849fd4/android.support.v4.view.MotionEventCompat 2016-03-09 19:28:24.000000000 -0500
@@ -36,0 +37,2 @@
+  public static final int AXIS_RELATIVE_X;
+  public static final int AXIS_RELATIVE_Y;
@@ -52,0 +55 @@
+  public static final int BUTTON_PRIMARY;
@@ -60,0 +64 @@
+  public static boolean isFromSource(android.view.MotionEvent, int);
@@ -62,0 +67 @@
+  public static int getButtonState(android.view.MotionEvent);
diff -U 0 -N support-v4-23.2.0_df13b086/android.support.v4.view.PointerIconCompat support-v4-24.0.0-alpha1_41849fd4/android.support.v4.view.PointerIconCompat
--- support-v4-23.2.0_df13b086/android.support.v4.view.PointerIconCompat    1969-12-31 19:00:00.000000000 -0500
+++ support-v4-24.0.0-alpha1_41849fd4/android.support.v4.view.PointerIconCompat 2016-03-09 19:28:24.000000000 -0500
@@ -0,0 +1,29 @@
+public final class android.support.v4.view.PointerIconCompat {
+  public static final int STYLE_NULL;
+  public static final int STYLE_ARROW;
+  public static final int STYLE_CONTEXT_MENU;
+  public static final int STYLE_HAND;
+  public static final int STYLE_HELP;
+  public static final int STYLE_WAIT;
+  public static final int STYLE_CELL;
+  public static final int STYLE_CROSSHAIR;
+  public static final int STYLE_TEXT;
+  public static final int STYLE_VERTICAL_TEXT;
+  public static final int STYLE_ALIAS;
+  public static final int STYLE_COPY;
+  public static final int STYLE_NO_DROP;
+  public static final int STYLE_ALL_SCROLL;
+  public static final int STYLE_HORIZONTAL_DOUBLE_ARROW;
+  public static final int STYLE_VERTICAL_DOUBLE_ARROW;
+  public static final int STYLE_TOP_RIGHT_DIAGONAL_DOUBLE_ARROW;
+  public static final int STYLE_TOP_LEFT_DIAGONAL_DOUBLE_ARROW;
+  public static final int STYLE_ZOOM_IN;
+  public static final int STYLE_ZOOM_OUT;
+  public static final int STYLE_GRAB;
+  public static final int STYLE_GRABBING;
+  public static final int STYLE_DEFAULT;
+  public java.lang.Object getPointerIcon();
+  public static android.support.v4.view.PointerIconCompat getSystemIcon(android.content.Context, int);
+  public static android.support.v4.view.PointerIconCompat createCustomIcon(android.graphics.Bitmap, float, float);
+  public static android.support.v4.view.PointerIconCompat loadCustomIcon(android.content.res.Resources, int);
+}
diff -U 0 -N support-v4-23.2.0_df13b086/android.support.v4.view.ViewCompat support-v4-24.0.0-alpha1_41849fd4/android.support.v4.view.ViewCompat
--- support-v4-23.2.0_df13b086/android.support.v4.view.ViewCompat   2016-03-09 19:28:24.000000000 -0500
+++ support-v4-24.0.0-alpha1_41849fd4/android.support.v4.view.ViewCompat    2016-03-09 19:28:24.000000000 -0500
@@ -1 +1 @@
-public final class android.support.v4.view.ViewCompat {
+public class android.support.v4.view.ViewCompat {
@@ -141,0 +142,4 @@
+  public static void setPointerCapture(android.view.View);
+  public static boolean hasPointerCapture(android.view.View);
+  public static void releasePointerCapture(android.view.View);
+  public static void setPointerIcon(android.view.View, android.support.v4.view.PointerIconCompat);
diff -U 0 -N support-v4-23.2.0_df13b086/android.support.v4.view.ViewCompat$FocusDirection support-v4-24.0.0-alpha1_41849fd4/android.support.v4.view.ViewCompat$FocusDirection
--- support-v4-23.2.0_df13b086/android.support.v4.view.ViewCompat$FocusDirection    1969-12-31 19:00:00.000000000 -0500
+++ support-v4-24.0.0-alpha1_41849fd4/android.support.v4.view.ViewCompat$FocusDirection 2016-03-09 19:28:24.000000000 -0500
@@ -0,0 +1,2 @@
+public interface android.support.v4.view.ViewCompat$FocusDirection extends java.lang.annotation.Annotation {
+}
diff -U 0 -N support-v4-23.2.0_df13b086/android.support.v4.view.ViewCompat$FocusRealDirection support-v4-24.0.0-alpha1_41849fd4/android.support.v4.view.ViewCompat$FocusRealDirection
--- support-v4-23.2.0_df13b086/android.support.v4.view.ViewCompat$FocusRealDirection    1969-12-31 19:00:00.000000000 -0500
+++ support-v4-24.0.0-alpha1_41849fd4/android.support.v4.view.ViewCompat$FocusRealDirection 2016-03-09 19:28:24.000000000 -0500
@@ -0,0 +1,2 @@
+public interface android.support.v4.view.ViewCompat$FocusRealDirection extends java.lang.annotation.Annotation {
+}
diff -U 0 -N support-v4-23.2.0_df13b086/android.support.v4.view.ViewCompat$FocusRelativeDirection support-v4-24.0.0-alpha1_41849fd4/android.support.v4.view.ViewCompat$FocusRelativeDirection
--- support-v4-23.2.0_df13b086/android.support.v4.view.ViewCompat$FocusRelativeDirection    1969-12-31 19:00:00.000000000 -0500
+++ support-v4-24.0.0-alpha1_41849fd4/android.support.v4.view.ViewCompat$FocusRelativeDirection 2016-03-09 19:28:24.000000000 -0500
@@ -0,0 +1,2 @@
+public interface android.support.v4.view.ViewCompat$FocusRelativeDirection extends java.lang.annotation.Annotation {
+}
diff -U 0 -N support-v4-23.2.0_df13b086/android.support.v4.view.accessibility.AccessibilityNodeInfoCompat support-v4-24.0.0-alpha1_41849fd4/android.support.v4.view.accessibility.AccessibilityNodeInfoCompat
--- support-v4-23.2.0_df13b086/android.support.v4.view.accessibility.AccessibilityNodeInfoCompat    2016-03-09 19:28:24.000000000 -0500
+++ support-v4-24.0.0-alpha1_41849fd4/android.support.v4.view.accessibility.AccessibilityNodeInfoCompat 2016-03-09 19:28:24.000000000 -0500
@@ -148,0 +149,2 @@
+  public java.lang.CharSequence getRoleDescription();
+  public void setRoleDescription(java.lang.CharSequence);
diff -U 0 -N support-v4-23.2.0_df13b086/android.support.v4.widget.ExploreByTouchHelper support-v4-24.0.0-alpha1_41849fd4/android.support.v4.widget.ExploreByTouchHelper
--- support-v4-23.2.0_df13b086/android.support.v4.widget.ExploreByTouchHelper   2016-03-09 19:28:24.000000000 -0500
+++ support-v4-24.0.0-alpha1_41849fd4/android.support.v4.widget.ExploreByTouchHelper    2016-03-09 19:28:24.000000000 -0500
@@ -6,4 +6,9 @@
-  public boolean dispatchHoverEvent(android.view.MotionEvent);
-  public boolean sendEventForVirtualView(int, int);
-  public void invalidateRoot();
-  public void invalidateVirtualView(int);
+  public final boolean dispatchHoverEvent(android.view.MotionEvent);
+  public final boolean dispatchKeyEvent(android.view.KeyEvent);
+  public final void onFocusChanged(boolean, int, android.graphics.Rect);
+  public final int getAccessibilityFocusedVirtualViewId();
+  public final int getKeyboardFocusedVirtualViewId();
+  public final boolean sendEventForVirtualView(int, int);
+  public final void invalidateRoot();
+  public final void invalidateVirtualView(int);
+  public final void invalidateVirtualView(int, int);
@@ -11 +16,4 @@
-  public void onPopulateNodeForHost(android.support.v4.view.accessibility.AccessibilityNodeInfoCompat);
+  public void onInitializeAccessibilityEvent(android.view.View, android.view.accessibility.AccessibilityEvent);
+  public void onInitializeAccessibilityNodeInfo(android.view.View, android.support.v4.view.accessibility.AccessibilityNodeInfoCompat);
+  public final boolean requestKeyboardFocusForVirtualView(int);
+  public final boolean clearKeyboardFocusForVirtualView(int);
diff -U 0 -N support-v4-23.2.0_df13b086/android.support.v4.widget.FocusStrategy$BoundsAdapter&lt;T&gt; support-v4-24.0.0-alpha1_41849fd4/android.support.v4.widget.FocusStrategy$BoundsAdapter&lt;T&gt;
--- support-v4-23.2.0_df13b086/android.support.v4.widget.FocusStrategy$BoundsAdapter&lt;T&gt;   1969-12-31 19:00:00.000000000 -0500
+++ support-v4-24.0.0-alpha1_41849fd4/android.support.v4.widget.FocusStrategy$BoundsAdapter&lt;T&gt;    2016-03-09 19:28:24.000000000 -0500
@@ -0,0 +1,3 @@
+public interface android.support.v4.widget.FocusStrategy$BoundsAdapter&lt;T&gt; {
+  public abstract void obtainBounds(T, android.graphics.Rect);
+}
diff -U 0 -N support-v4-23.2.0_df13b086/android.support.v4.widget.FocusStrategy$CollectionAdapter&lt;T, support-v4-24.0.0-alpha1_41849fd4/android.support.v4.widget.FocusStrategy$CollectionAdapter&lt;T,
--- support-v4-23.2.0_df13b086/android.support.v4.widget.FocusStrategy$CollectionAdapter&lt;T,  1969-12-31 19:00:00.000000000 -0500
+++ support-v4-24.0.0-alpha1_41849fd4/android.support.v4.widget.FocusStrategy$CollectionAdapter&lt;T,   2016-03-09 19:28:24.000000000 -0500
@@ -0,0 +1,4 @@
+public interface android.support.v4.widget.FocusStrategy$CollectionAdapter&lt;T, V&gt; {
+  public abstract V get(T, int);
+  public abstract int size(T);
+}</code></pre></noscript></div>


<h2>AppCompat:</h2>

<div><script src='https://gist.github.com/5d7c55382198640345dc.js?file=appcompat.diff'></script>
<noscript><pre><code>diff -U 0 -N appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.app.AppCompatDelegateImplV7$PanelFeatureState appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.app.AppCompatDelegateImplV7$PanelFeatureState
--- appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.app.AppCompatDelegateImplV7$PanelFeatureState   1969-12-31 19:00:00.000000000 -0500
+++ appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.app.AppCompatDelegateImplV7$PanelFeatureState    2016-03-09 19:28:22.000000000 -0500
@@ -0,0 +1,5 @@
+public final class android.support.v7.app.AppCompatDelegateImplV7$PanelFeatureState {
+  public boolean qwertyMode;
+  public boolean hasPanelItems();
+  public void clearMenuPresenters();
+}
diff -U 0 -N appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.view.WindowCallbackWrapper appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.view.WindowCallbackWrapper
--- appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.view.WindowCallbackWrapper  2016-03-09 19:28:22.000000000 -0500
+++ appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.view.WindowCallbackWrapper   2016-03-09 19:28:22.000000000 -0500
@@ -25,0 +26 @@
+  public void onProvideKeyboardShortcuts(java.util.List&lt;android.view.KeyboardShortcutGroup&gt;, android.view.Menu);
diff -U 0 -N appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.view.menu.ActionMenuItemView$PopupCallback appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.view.menu.ActionMenuItemView$PopupCallback
--- appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.view.menu.ActionMenuItemView$PopupCallback  2016-03-09 19:28:22.000000000 -0500
+++ appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.view.menu.ActionMenuItemView$PopupCallback   2016-03-09 19:28:22.000000000 -0500
@@ -3 +3 @@
-  public abstract android.support.v7.widget.ListPopupWindow getPopup();
+  public abstract android.support.v7.view.menu.ShowableListMenu getPopup();
diff -U 0 -N appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.view.menu.CascadingMenuPopup$HorizPosition appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.view.menu.CascadingMenuPopup$HorizPosition
--- appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.view.menu.CascadingMenuPopup$HorizPosition  1969-12-31 19:00:00.000000000 -0500
+++ appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.view.menu.CascadingMenuPopup$HorizPosition   2016-03-09 19:28:22.000000000 -0500
@@ -0,0 +1,2 @@
+public interface android.support.v7.view.menu.CascadingMenuPopup$HorizPosition extends java.lang.annotation.Annotation {
+}
diff -U 0 -N appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.view.menu.ListMenuItemView appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.view.menu.ListMenuItemView
--- appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.view.menu.ListMenuItemView  2016-03-09 19:28:22.000000000 -0500
+++ appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.view.menu.ListMenuItemView   2016-03-09 19:28:22.000000000 -0500
@@ -2 +1,0 @@
-  public android.support.v7.view.menu.ListMenuItemView(android.content.Context, android.util.AttributeSet, int);
@@ -3,0 +3 @@
+  public android.support.v7.view.menu.ListMenuItemView(android.content.Context, android.util.AttributeSet, int);
diff -U 0 -N appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.view.menu.MenuAdapter appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.view.menu.MenuAdapter
--- appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.view.menu.MenuAdapter   1969-12-31 19:00:00.000000000 -0500
+++ appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.view.menu.MenuAdapter    2016-03-09 19:28:22.000000000 -0500
@@ -0,0 +1,12 @@
+public class android.support.v7.view.menu.MenuAdapter extends android.widget.BaseAdapter {
+  public android.support.v7.view.menu.MenuAdapter(android.support.v7.view.menu.MenuBuilder, android.view.LayoutInflater, boolean);
+  public boolean getForceShowIcon();
+  public void setForceShowIcon(boolean);
+  public int getCount();
+  public android.support.v7.view.menu.MenuBuilder getAdapterMenu();
+  public android.support.v7.view.menu.MenuItemImpl getItem(int);
+  public long getItemId(int);
+  public android.view.View getView(int, android.view.View, android.view.ViewGroup);
+  public void notifyDataSetChanged();
+  public java.lang.Object getItem(int);
+}
diff -U 0 -N appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.view.menu.MenuBuilder appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.view.menu.MenuBuilder
--- appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.view.menu.MenuBuilder   2016-03-09 19:28:22.000000000 -0500
+++ appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.view.menu.MenuBuilder    2016-03-09 19:28:22.000000000 -0500
@@ -60,0 +61 @@
+  public void setOptionalIconsVisible(boolean);
diff -U 0 -N appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.view.menu.MenuPopupHelper appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.view.menu.MenuPopupHelper
--- appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.view.menu.MenuPopupHelper   2016-03-09 19:28:22.000000000 -0500
+++ appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.view.menu.MenuPopupHelper    2016-03-09 19:28:22.000000000 -0500
@@ -1 +1 @@
-public class android.support.v7.view.menu.MenuPopupHelper implements android.widget.AdapterView$OnItemClickListener,android.view.View$OnKeyListener,android.view.ViewTreeObserver$OnGlobalLayoutListener,android.widget.PopupWindow$OnDismissListener,android.support.v7.view.menu.MenuPresenter {
+public class android.support.v7.view.menu.MenuPopupHelper implements android.support.v7.view.menu.MenuHelper {
@@ -5,0 +6 @@
+  public void setOnDismissListener(android.widget.PopupWindow$OnDismissListener);
@@ -11 +12,2 @@
-  public android.support.v7.widget.ListPopupWindow getPopup();
+  public void show(int, int);
+  public android.support.v7.view.menu.MenuPopup getPopup();
@@ -12,0 +15 @@
+  public boolean tryShow(int, int);
@@ -14 +16,0 @@
-  public void onDismiss();
@@ -16,15 +18 @@
-  public void onItemClick(android.widget.AdapterView&lt;?&gt;, android.view.View, int, long);
-  public boolean onKey(android.view.View, int, android.view.KeyEvent);
-  public void onGlobalLayout();
-  public void initForMenu(android.content.Context, android.support.v7.view.menu.MenuBuilder);
-  public android.support.v7.view.menu.MenuView getMenuView(android.view.ViewGroup);
-  public void updateMenuView(boolean);
-  public void setCallback(android.support.v7.view.menu.MenuPresenter$Callback);
-  public boolean onSubMenuSelected(android.support.v7.view.menu.SubMenuBuilder);
-  public void onCloseMenu(android.support.v7.view.menu.MenuBuilder, boolean);
-  public boolean flagActionItems();
-  public boolean expandItemActionView(android.support.v7.view.menu.MenuBuilder, android.support.v7.view.menu.MenuItemImpl);
-  public boolean collapseItemActionView(android.support.v7.view.menu.MenuBuilder, android.support.v7.view.menu.MenuItemImpl);
-  public int getId();
-  public android.os.Parcelable onSaveInstanceState();
-  public void onRestoreInstanceState(android.os.Parcelable);
+  public void setPresenterCallback(android.support.v7.view.menu.MenuPresenter$Callback);
diff -U 0 -N appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.view.menu.ShowableListMenu appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.view.menu.ShowableListMenu
--- appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.view.menu.ShowableListMenu  1969-12-31 19:00:00.000000000 -0500
+++ appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.view.menu.ShowableListMenu   2016-03-09 19:28:22.000000000 -0500
@@ -0,0 +1,6 @@
+public interface android.support.v7.view.menu.ShowableListMenu {
+  public abstract void show();
+  public abstract void dismiss();
+  public abstract boolean isShowing();
+  public abstract android.widget.ListView getListView();
+}
diff -U 0 -N appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.widget.AppCompatSeekBar appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.widget.AppCompatSeekBar
--- appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.widget.AppCompatSeekBar 2016-03-09 19:28:22.000000000 -0500
+++ appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.widget.AppCompatSeekBar  2016-03-09 19:28:22.000000000 -0500
@@ -4,0 +5 @@
+  public void jumpDrawablesToCurrentState();
diff -U 0 -N appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.widget.ForwardingListener appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.widget.ForwardingListener
--- appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.widget.ForwardingListener   1969-12-31 19:00:00.000000000 -0500
+++ appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.widget.ForwardingListener    2016-03-09 19:28:22.000000000 -0500
@@ -0,0 +1,5 @@
+public abstract class android.support.v7.widget.ForwardingListener implements android.view.View$OnTouchListener {
+  public android.support.v7.widget.ForwardingListener(android.view.View);
+  public abstract android.support.v7.view.menu.ShowableListMenu getPopup();
+  public boolean onTouch(android.view.View, android.view.MotionEvent);
+}
diff -U 0 -N appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.widget.ListPopupWindow appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.widget.ListPopupWindow
--- appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.widget.ListPopupWindow  2016-03-09 19:28:22.000000000 -0500
+++ appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.widget.ListPopupWindow   2016-03-09 19:28:22.000000000 -0500
@@ -1 +1 @@
-public class android.support.v7.widget.ListPopupWindow {
+public class android.support.v7.widget.ListPopupWindow implements android.support.v7.view.menu.ShowableListMenu {
@@ -33,0 +34 @@
+  public void setEpicenterBounds(android.graphics.Rect);
diff -U 0 -N appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.widget.ListPopupWindow$ForwardingListener appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.widget.ListPopupWindow$ForwardingListener
--- appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.widget.ListPopupWindow$ForwardingListener   2016-03-09 19:28:22.000000000 -0500
+++ appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.widget.ListPopupWindow$ForwardingListener    1969-12-31 19:00:00.000000000 -0500
@@ -1,5 +0,0 @@
-public abstract class android.support.v7.widget.ListPopupWindow$ForwardingListener implements android.view.View$OnTouchListener {
-  public android.support.v7.widget.ListPopupWindow$ForwardingListener(android.view.View);
-  public abstract android.support.v7.widget.ListPopupWindow getPopup();
-  public boolean onTouch(android.view.View, android.view.MotionEvent);
-}
diff -U 0 -N appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.widget.MenuItemHoverListener appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.widget.MenuItemHoverListener
--- appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.widget.MenuItemHoverListener    1969-12-31 19:00:00.000000000 -0500
+++ appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.widget.MenuItemHoverListener 2016-03-09 19:28:22.000000000 -0500
@@ -0,0 +1,4 @@
+public interface android.support.v7.widget.MenuItemHoverListener {
+  public abstract void onItemHoverExit(android.support.v7.view.menu.MenuBuilder, android.view.MenuItem);
+  public abstract void onItemHoverEnter(android.support.v7.view.menu.MenuBuilder, android.view.MenuItem);
+}
diff -U 0 -N appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.widget.MenuPopupWindow appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.widget.MenuPopupWindow
--- appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.widget.MenuPopupWindow  1969-12-31 19:00:00.000000000 -0500
+++ appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.widget.MenuPopupWindow   2016-03-09 19:28:22.000000000 -0500
@@ -0,0 +1,9 @@
+public class android.support.v7.widget.MenuPopupWindow extends android.support.v7.widget.ListPopupWindow implements android.support.v7.widget.MenuItemHoverListener {
+  public android.support.v7.widget.MenuPopupWindow(android.content.Context, android.util.AttributeSet, int, int);
+  public void setEnterTransition(java.lang.Object);
+  public void setExitTransition(java.lang.Object);
+  public void setHoverListener(android.support.v7.widget.MenuItemHoverListener);
+  public void setTouchModal(boolean);
+  public void onItemHoverEnter(android.support.v7.view.menu.MenuBuilder, android.view.MenuItem);
+  public void onItemHoverExit(android.support.v7.view.menu.MenuBuilder, android.view.MenuItem);
+}
diff -U 0 -N appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.widget.MenuPopupWindow$MenuDropDownListView appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.widget.MenuPopupWindow$MenuDropDownListView
--- appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.widget.MenuPopupWindow$MenuDropDownListView 1969-12-31 19:00:00.000000000 -0500
+++ appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.widget.MenuPopupWindow$MenuDropDownListView  2016-03-09 19:28:22.000000000 -0500
@@ -0,0 +1,12 @@
+public class android.support.v7.widget.MenuPopupWindow$MenuDropDownListView extends android.support.v7.widget.DropDownListView {
+  public android.support.v7.widget.MenuPopupWindow$MenuDropDownListView(android.content.Context, boolean);
+  public void setHoverListener(android.support.v7.widget.MenuItemHoverListener);
+  public void clearSelection();
+  public boolean onKeyDown(int, android.view.KeyEvent);
+  public boolean onHoverEvent(android.view.MotionEvent);
+  public boolean hasFocus();
+  public boolean isFocused();
+  public boolean hasWindowFocus();
+  public boolean isInTouchMode();
+  public boolean onForwardedEvent(android.view.MotionEvent, int);
+}
diff -U 0 -N appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.widget.PopupMenu appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.widget.PopupMenu
--- appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.widget.PopupMenu    2016-03-09 19:28:22.000000000 -0500
+++ appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.widget.PopupMenu 2016-03-09 19:28:22.000000000 -0500
@@ -1 +1 @@
-public class android.support.v7.widget.PopupMenu implements android.support.v7.view.menu.MenuBuilder$Callback,android.support.v7.view.menu.MenuPresenter$Callback {
+public class android.support.v7.widget.PopupMenu {
@@ -15,5 +14,0 @@
-  public boolean onMenuItemSelected(android.support.v7.view.menu.MenuBuilder, android.view.MenuItem);
-  public void onCloseMenu(android.support.v7.view.menu.MenuBuilder, boolean);
-  public boolean onOpenSubMenu(android.support.v7.view.menu.MenuBuilder);
-  public void onCloseSubMenu(android.support.v7.view.menu.SubMenuBuilder);
-  public void onMenuModeChange(android.support.v7.view.menu.MenuBuilder);
diff -U 0 -N appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.widget.TintTypedArray appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.widget.TintTypedArray
--- appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.widget.TintTypedArray   2016-03-09 19:28:22.000000000 -0500
+++ appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.widget.TintTypedArray    2016-03-09 19:28:22.000000000 -0500
@@ -3,0 +4 @@
+  public static android.support.v7.widget.TintTypedArray obtainStyledAttributes(android.content.Context, int, int[]);
diff -U 0 -N appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.widget.Toolbar appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.widget.Toolbar
--- appcompat-v7-23.2.0_ff0f8a1a/android.support.v7.widget.Toolbar  2016-03-09 19:28:22.000000000 -0500
+++ appcompat-v7-24.0.0-alpha1_4f276de6/android.support.v7.widget.Toolbar   2016-03-09 19:28:22.000000000 -0500
@@ -6,0 +7,9 @@
+  public void setTitleMargin(int, int, int, int);
+  public int getTitleMarginStart();
+  public void setTitleMarginStart(int);
+  public int getTitleMarginTop();
+  public void setTitleMarginTop(int);
+  public int getTitleMarginEnd();
+  public void setTitleMarginEnd(int);
+  public int getTitleMarginBottom();
+  public void setTitleMarginBottom(int);</code></pre></noscript></div>


<h2>Design:</h2>

<div><script src='https://gist.github.com/5d7c55382198640345dc.js?file=design.diff'></script>
<noscript><pre><code>diff -U 0 -N design-23.2.0_c138856a/android.support.design.widget.FloatingActionButton design-24.0.0-alpha1_c951a944/android.support.design.widget.FloatingActionButton
--- design-23.2.0_c138856a/android.support.design.widget.FloatingActionButton   2016-03-09 19:28:22.000000000 -0500
+++ design-24.0.0-alpha1_c951a944/android.support.design.widget.FloatingActionButton    2016-03-09 19:28:22.000000000 -0500
@@ -21,0 +22 @@
+  public boolean onTouchEvent(android.view.MotionEvent);</code></pre></noscript></div>


<p>There are no API changes in RecyclerView nor my personal <a href="http://michaelevans.org/blog/2015/07/14/improving-your-code-with-android-support-annotations/">favorite support library</a> &ndash; Support Annotations.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Dagger 1 and Kotlin]]></title>
    <link href="http://michaelevans.org/blog/2016/02/17/using-dagger-1-and-kotlin/"/>
    <updated>2016-02-17T13:43:25-05:00</updated>
    <id>http://michaelevans.org/blog/2016/02/17/using-dagger-1-and-kotlin</id>
    <content type="html"><![CDATA[<p>Unless you&rsquo;ve been hiding from all the news about Android development, you&rsquo;ve <a href="https://medium.com/@CodingDoug/kotlin-android-a-brass-tacks-experiment-part-1-3e5028491bcc#.15w4ypfer">likely</a> <a href="http://antonioleiva.com/kotlin-awesome-tricks-for-android/">heard</a> <a href="http://vishnurajeevan.com/2016/02/13/Using-Kotlin-Extensions-for-Rx-ifying/">about</a> <a href="https://realm.io/news/oredev-jake-wharton-kotlin-advancing-android-dev/">Kotlin</a> (<a href="https://blog.jetbrains.com/kotlin/2016/02/kotlin-1-0-released-pragmatic-language-for-jvm-and-android/">which hit version 1.0 on Monday</a>!). I&rsquo;ve been toying around with it lately (the <a href="https://kotlinlang.org/docs/tutorials/koans.html">Kotlin Koans</a> are a great place to start for a beginner) and wanted to try building an app with it &ndash; that is, until I hit a few road blocks.</p>

<!-- more -->


<p>Personally, I&rsquo;m still a fan of Dagger 1 (or as I refer to it, <a href="https://en.wikipedia.org/wiki/New_Coke#New_Coke_after_Coke_Classic">Dagger Classic</a>), and when I started working on my Kotlin app, that&rsquo;s what I was planning to use. I knew Annotation Processing support was a relatively new addition to Kotlin, so I began to search for some information about how to get Dagger to play nicely with the Kotlin compiler. There&rsquo;s a lot of information about using Dagger 2 with Kotlin but not so much about Dagger Classic. Finally, I stumbled upon <a href="http://www.beyondtechnicallycorrect.com/2015/12/30/android-kotlin-dagger/">this article</a>, which said, &ldquo;Unfortunately, Square’s Dagger 1 does not appear to work with Kotlin while Google’s Dagger 2 does&rdquo;.</p>

<p><em>Bummer.</em></p>

<p>This didn&rsquo;t really deter me, however, because I&rsquo;m stubborn like that. So I proceeded to give it a try with <code>kapt</code><sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> anyway (which seemed like it <em>might</em> do what I want).</p>

<h2>Modules</h2>

<p>The first thing I did was try to create the various Dagger Modules that I&rsquo;d need, which is where I hit my first roadblock. Attempting to compile my module gave the following error:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Error:Modules must not extend from other classes: org.michaelevans.example.AppModule</span></code></pre></td></tr></table></div></figure>


<p>My intial thought was that Kotlin was causing my Module to extend <code>Any</code>, rather than <code>Object</code>. (<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/">Any</a> is the root of the class hierarchy in Kotlin, similar to the way that Object is the root of the Java class hierarchy.) Upon closer inspection, that didn&rsquo;t seem to be the issue, but rather than get hung up on this &ndash; I just converted my modules to Java classes and decided to come back to this issue later.</p>

<h2>@Inject</h2>

<p>So now I had my modules set up, and I went about trying to <code>@Inject</code> some fields on an Activity or two. This yielded another problem: Kotlin doesn&rsquo;t have fields, and we obviously can&rsquo;t do constructor injection on something for which we don&rsquo;t control the constructor &ndash; like <code>Activity</code>.</p>

<p>I thought I&rsquo;d use Dagger to inject a property with &ldquo;method&rdquo; injection like so:</p>

<p><code>lateinit var service : MyService @Inject set</code></p>

<p>But when you try this &ndash; you&rsquo;ll find out that Dagger doesn&rsquo;t support Method injection!</p>

<p>So what can we do? We can target the <a href="https://kotlinlang.org/docs/reference/annotations.html#annotation-use-site-targets">annotation on the backing field</a> like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@field:Inject
</span><span class='line'>lateinit var app : Application</span></code></pre></td></tr></table></div></figure>


<p>And now when we compile, our dependencies are injected! Woo, progress.</p>

<h2>Modules (part 2)</h2>

<p>I was pretty pleased that I had Dagger and Kotlin playing nicely enough that I could write things (other than my modules) in Kotlin, and that DI was working. But it did bother me that I was so close to having the ability to use Kotlin for everything with one exception &ndash; why wouldn&rsquo;t these Modules play nicely?</p>

<p>I dug into the Dagger source to find out where this error was coming from and found <a href="https://github.com/square/dagger/blob/2f9579c48e887ffa316f329c12c2fa2abbec27b1/compiler/src/main/java/dagger/internal/codegen/ModuleAdapterProcessor.java#L217">this</a>. The JavaDoc for <a href="https://docs.oracle.com/javase/8/docs/api/javax/lang/model/type/TypeMirror.html#equals-java.lang.Object-">TypeMirror&rsquo;s equals method</a> says, <code>Semantic comparisons of type equality should instead use Types.isSameType(TypeMirror, TypeMirror). The results of t1.equals(t2) and Types.isSameType(t1, t2) may differ.</code></p>

<p>I was pretty proud of myself for finding this potential issue in Dagger, and was about to submit a Pull Request until I noticed&hellip;<a href="https://github.com/square/dagger/commit/61e471df3891cf017755998b83839042f8455c29">that Jake had solved this issue about 18 months ago</a>.</p>

<p>Running the <code>1.3-SNAPSHOT</code> builds of Dagger that include this change allow my Modules to be compiled properly from Kotlin. <em>Success!</em></p>

<h2>In Summary (aka TL;DR)</h2>

<ul>
<li>Dagger works just fine with Kotlin (as long as you&rsquo;re on 1.3)</li>
<li>Use annotations on the backing fields to perform injection</li>
<li>Use <code>kapt</code> instead of <code>apt</code> for the scope of your <code>dagger-compiler</code> dependency</li>
<li>Make sure to have the following lines in your <code>build.gradle</code></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>kapt {
</span><span class='line'>    generateStubs = true
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Hopefully this helps others who are still using Dagger Classic and want to try out Kotlin!</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p><code>kapt</code> is <a href="http://blog.jetbrains.com/kotlin/2015/06/better-annotation-processing-supporting-stubs-in-kapt/">the annotation processing tool for Kotlin</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Studio Tips and Tricks]]></title>
    <link href="http://michaelevans.org/blog/2016/01/06/android-studio-tips-and-tricks/"/>
    <updated>2016-01-06T20:25:53-05:00</updated>
    <id>http://michaelevans.org/blog/2016/01/06/android-studio-tips-and-tricks</id>
    <content type="html"><![CDATA[<p>I recently attended Google&rsquo;s <a href="https://androiddevsummit.withgoogle.com/">Android Dev Summit</a> where the Tools team presented a talk entitled <a href="https://www.youtube.com/watch?v=Y2GC6P5hPeA">Android Studio For Experts</a>. The room was packed for the 90 minute session, where a lot of great Android Studio tips were shared. This gave me the idea of showing off some of my favorite Android Studio tips!</p>

<!-- more -->


<h2>Language Injection</h2>

<p>Ever needed to type a JSON String? Perhaps you&rsquo;ve used one as a text fixture for one of your GSON deserializers and know that it&rsquo;s a huge pain to manage all those backslashes. Fortunately, IntelliJ has a feature called <em>Language Injection</em>, which allows you to edit the JSON fragment in its own editor, and then IntelliJ will properly inject that fragment into your code as an escaped String.</p>

<p><img class="center" src="http://michaelevans.org/images/2016/01/06/fragment_intention.png" width="300" height="100" title="Intention Action" ></p>

<p>Inject Language/Reference is an intention action<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>, so you can start it by using <kbd>⌥</kbd>+<kbd>Return</kbd>, or <kbd>⌘</kbd>+<kbd>⇧</kbd>+<kbd>A</kbd> and searching for it.</p>

<p><img class="center" src="http://michaelevans.org/images/2016/01/06/fragment_editor.png" width="300" height="300" title="Editing JSON" ></p>

<h2><a href="https://xkcd.com/1171/">Check RegExp</a></h2>

<p>This is pretty similar to the last tip, but if you select the language of the fragment as &ldquo;RegExp&rdquo;, you&rsquo;ll get a handy regular expression tester!</p>

<p><img class="center" src="http://michaelevans.org/images/2016/01/06/reg_exp_1.png" width="300" height="150" title="Editing Regex" ></p>

<p><img class="center" src="http://michaelevans.org/images/2016/01/06/reg_exp_2.png" width="300" height="200" title="Valid Regex" ></p>

<p><img class="center" src="http://michaelevans.org/images/2016/01/06/reg_exp_3.png" width="300" height="200" title="Invalid Regex" ></p>

<h2>Smart(er) Completion</h2>

<p>Now I’m pretty sure most of you have used IntelliJ’s code completion features. Press <kbd>⌥</kbd>+<kbd>Space</kbd>, and IntelliJ/Android Studio lists options to complete the names of classes, methods, fields, and keywords within the visibility scope. But have you ever noticed that the suggestions seem to be based off the characters you&rsquo;ve typed, rather than the actual <em>types</em> that are expected in the scope of the caret? Something like this:</p>

<p><img class="center" src="http://michaelevans.org/images/2016/01/06/basic_autocomplete.png" width="300" height="200" title="Autocomplete" ></p>

<p>Well if you use <em>Type Completion</em> (by pressing <kbd>⌥</kbd>+<kbd>⇧</kbd>+<kbd>Space</kbd>), you will see a list of suggestions containing only those types that are applicable to the current context. In the example below, you&rsquo;ll only get types that return a <code>Reader</code>, which is the type that the <code>BufferedReader</code>&rsquo;s constructor expects:</p>

<p><img class="center" src="http://michaelevans.org/images/2016/01/06/smart_autocomplete.png" width="300" height="200" title="Better Autocomplete" ></p>

<p>What&rsquo;s even cooler is that you can press it an additional time, and IntelliJ will do a deeper scan (looking at static method calls, chained expressions, etc.) to find more options for you:</p>

<p><img class="center" src="http://michaelevans.org/images/2016/01/06/chained_autocomplete.png" width="300" height="200" title="Chained Autocomplete" ></p>

<h2>Discovering Your Own Tips and Tricks</h2>

<p>Another really cool feature is the <em>Productivity Guide</em>. It shows you usage statistics for a lot of IntelliJ&rsquo;s features, such as how many keystokes you have saved or possible bugs you&rsquo;ve avoided by using the various shortcuts. It&rsquo;s also very helpful for discovering features you might not have known about; you can scroll through the list of unused features to see what you&rsquo;re missing out on! To find the productivity guide, go to <code>Help -&gt; Productivity Guide</code>.</p>

<p><img class="center" src="http://michaelevans.org/images/2016/01/06/productivity_guide.png" width="700" height="500" title="Invalid Regex" ></p>

<h2>Bonus Round &ndash; IntelliJ 15 Only</h2>

<p>Did you know IntelliJ has <a href="https://www.jetbrains.com/idea/help/testing-restful-web-services.html">its own REST client</a>? Super handy for testing out API calls without something like <a href="https://luckymarmot.com/paw">Paw</a> or <a href="https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop?hl=en">Postman</a>.</p>

<p>Have any other favorite tips or tricks? Let me know!</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p><a href="https://www.jetbrains.com/idea/help/intention-actions.html">Intention Actions</a> are those suggestions in the little popup menus that allow you to quick-fix things like classes that haven&rsquo;t been imported, etc.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing Intents with Espresso Intents]]></title>
    <link href="http://michaelevans.org/blog/2015/09/15/testing-intents-with-espresso-intents/"/>
    <updated>2015-09-15T22:03:57-04:00</updated>
    <id>http://michaelevans.org/blog/2015/09/15/testing-intents-with-espresso-intents</id>
    <content type="html"><![CDATA[<p>A few weeks ago, I wrote <a href="http://michaelevans.org/blog/2015/08/03/using-espresso-for-easy-ui-testing/">a basic introduction</a> on how to use Espresso to test the UI of an Android application. However, when I went to write instrumentation tests for <a href="https://github.com/MichaelEvans/Aftermath">Aftermath</a>, I ran into trouble testing things that exist outside my application&rsquo;s process. For example, what do you do when your app needs to use the Android Intent system to call upon the dialer or the browser, or pick a contact with the contact picker? What about testing a share action? Because these apps run outside your application itself, you can&rsquo;t use Espresso to interact with them. So how can you test your app&rsquo;s behavior? You can either use Espresso-Intents or UI Automator (but that&rsquo;s another show).</p>

<!-- more -->


<h2>The Setup</h2>

<p>Setting up Espresso-Intents is dead simple if you&rsquo;re already using Espresso. Make sure you&rsquo;re already depending on Espresso, the rules, and the runner and then add the dependency:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>androidTestCompile 'com.android.support.test.espresso:espresso-intents:2.2.1'</span></code></pre></td></tr></table></div></figure>


<h2>The Tests</h2>

<p>Let&rsquo;s imagine that you had an application with a button to launch the contact picker, which would then show the contact <code>Uri</code> of the selected contact in a text view. Not only would this be hard to test because you are leaving your own application&rsquo;s process, but you don&rsquo;t even know if your test can rely on any contacts even existing on the test device (not to mention not knowing which app is registered to handle the contact-picking Intent itself). Fortunately we can use Espresso-Intents to stub out the response for activities that are launched with <code>startActivityForResult</code>.</p>

<p>Here&rsquo;s what that might look like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Before</span> <span class="kd">public</span> <span class="kt">void</span> <span class="n">stubContactIntent</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Intent</span> <span class="n">intent</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Intent</span><span class="o">();</span>
</span><span class='line'>    <span class="n">intent</span><span class="o">.</span><span class="na">setData</span><span class="o">(</span><span class="n">Uri</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="n">TEST_URI</span><span class="o">));</span>
</span><span class='line'>    <span class="n">ActivityResult</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ActivityResult</span><span class="o">(</span><span class="n">Activity</span><span class="o">.</span><span class="na">RESULT_OK</span><span class="o">,</span> <span class="n">intent</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">intending</span><span class="o">(</span><span class="n">allOf</span><span class="o">(</span>
</span><span class='line'>        <span class="n">hasData</span><span class="o">(</span><span class="n">ContactsContract</span><span class="o">.</span><span class="na">CommonDataKinds</span><span class="o">.</span><span class="na">Phone</span><span class="o">.</span><span class="na">CONTENT_URI</span><span class="o">),</span>
</span><span class='line'>        <span class="n">hasAction</span><span class="o">(</span><span class="n">Intent</span><span class="o">.</span><span class="na">ACTION_PICK</span><span class="o">))</span>
</span><span class='line'>    <span class="o">).</span><span class="na">respondWith</span><span class="o">(</span><span class="n">result</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Test</span> <span class="kd">public</span> <span class="kt">void</span> <span class="n">pickContact_viewIsSet</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">//Check to make sure the Uri field is empty</span>
</span><span class='line'>  <span class="n">onView</span><span class="o">(</span><span class="n">withId</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">phone_number</span><span class="o">)).</span><span class="na">check</span><span class="o">(</span><span class="n">matches</span><span class="o">(</span><span class="n">withText</span><span class="o">(</span><span class="s">&quot;&quot;</span><span class="o">)));</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//Start contact picker</span>
</span><span class='line'>  <span class="n">onView</span><span class="o">(</span><span class="n">withId</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">pick_contact</span><span class="o">)).</span><span class="na">perform</span><span class="o">(</span><span class="n">click</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//Verify that Uri was set properly.</span>
</span><span class='line'>  <span class="n">onView</span><span class="o">(</span><span class="n">withId</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">phone_number</span><span class="o">)).</span><span class="na">check</span><span class="o">(</span><span class="n">matches</span><span class="o">(</span><span class="n">withText</span><span class="o">(</span><span class="n">TEST_URI</span><span class="o">)));</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using the <code>intending</code> API, we can respond with our mock <code>ActivityResult</code> data. If you&rsquo;ve used <a href="http://mockito.org/">Mockito</a> before, this stubbing will look very familiar to the <code>when</code>/<code>respondWith</code> methods. In this example, we&rsquo;re going to stub any Intents for the <code>ACTION_PICK</code> Intent with the <code>CONTENT_URI</code> data set to return a particular hard-coded Uri.</p>

<p>So this is great &mdash; our test no longer depends on any particular contact picker app, or any contacts even being present on the test device. But what do we do if we want to verify that a particular outgoing intent is launched with some given extras or data?</p>

<p>Let&rsquo;s say our sample app had an input field that would take a phone number, with a button to start the dialer to call that number. (Yes, I do realize that this application would likely not receive any venture capital funding).</p>

<p>All we have to do is use the <code>intended</code> API, which is most similar to Mockito&rsquo;s <code>verify</code> method. A sample of this might look like the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span> <span class="kd">public</span> <span class="kt">void</span> <span class="n">typeNumber_ValidInput_InitiatesCall</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">onView</span><span class="o">(</span><span class="n">withId</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">number_input</span><span class="o">)).</span><span class="na">perform</span><span class="o">(</span><span class="n">typeText</span><span class="o">(</span><span class="n">VALID_PHONE_NUMBER</span><span class="o">),</span> <span class="n">closeSoftKeyboard</span><span class="o">());</span>
</span><span class='line'>    <span class="n">onView</span><span class="o">(</span><span class="n">withId</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">dial_button</span><span class="o">)).</span><span class="na">perform</span><span class="o">(</span><span class="n">click</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">intended</span><span class="o">(</span><span class="n">allOf</span><span class="o">(</span><span class="n">hasAction</span><span class="o">(</span><span class="n">Intent</span><span class="o">.</span><span class="na">ACTION_DIAL</span><span class="o">),</span> <span class="n">hasData</span><span class="o">(</span><span class="n">INTENT_DATA_PHONE_NUMBER</span><span class="o">)));</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this case, we&rsquo;re just going to verify that the intended Intent had the right action and the right data that we&rsquo;d expect to hand off to the dialer.</p>

<p>And you&rsquo;ll notice that the Espresso-Intents package includes handy Hamcrest matchers that you can use for things like Strings on the different parts of the Intent.</p>

<p>Now go forth and test those inter-app component interactions!</p>

<p>The sample code for this blog post can be found <a href="https://github.com/MichaelEvans/Espresso-Samples/tree/master/espresso-intents-sample">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Droidcon NYC 2015: @AnnotationProcessors("ByExample")]]></title>
    <link href="http://michaelevans.org/blog/2015/09/09/droidcon-nyc-2015-at-annotationprocessors-byexample/"/>
    <updated>2015-09-09T16:30:48-04:00</updated>
    <id>http://michaelevans.org/blog/2015/09/09/droidcon-nyc-2015-at-annotationprocessors-byexample</id>
    <content type="html"><![CDATA[<p>Here are slides and the video for my talk from Droidcon NYC 2015 on writing your own Annotation Processor:</p>

<iframe width="640" height="510" src="http://www.youtube.com/embed/dBUAqPs0TB0 " frameborder="0" webkitAllowFullScreen mozallowfullscreen allowfullscreen></iframe>


<p></p>

<script async="true" class="speakerdeck-embed" data-id="95e696d902d845dcb5079e0691eb5f3f" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"> </script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Espresso for Easy UI Testing]]></title>
    <link href="http://michaelevans.org/blog/2015/08/03/using-espresso-for-easy-ui-testing/"/>
    <updated>2015-08-03T22:16:49-04:00</updated>
    <id>http://michaelevans.org/blog/2015/08/03/using-espresso-for-easy-ui-testing</id>
    <content type="html"><![CDATA[<p>One thing that I notice when I talk to Android developers is that a lot of them don&rsquo;t put an emphasis on testing. They say that it&rsquo;s too hard to write them or that they are too hard to integrate and set up, or give a bunch of other reasons why they don&rsquo;t. But it&rsquo;s actually pretty simple to write <a href="https://code.google.com/p/android-test-kit/wiki/Espresso">Espresso</a> tests, and they really aren&rsquo;t that hard to integrate with your code base.</p>

<!-- more -->


<h2>Easy to write</h2>

<p>Espresso tests are dead simple to write. They come in three parts.</p>

<ol>
<li>ViewMatchers &ndash; something to find the view to act upon/assert something about</li>
<li>ViewActions &ndash; something to perform an action (type text, click a button)</li>
<li>ViewAssertions &ndash; something to verify what you expect</li>
</ol>


<p>For example, the following test would type the name &ldquo;Steve&rdquo; into an EditText with the id <code>name_field</code>, click a Button with the id <code>greet_button</code> and then verify that the text &ldquo;Hello Steve!&rdquo; appears on the screen:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testSayHello</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">onView</span><span class="o">(</span><span class="n">withId</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">name_field</span><span class="o">)).</span><span class="na">perform</span><span class="o">(</span><span class="n">typeText</span><span class="o">(</span><span class="s">&quot;Steve&quot;</span><span class="o">));</span>
</span><span class='line'>  <span class="n">onView</span><span class="o">(</span><span class="n">withId</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">greet_button</span><span class="o">)).</span><span class="na">perform</span><span class="o">(</span><span class="n">click</span><span class="o">());</span>
</span><span class='line'>  <span class="n">onView</span><span class="o">(</span><span class="n">withText</span><span class="o">(</span><span class="s">&quot;Hello Steve!&quot;</span><span class="o">)).</span><span class="na">check</span><span class="o">(</span><span class="n">matches</span><span class="o">(</span><span class="n">isDisplayed</span><span class="o">()));</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Seems simple enough right? But what about when other threads are involved?</p>

<h2>Integration</h2>

<p>From the Espresso documentation:</p>

<blockquote><p>The centerpiece of Espresso is its ability to seamlessly synchronize all test operations with the application under test. By default, Espresso waits for UI events in the current message queue to process and default AsyncTasks* to complete before it moves on to the next test operation. This should address the majority of application/test synchronization in your application.&#8221;</p></blockquote>


<p>But if you&rsquo;re like me, you&rsquo;re not writing AsyncTasks to handle your background operations. My go-to tool for making HTTP requests (probably one of the most common uses of AsyncTask) is <a href="http://square.github.io/retrofit/">Retrofit</a>. So what can we do? Espresso has an API called <code>registerIdlingResource</code>, which allows you to synchronize your custom logic with Espresso.</p>

<p>With this knowledge, one way you might approach this is to implement a mock version of your Retrofit interface, and then use something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MockApiService</span> <span class="kd">implements</span> <span class="n">ApiService</span><span class="o">,</span> <span class="n">IdlingResource</span> <span class="o">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">ApiService</span> <span class="n">api</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">AtomicInteger</span> <span class="n">counter</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">ResourceCallback</span><span class="o">&gt;</span> <span class="n">callbacks</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">MockApiService</span><span class="o">(</span><span class="n">ApiService</span> <span class="n">api</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">api</span> <span class="o">=</span> <span class="n">api</span><span class="o">;</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">callbacks</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span> 
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">counter</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AtomicInteger</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">Response</span> <span class="nf">doWork</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">counter</span><span class="o">.</span><span class="na">incrementAndGet</span><span class="o">();</span>
</span><span class='line'>      <span class="k">return</span> <span class="nf">decrementAndNotify</span><span class="o">(</span><span class="n">api</span><span class="o">.</span><span class="na">doWork</span><span class="o">());</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getName</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isIdleNow</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">counter</span><span class="o">.</span><span class="na">get</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">registerIdleTransitionCallback</span><span class="o">(</span><span class="n">ResourceCallback</span> <span class="n">resourceCallback</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">callbacks</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">resourceCallback</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">T</span> <span class="n">decrementAndNotify</span><span class="o">(</span><span class="n">T</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">counter</span><span class="o">.</span><span class="na">decrementAndGet</span><span class="o">();</span>
</span><span class='line'>      <span class="n">notifyIdle</span><span class="o">();</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">data</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">void</span> <span class="nf">notifyIdle</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">counter</span><span class="o">.</span><span class="na">get</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">for</span> <span class="o">(</span><span class="n">ResourceCallback</span> <span class="n">cb</span> <span class="o">:</span> <span class="n">callbacks</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="n">cb</span><span class="o">.</span><span class="na">onTransitionToIdle</span><span class="o">();</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This tells Espresso that your app is idle after the methods are called. But you should immediately see the problem here &ndash; you&rsquo;ll end up writing a TON of boilerplate. As you have more methods in your interface, and lot of repeated increment and decrement code&hellip;there must be a better way. (There is!)</p>

<p>The &ldquo;trick&rdquo; lies right in the selling point in the Espresso documentation, &ldquo;Espresso waits for UI events&hellip; and default <em><strong>AsyncTasks</strong></em> to complete&rdquo;. If we could somehow execute our Retrofit requests on the AsyncTasks&#8217; ThreadPoolExecutor, we&rsquo;d get sychronization for free!</p>

<p>Fortunately, Retrofit&rsquo;s <code>RestAdapter.Builder</code> class has just such a method!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">new</span> <span class="n">RestAdapter</span><span class="o">.</span><span class="na">Builder</span><span class="o">()</span>
</span><span class='line'>   <span class="o">.</span><span class="na">setExecutors</span><span class="o">(</span><span class="n">AsyncTask</span><span class="o">.</span><span class="na">THREAD_POOL_EXECUTOR</span><span class="o">,</span> <span class="k">new</span> <span class="n">MainThreadExecutor</span><span class="o">())</span>
</span><span class='line'>   <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>And it&rsquo;s that simple &ndash; Now you have no excuse not to write some Espresso tests!</p>

<h4>More Resources</h4>

<ul>
<li><a href="https://code.google.com/p/android-test-kit/wiki/EspressoV2CheatSheet">The Espresso V2 Cheatsheet</a></li>
<li><a href="http://blog.sqisland.com/2015/04/espresso-custom-idling-resource.html">Read more about writing custom idling resources</a></li>
</ul>


<p>Thanks to <a href="https://twitter.com/queencodemonkey">Huyen Tue Dao</a> for editing this post!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Improving your code with Android Support Annotations]]></title>
    <link href="http://michaelevans.org/blog/2015/07/14/improving-your-code-with-android-support-annotations/"/>
    <updated>2015-07-14T22:46:56-04:00</updated>
    <id>http://michaelevans.org/blog/2015/07/14/improving-your-code-with-android-support-annotations</id>
    <content type="html"><![CDATA[<p>If you haven&rsquo;t heard of the Android Support Annotations library yet, you&rsquo;re missing out on a neat new package that will help you catch bugs in your apps. Included in the library is a number of Java annotations, that will help Android Studio check your code for possible errors and report them to you. There are quite a few of them, so I only plan to go over a few of them here, but you should definitely <a href="http://tools.android.com/tech-docs/support-annotations">check out the docs</a> for more info about the rest.</p>

<h2>@NonNull / @Nullable</h2>

<p><code>@NonNull</code> and <code>@Nullable</code> are probably the most basic of the support annotations, but also some of the most helpful! Annotate a parameter or method with either of these to denote if the parameter or method&rsquo;s return value can be null or not, and voila, now Android Studio can give us a nice warning that we&rsquo;re doing something unsafe.</p>

<!-- more -->


<p>Turn this:</p>

<p><img class="center" src="http://michaelevans.org/images/2015/07/14/no-annotations.png" width="600" height="300" title="Method with no annotations" ></p>

<p>into this:</p>

<p><img class="center" src="http://michaelevans.org/images/2015/07/14/nonnull.png" width="600" height="250" title="with @NonNull" ></p>

<p>Bonus points: We can even take this example one step further with the <code>@CheckResult</code> annotation, to tell us know that the return type of this method is something that we are expected to use, rather than the method having a side effect.</p>

<p><img class="center" src="http://michaelevans.org/images/2015/07/14/checkreturn.png" width="600" height="300" title="Check that return type!" ></p>

<h2>@StringRes / @DrawableRes / etc.</h2>

<p>Have you ever attempted to call <code>setText</code> on a TextView, and gotten a somewhat mysterious <code>android.content.res.Resources$NotFoundException: String resource ID #0x3039</code> exception? If you pass an integer to setText, TextView assumes it&rsquo;s a String resource id, and will look it up in order to set the text. If only there were a way to denote that integers are not valid ids for this method&hellip;<code>@StringRes</code> to the rescue!</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public void setText(@StringRes int id) {
</span><span class='line'>  // Do something like getString(id), etc.
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Now if you try to pass a non-String resource id to this method, you get something like this:</p>

<p><img class="center" src="http://michaelevans.org/images/2015/07/14/stringres.png" width="500" height="200" title="Method takes a @StringRes id, not an int" ></p>

<p>(There are resouce annotations for all resoruce types, <code>@DrawableRes</code>, <code>@ColorRes</code>, <code>@InterpolatorRes</code>, etc.)</p>

<h2>@Keep</h2>

<p>Today I discovered a new support annotation <code>@Keep</code>. According to the support annotation docs, this annotation hasn&rsquo;t been hooked up to the Gradle plugin yet<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>, but it will let you annotate methods and classes that should be retained when minimizing the app.</p>

<p>If you&rsquo;ve ever messed around with the cryptic <code>-keep class com.foo.bar { public static &lt;methods&gt; }</code> incantations that you need to use to summon the Proguard Gods, you&rsquo;ll know how painful it is to rip your hair out, while trying to exclude a particular method or class from being optimized away. This handy annotation will tell Proguard to leave the method or class alone &ndash; like so:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public class Example {
</span><span class='line'>  @Keep
</span><span class='line'>  public void doSomething() {
</span><span class='line'>      // hopefully this method does something
</span><span class='line'>  }
</span><span class='line'>  ...
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>The best part is &ndash; if you&rsquo;re using <code>appcompat-v7</code>, you&rsquo;re already including <code>support-annotations</code>, so just start using them already!</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p><a href="https://android-review.googlesource.com/#/c/152983/">Looks like this is merged</a> into the 1.3 version of the plugin<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Ripples with Rounded Corners]]></title>
    <link href="http://michaelevans.org/blog/2015/05/07/android-ripples-with-rounded-corners/"/>
    <updated>2015-05-07T22:55:36-04:00</updated>
    <id>http://michaelevans.org/blog/2015/05/07/android-ripples-with-rounded-corners</id>
    <content type="html"><![CDATA[<p>So recently I was trying to add a ripple to a view that had rounded corners. Simple enough right? Let&rsquo;s just say I have a FrameLayout with the background similar to this one:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?xml version="1.0" encoding="utf-8"?&gt;
</span><span class='line'>&lt;shape xmlns:android="http://schemas.android.com/apk/res/android"
</span><span class='line'>    android:shape="rectangle"&gt;
</span><span class='line'>    &lt;solid android:color="@android:color/transparent"/&gt;
</span><span class='line'>    &lt;corners android:radius="15dp" /&gt;
</span><span class='line'>    &lt;stroke
</span><span class='line'>        android:width="1px"
</span><span class='line'>        android:color="#000000" /&gt;
</span><span class='line'>&lt;/shape&gt;</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s not quite as simple as setting the foreground to <code>?attr/selectableItemBackground</code>, or else you&rsquo;ll see the ripple surpasses the corners (which doesn&rsquo;t look <em>so</em> bad when your border radius is small, but this would look terrible with a circlular view):</p>

<p><img class="center" src="http://michaelevans.org/images/2015/05/07/before.gif" width="600" height="600" title="Rounded Corner Fail!" ></p>

<p>The solution for this lies in the special mask layer of the <a href="https://developer.android.com/reference/android/graphics/drawable/RippleDrawable.html">RippleDrawable</a>. You specify the mask layer via the <code>android:id</code> value set to <code>@android:id/mask</code>. For the example above, you can set the mask to the same size/shape as the view you&rsquo;re masking, and then the ripple will only show for that area. For something like our example above, you&rsquo;d use something like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?xml version="1.0" encoding="utf-8"?&gt;
</span><span class='line'>&lt;ripple xmlns:android="http://schemas.android.com/apk/res/android"
</span><span class='line'>    android:color="?android:attr/colorControlHighlight"&gt;
</span><span class='line'>    &lt;item android:id="@android:id/mask"&gt;
</span><span class='line'>        &lt;shape android:shape="rectangle"&gt;
</span><span class='line'>            &lt;solid android:color="#000000" /&gt;
</span><span class='line'>            &lt;corners android:radius="15dp" /&gt;
</span><span class='line'>        &lt;/shape&gt;
</span><span class='line'>    &lt;/item&gt;
</span><span class='line'>    &lt;item android:drawable="@drawable/rounded_corners" /&gt;
</span><span class='line'>&lt;/ripple&gt;</span></code></pre></td></tr></table></div></figure>


<p>Now when you tap on the view, you&rsquo;ll see something like this:</p>

<p><img class="center" src="http://michaelevans.org/images/2015/05/07/after.gif" width="600" height="600" title="Rounded Corners!" ></p>

<p><em>Huzzah!</em></p>

<p>Another tip: if you don&rsquo;t set a click listener for a FrameLayout (like we used in this example), the pressed state will never be used!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blurred background effect for Android]]></title>
    <link href="http://michaelevans.org/blog/2014/07/09/blurred-background-effect-for-android/"/>
    <updated>2014-07-09T23:04:46-04:00</updated>
    <id>http://michaelevans.org/blog/2014/07/09/blurred-background-effect-for-android</id>
    <content type="html"><![CDATA[<p>A few months ago, the Android design team reviewed apps that they thought were good-looking, and were referred to as the &ldquo;<a href="https://play.google.com/store/apps/collection/promotion_3000235_beautiful_apps?hl=en">Beautiful Design Collection</a>&rdquo;, as part of their <a href="https://www.youtube.com/playlist?list=PLWz5rJ2EKKc8j2B95zGMb8muZvrIy-wcF">Android Design in Action</a> series.</p>

<p>One of these apps was <a href="https://play.google.com/store/apps/details?id=com.etsy.android&amp;hl=en">Etsy</a>, which had a very cool fading blur background effect, which you can see here:</p>

<p><img class="center" src="http://michaelevans.org/images/2014/07/09/2014-07-09-23_25_40.gif" width="600" height="600" title="Etsy Example" ></p>

<p>As a learning experiment, I set off to replicate this behavior. I had seen a library by Manuel Peinado called <a href="https://github.com/ManuelPeinado/GlassActionBar">GlassActionBar</a> which demonstrated a similar glass-like blur effect on the ActionBar, so I decided to use that code for blurring my background.</p>

<p>The code itself is pretty interesting, specifically the bit for versions on Jelly Bean or higher. If you&rsquo;re using API version 16 and up, you can use <a href="http://android-developers.blogspot.com/2013/08/renderscript-intrinsics.html">Renderscript Intrinsics</a>, which are a set of built-in functions that require very little code to use, but are optimized for high-performance.</p>

<p>In my sample tests, using Renderscript to blur the image took on average about ~175ms, vs ~2 seconds doing the blur using Java code. (The required code is also only a tiny fraction of the length of the Renderscript one).</p>

<p>Renderscript is extremely easy to add to your project, just throw</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>    renderscriptTargetApi 19
</span><span class='line'>    renderscriptSupportMode true</span></code></pre></td></tr></table></div></figure>


<p>in your <code>build.gradle</code> and you should be ready to roll.</p>

<p>Once you have the blurring, the rest of the process is fairly straight forward. When you plan to leave an activity, create a bitmap of the current view and write it to disk. When you start your new activity (which should have a transparent background), you override the transition (otherwise you&rsquo;ll get the default zoom), and set the background to the blurred image you saved earlier. Add a fade in for the alpha and you get a nice little effect!</p>

<p><img class="center" src="http://michaelevans.org/images/2014/07/09/2014-07-09-23_34_05.gif" width="600" height="600" title="My Example" ></p>

<p>If you&rsquo;d like to see how this looks in a sample project, you can find it on Github <a href="https://github.com/MichaelEvans/EtsyBlurExample">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building OBS Studio for OS X]]></title>
    <link href="http://michaelevans.org/blog/2014/06/07/building-obs-studio-for-os-x/"/>
    <updated>2014-06-07T22:59:38-04:00</updated>
    <id>http://michaelevans.org/blog/2014/06/07/building-obs-studio-for-os-x</id>
    <content type="html"><![CDATA[<p>Recently I&rsquo;ve been watching a bunch of streams on <a href="http://www.twitch.tv/">Twitch</a>, and was investigating the best options to stream from OS X. Sadly most of the ones I found were very expensive, until I saw that <a href="http://obsproject.com/">Open Broadcaster Software</a>, which was previously only for Windows, was <a href="https://github.com/jp9000/obs-studio">being rewritten</a> to work with OS X and Linux. However, it&rsquo;s still highly beta/under development and as a result, there&rsquo;s not a lot of documentation on how to build it.</p>

<p>Here&rsquo;s how I did it:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew install ffmpeg glew cmake qt5
</span><span class='line'>git clone https://github.com/jp9000/obs-studio.git
</span><span class='line'>cd obs-studio
</span><span class='line'>mkdir cmbuild && cd cmbuild
</span><span class='line'>export CMAKE_PREFIX_PATH=/usr/local/Cellar/qt5/5.2.1/lib/cmake
</span><span class='line'>cmake .. && make
</span><span class='line'>cpack</span></code></pre></td></tr></table></div></figure>


<p>This will leave you with a disk image named <code>obs-studio-x64-&lt;sha1-hash&gt;.dmg</code>, which you can mount and install, just like any other OS X application.</p>

<p>Happy Streaming!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Embedding Google+ Posts in Octopress]]></title>
    <link href="http://michaelevans.org/blog/2014/04/13/embedding-google-plus-posts-in-octopress/"/>
    <updated>2014-04-13T13:46:25-04:00</updated>
    <id>http://michaelevans.org/blog/2014/04/13/embedding-google-plus-posts-in-octopress</id>
    <content type="html"><![CDATA[<p>A few months back I wrote a blog post about my <a href="http://www.michaelevans.org/blog/2013/12/31/2013-in-review/">2013 in Review</a>. One thing I wanted to add to the post was a link to the #AutoAwesomed video, which was generated from photos and videos I took during the year, which were backed up to Google+.</p>

<p>Fortunately for me, Google allows you to embed posts into your pages using a technique which is documented <a href="https://developers.google.com/+/web/embedded-post/">here</a>. The problem with this method, for me at least, is that my blog is created using <a href="http://octopress.org/">Octopress</a>, and posts are written in Markdown and then rendered to HTML. Octopress does, however, allow you to write plugins which can help us with this issue.</p>

<p>Here&rsquo;s the <a href="https://gist.github.com/MichaelEvans/10590514">plugin</a> in all it&rsquo;s glory:</p>

<div><script src='https://gist.github.com/10590514.js?file=google_plus.rb'></script>
<noscript><pre><code>module Jekyll

  class GooglePlusEmbedTag &lt; Liquid::Tag
    @post = nil
    @height = &#39;&#39;
    @width = &#39;&#39;

    def initialize(tag_name, markup, tokens)
      if markup =~ /(https:\/\/plus.google.com\/\d+\/posts\/\w+)/i
        @url  = $1
      end
      super
    end

    def render(context)
      &quot;&lt;div align=&#39;center&#39;&gt;&lt;div class=&#39;g-post&#39; data-href=&#39;#{@url}&#39;&gt;&lt;/div&gt;&lt;/div&gt;&quot;
    end
  end
end

Liquid::Template.register_tag(&#39;google_plus&#39;, Jekyll::GooglePlusEmbedTag)</code></pre></noscript></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ADB over WiFi]]></title>
    <link href="http://michaelevans.org/blog/2014/03/03/adb-over-wifi/"/>
    <updated>2014-03-03T22:30:38-05:00</updated>
    <id>http://michaelevans.org/blog/2014/03/03/adb-over-wifi</id>
    <content type="html"><![CDATA[<p>I haven&rsquo;t updated my blog in a while, but this is a tip/trick that&rsquo;s so good that I had to share. It&rsquo;s not a very widely known feature, but once you try it, you&rsquo;ll wonder how you lived with out it: using ADB over WiFi! That&rsquo;s right, no more plugging in all your devices to your computer to debug/etc. Best of all, no root required.</p>

<p>It&rsquo;s also ingeniusly simple. First, connect the device you want to use via a USB cable.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>adb tcpip 5555
</span><span class='line'>(Feel free to unplug it now)
</span><span class='line'>adb connect &lt;IP address of your device&gt;</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s it! Enjoy your tether-free development.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2013 in Review]]></title>
    <link href="http://michaelevans.org/blog/2013/12/31/2013-in-review/"/>
    <updated>2013-12-31T11:27:05-05:00</updated>
    <id>http://michaelevans.org/blog/2013/12/31/2013-in-review</id>
    <content type="html"><![CDATA[<p>Today is December 31st, and I decided to write up a blog post, reflecting on the year that I&rsquo;ve had. I&rsquo;ve learned a lot over the last twelve months, and done a lot of interesting things (okay, at least interesting to me). Here&rsquo;s a brief overview of what happened:</p>

<div align='center'><div class='g-post' data-href='https://plus.google.com/114052868601022948953/posts/ZzXcKVs2fvH'></div></div>




<!-- more -->


<h2>Looking Back</h2>

<ul>
<li><p><strong>January 17th</strong>: Released the first version of my <a href="https://play.google.com/store/apps/details?id=com.evans.hackernews">Hacker News</a> app to the Play Store. It was one of my first Android releases in a long while, and my first using the &ldquo;Holo&rdquo; design language that came about in Android 4.0+. It was met with a surprising amount of positivity when I <a href="https://news.ycombinator.com/item?id=5072757">posted it on Hacker News</a>, and has a 4.1 rating as of this post. I am actually in the process of rewriting this app, using a lot of the techniques I learned in the past 12 months.</p></li>
<li><p><strong>February</strong>: In February I was invited to take part in the <a href="http://www.michaelevans.org/blog/2013/02/20/googles-project-glass/">Glass Foundry</a>, a hackathon for Google Glass. I was one of the first non-Googlers to get my hands on it, and the team I was on won! Our prize was a Google Glass, free of charge. We built a recipes app for Glass, which would allow for hands-free cooking.</p></li>
<li><p><strong>April</strong>: April was a pretty exciting month for me, I quit my job as a developer at The Washington Post, and started a new one as a developer at LivingSocial. I also traveled to New York City, in order to be one of the first people to pick up <a href="http://www.michaelevans.org/blog/2013/04/29/hands-on-with-google-glass/">Google Glass</a>.</p></li>
<li><p><strong>May</strong>: In May, I was fortunate enough to attend my third Google I/O. If you know anything about Google I/O, you&rsquo;d know that statement alone is enough.</p></li>
<li><p><strong>August</strong>: After returning from Defcon 21, I posted <a href="http://www.michaelevans.org/blog/2013/08/14/tutorial-building-an-android-to-do-list-app-using-parse/">a pair</a> of <a href="http://www.michaelevans.org/blog/2013/08/20/parse-android-todo-app-tutorial-part-two-users/">Android development tutorials</a> on how to make a Todo application using Parse. These have been two of my most popular posts to date, and I&rsquo;ll definitely be working on more in the future. If you enjoyed those posts, feel free to let me know what other topics you&rsquo;d like to see covered!</p></li>
<li><p><strong>September</strong>: After a bit of a hiatus from Android app development, I released an app called <a href="https://play.google.com/store/apps/details?id=org.michaelevans.bikefinder">Bike Finder</a>. This app is for locating bikes for use with Capital Bikeshare in Washington DC, with support for CityBikes and Divvy (among others) soon.</p></li>
<li><p><strong>October</strong>: Another hackathon attempt, this time without success; Ed, Jon and I built an app for BattleHack called Tappd, which was designed to be a point-of-sale replacement, where users could tap-to-pay, as well as recieve push notifications for events such as their table being ready.</p></li>
<li><p><strong>November</strong>: I signed up and was chosen to be one of the <a href="https://helpouts.google.com/114052868601022948953/ls/a65184ab017ae8b0">pioneer providers</a> for Google Helpouts, a program designed to help people in real time, using Google Hangouts. I set up a helpout to teach software development, and have had a few dozen <a href="http://blog.votanoticias.com/app-de-meneame-para-google-glass/">successful sessions</a> so far.</p></li>
<li><p><strong>December</strong>: Most recently I released my first open source library for Android: <a href="https://github.com/MichaelEvans/ColorArt">ColorArt</a>. It ended up being very popular, making it onto <a href="http://androidweekly.net/issues/issue-81">Android Weekly</a>, and being the top Java repo for a week on GitHub. And even more exciting was the release of a project I had been working on for 3 months: a complete rewrite of the <a href="https://play.google.com/store/apps/details?id=com.livingsocial.www">LivingSocial app for Android</a>. It was a big update for us, and even got featured on one of my favorite Android news sites: <a href="http://www.androidpolice.com/2013/12/10/livingsocial-hits-v2-0-gets-a-complete-redesign-and-deal-searching/">Android Police</a>.</p></li>
</ul>


<h3>Going Forward</h3>

<p>For 2014, I&rsquo;d really like to contribute more to open source. Much of the work I do takes advantage of the work that others have open sourced, and I really find contributing back rewarding. I&rsquo;d also like to do more writing on this blog, with both personal posts, as well as more tips and tutorials.</p>

<p>Overall, 2013 was a pretty eventful year. Here&rsquo;s to 2014 being even better. Happy New Year everyone!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ColorArt: a library to do iTunes 11-style color matching for Android]]></title>
    <link href="http://michaelevans.org/blog/2013/12/12/colorart-a-library-to-do-itunes-11-style-color-matching-for-android/"/>
    <updated>2013-12-12T00:02:34-05:00</updated>
    <id>http://michaelevans.org/blog/2013/12/12/colorart-a-library-to-do-itunes-11-style-color-matching-for-android</id>
    <content type="html"><![CDATA[<p>Last week I open sourced an Android library called <a href="https://github.com/MichaelEvans/ColorArt">ColorArt</a>, which is a port of the popular OS X library written by the guys over at <a href="http://www.panic.com/blog/itunes-11-and-colors/">Panic</a>. It allows you to use a source image to create a themed image/text display, very similar to the effect which is done in iTunes 11.</p>

<p><img class="center" src="http://michaelevans.org/images/2013/12/12/itunes-11.png" width="600" height="600" title="iTunes Example" ></p>

<!-- more -->


<h3>Using the Library</h3>

<p>ColorArt is pretty easy to use, and can add a cool effect to any app. In order to add it to your project, add the dependency to your <code>build.gradle</code> file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>compile 'org.michaelevans.colorart:library:0.0.1'﻿</span></code></pre></td></tr></table></div></figure>


<p>The next thing you need is to take a Bitmap that you want to use, and pass it to a ColorArt object:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Bitmap bitmap = BitmapFactory.decodeResource(getResources(), R.drawable.album);
</span><span class='line'>ColorArt colorArt = new ColorArt(bitmap);</span></code></pre></td></tr></table></div></figure>


<p>After that, it&rsquo;s as simple as calling some getter methods in order to get the colors that make up the image:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>colorArt.getBackgroundColor()
</span><span class='line'>colorArt.getPrimaryColor()
</span><span class='line'>colorArt.getSecondaryColor()
</span><span class='line'>colorArt.getDetailColor()</span></code></pre></td></tr></table></div></figure>


<p>Voilà! Now you can make cool themed image/text display using Bitmaps as part of your application.</p>

<p><img class="center" src="http://michaelevans.org/images/2013/12/12/sample.png" width="300" height="300" title="Sample" ></p>

<h3>Bonus: FadingImageView</h3>

<p>I also added a class that extends ImageView, which will allow you to add a subtle gradient from the image, to the background color, similar to what you see in the iTunes display. It&rsquo;s also extremely easy to use:</p>

<ol>
<li>Replace the ImageView that you are presently using with a <code>FadingImageView</code>.</li>
<li>Call</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mFadingImageView.setBackgroundColor(colorArt.getBackgroundColor(), FadingImageView.FadeSide.LEFT);</span></code></pre></td></tr></table></div></figure>


<p>to set the background color to fade to, and which side gets the gradient.</p>

<p>That&rsquo;s it!</p>

<p>You can also toggle that gradient with a call to <code>mImageView.setFadeEnabled(true/false);</code>.</p>

<hr />

<p>Are you using this library in your app? Please let me know so I can add a link to it on the <a href="https://github.com/MichaelEvans/ColorArt">GitHub project page</a>! Also, feel free to send pull requests!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hands On with Google Helpouts]]></title>
    <link href="http://michaelevans.org/blog/2013/11/05/hands-on-with-google-helpouts/"/>
    <updated>2013-11-05T10:38:00-05:00</updated>
    <id>http://michaelevans.org/blog/2013/11/05/hands-on-with-google-helpouts</id>
    <content type="html"><![CDATA[<p>This morning Google launched a new product called <a href="https://helpouts.google.com">Helpouts</a>, a tool which will connect people with experts for help via a video conference. I was accepted as a Helpout provider a few weeks back, and have been using the product for a little while during the internal beta. I decided to do an Helpout to teach people to write code, which I cleverly named &ldquo;<a href="https://helpouts.google.com/114052868601022948953/ls/a65184ab017ae8b0">Coding 101: learn the basics of writing code and building apps</a>&rdquo;.</p>

<iframe width="640" height="510" src="http://www.youtube.com/embed/K-VFC9AQM1k " frameborder="0" webkitAllowFullScreen mozallowfullscreen allowfullscreen></iframe>


<p></p>

<!-- more -->


<h3>As a Provider</h3>

<p>As a provider, you are to create a listing which people can sign up for. The process is pretty simple, all that&rsquo;s required is a bit of a description, fill out some pricing options (free, price per minute or per session), some info about yourself explaining your qualificaitons, and a picture for the listing. After that, you&rsquo;ll wait for your listing to be approved by Google.</p>

<p><img class="left" src="http://michaelevans.org/images/2013/11/05/pricing_options.png" width="400" height="400" title="Pricing Options" ></p>

<p>Part of the approval process includes doing a Helpout with a Google employee, in order to get a feel for the system and see how it works. They then also verify the information that you provided to make sure you are who you say you are.</p>

<h3>As a User</h3>

<p>On the consumer side, prospective users can select from any of the categories of Helpouts, which inlude art and music, computer and electronics, cooking, education, fashion and beauty, fitness and nutrition and home and garden. After you select a category, you choose the topic/listing that you&rsquo;re interested in, pick a time, and you&rsquo;ll get an email confirmation regarding your scheduled appointment.</p>

<p><img class="right" src="http://michaelevans.org/images/2013/11/05/your_helpouts.png" width="400" height="500" title="Your Helpouts" ></p>

<p>When its time for your helpout, you&rsquo;ll get a reminder email with a link you can use to quickly join. The interface looks almost identical to the Hangouts UI, except with a few extra widgets to indicate the Helpout title/price/if it&rsquo;s being recorded.</p>

<p>In addition to paricipating from your computer, Google has also launched an <a href="https://play.google.com/store/apps/details?id=com.google.android.apps.helpouts">Android app</a> so that you can get help while you&rsquo;re mobile as well. Whether you&rsquo;re interested in giving Helpouts a shot, want to learn about writing apps for Android, or just want to see what the newest Google product looks like &ndash; feel free to checkout <a href="https://helpouts.google.com/114052868601022948953/ls/a65184ab017ae8b0">my listing!</a>.</p>

<p><img class="center" src="http://michaelevans.org/images/2013/11/05/waiting.png" width="600" height="600" title="Waiting" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using a ViewPager in a ScrollView]]></title>
    <link href="http://michaelevans.org/blog/2013/10/13/using-a-viewpager-in-a-scrollview/"/>
    <updated>2013-10-13T20:48:00-04:00</updated>
    <id>http://michaelevans.org/blog/2013/10/13/using-a-viewpager-in-a-scrollview</id>
    <content type="html"><![CDATA[<p>For a new app that I&rsquo;m working on, I wanted to use a ViewPager inside a ScrollView in order to make a simple image carousel. The only problem is, ScrollViews don&rsquo;t seem to play nicely with horizontally swiping Views. As soon as the user moves their finger even slightly up or down, the ViewPager page change is cancelled, and the page snaps back to the current item. This can lead to an extremely frustrating user experience, because it is difficult for the user to understand why the views won&rsquo;t swipe.</p>

<!-- more -->


<p>A popular solution that I&rsquo;ve seen online is to use the ViewPager&rsquo;s <code>getParent().requestDisallowInterceptTouchEvent(true);</code> method to prevent the ScrollView from scrolling while the ViewPager is being touched or scrolled. The solution that I&rsquo;ve been using is a bit like this, but it provides a little bit of a &ldquo;drag threshold&rdquo;, which is a bit forgiving in the event that the user is trying to drag the ScrollView, but happens to have their finger in the ViewPager. The code I used is as follows:</p>

<figure class='code'><figcaption><span>PagerTouchListener.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">mPager</span><span class="o">.</span><span class="na">setOnTouchListener</span><span class="o">(</span><span class="k">new</span> <span class="n">View</span><span class="o">.</span><span class="na">OnTouchListener</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">dragthreshold</span> <span class="o">=</span> <span class="mi">30</span><span class="o">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">downX</span><span class="o">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">downY</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">onTouch</span><span class="o">(</span><span class="n">View</span> <span class="n">v</span><span class="o">,</span> <span class="n">MotionEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">switch</span> <span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getAction</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_DOWN</span><span class="o">:</span>
</span><span class='line'>            <span class="n">downX</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="n">event</span><span class="o">.</span><span class="na">getRawX</span><span class="o">();</span>
</span><span class='line'>            <span class="n">downY</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="n">event</span><span class="o">.</span><span class="na">getRawY</span><span class="o">();</span>
</span><span class='line'>            <span class="k">break</span><span class="o">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_MOVE</span><span class="o">:</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">distanceX</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">abs</span><span class="o">((</span><span class="kt">int</span><span class="o">)</span> <span class="n">event</span><span class="o">.</span><span class="na">getRawX</span><span class="o">()</span> <span class="o">-</span> <span class="n">downX</span><span class="o">);</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">distanceY</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">abs</span><span class="o">((</span><span class="kt">int</span><span class="o">)</span> <span class="n">event</span><span class="o">.</span><span class="na">getRawY</span><span class="o">()</span> <span class="o">-</span> <span class="n">downY</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">distanceY</span> <span class="o">&gt;</span> <span class="n">distanceX</span> <span class="o">&amp;&amp;</span> <span class="n">distanceY</span> <span class="o">&gt;</span> <span class="n">dragthreshold</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">mPager</span><span class="o">.</span><span class="na">getParent</span><span class="o">().</span><span class="na">requestDisallowInterceptTouchEvent</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
</span><span class='line'>                <span class="n">mScrollView</span><span class="o">.</span><span class="na">getParent</span><span class="o">().</span><span class="na">requestDisallowInterceptTouchEvent</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">distanceX</span> <span class="o">&gt;</span> <span class="n">distanceY</span> <span class="o">&amp;&amp;</span> <span class="n">distanceX</span> <span class="o">&gt;</span> <span class="n">dragthreshold</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">mPager</span><span class="o">.</span><span class="na">getParent</span><span class="o">().</span><span class="na">requestDisallowInterceptTouchEvent</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>                <span class="n">mScrollView</span><span class="o">.</span><span class="na">getParent</span><span class="o">().</span><span class="na">requestDisallowInterceptTouchEvent</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="k">break</span><span class="o">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">MotionEvent</span><span class="o">.</span><span class="na">ACTION_UP</span><span class="o">:</span>
</span><span class='line'>            <span class="n">mScrollView</span><span class="o">.</span><span class="na">getParent</span><span class="o">().</span><span class="na">requestDisallowInterceptTouchEvent</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
</span><span class='line'>            <span class="n">mPager</span><span class="o">.</span><span class="na">getParent</span><span class="o">().</span><span class="na">requestDisallowInterceptTouchEvent</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
</span><span class='line'>            <span class="k">break</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>I found this very useful solution on <a href="http://stackoverflow.com/questions/8381697/viewpager-inside-a-scrollview-does-not-scroll-correclty/16224484#16224484">StackOverflow</a>, among many other solutions that did work (although not as nicely as this one).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Newest App: Bike Finder]]></title>
    <link href="http://michaelevans.org/blog/2013/09/16/my-newest-app-bike-finder/"/>
    <updated>2013-09-16T23:11:00-04:00</updated>
    <id>http://michaelevans.org/blog/2013/09/16/my-newest-app-bike-finder</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://michaelevans.org/images/2013/09/16/map.png" width="240" height="400" title="Map" ></p>

<p>Last week I released my newest Android app, <a href="https://play.google.com/store/apps/details?id=org.michaelevans.bikefinder&amp;referrer=utm_source%3Dblog">Bike Finder</a>. It&rsquo;s a fairly straight forward application that allows you to find bikes and stations for use with Washington DC&rsquo;s Capital Bikeshare system. For those of you not local to DC, Capital Bikeshare is a system that lets you use bikes that are available at docking stations all over the city, as well as parts of northern Virginia. The app is free, and I&rsquo;m looking into adding additional cities that have companies that make their bike sharing data available (currently investigating New York City, Montreal and the Bay Area). If you&rsquo;d like to get your city added, <a href="http://twitter.com/m_evans10">let me know</a>, and I&rsquo;ll see if the data is available, and add it to the to-do list.</p>

<!-- more -->


<p><img class="left" src="http://michaelevans.org/images/2013/09/16/details.png" width="240" height="400" title="Details" ></p>

<p>I&rsquo;m also planning to add some other cool features, like a notification when a &ldquo;favorite&rdquo; station is low on bikes, or when a &ldquo;favorite&rdquo; station is full (so you know you&rsquo;ll have to bring the bike elsewhere). I&rsquo;m also looking into adding some directions/searching feature, so you can navigate your way around the city without having to leave the application.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Parse Android To-do App Tutorial - Part Two - Users]]></title>
    <link href="http://michaelevans.org/blog/2013/08/20/parse-android-todo-app-tutorial-part-two-users/"/>
    <updated>2013-08-20T21:13:00-04:00</updated>
    <id>http://michaelevans.org/blog/2013/08/20/parse-android-todo-app-tutorial-part-two-users</id>
    <content type="html"><![CDATA[<p>Last week <a href="http://michaelevans.org/blog/2013/08/14/tutorial-building-an-android-to-do-list-app-using-parse/">I posted a tutorial</a> on how to create a really basic Android To-do list application using <a href="http://www.parse.com">Parse</a>. It allowed a user to create tasks, and then toggle their completion status. Then, this information was synced to a server, so that the tasks will be kept up to date on multiple devices. The biggest issue with this app so far, was that there was no concept of users, so all tasks were shared among everyone. This week, we&rsquo;re going to introduce two new screens (which are very similar to one another), the registration and login screens.</p>

<!-- more -->


<h3>The Setup</h3>

<p>The first thing we&rsquo;re have to do is two create two new activities, as I mentioned before. I called these <code>LoginActivity</code> and <code>RegisterActivity</code>. For simplicity sake, I&rsquo;ll assume that you used the New Activity Wizard, like we did last week to create the TodoActivity. You can also try the &ldquo;LoginActivity&rdquo; template from the wizard, but we&rsquo;ll skip that for this tutorial.</p>

<h3>Let&rsquo;s Code</h3>

<p>Once you have both those activities set up, let&rsquo;s fill up their layouts. We need to add the following items to these layouts: two <code>EditText</code> fields for a username and password, two <code>TextViews</code> to be the labels for these inputs, and two <code>Buttons</code>, one to sign in/sign up, and one to switch from the sign up to sign in screen and vice versa.</p>

<p>Here&rsquo;s what my registration layout looks like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;LinearLayout</span> <span class="na">xmlns:android=</span><span class="s">&quot;http://schemas.android.com/apk/res/android&quot;</span>
</span><span class='line'>    <span class="na">xmlns:tools=</span><span class="s">&quot;http://schemas.android.com/tools&quot;</span>
</span><span class='line'>    <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>    <span class="na">android:layout_height=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>    <span class="na">android:orientation=</span><span class="s">&quot;vertical&quot;</span>
</span><span class='line'>    <span class="na">android:paddingBottom=</span><span class="s">&quot;@dimen/activity_vertical_margin&quot;</span>
</span><span class='line'>    <span class="na">android:paddingLeft=</span><span class="s">&quot;@dimen/activity_horizontal_margin&quot;</span>
</span><span class='line'>    <span class="na">android:paddingRight=</span><span class="s">&quot;@dimen/activity_horizontal_margin&quot;</span>
</span><span class='line'>    <span class="na">android:paddingTop=</span><span class="s">&quot;@dimen/activity_vertical_margin&quot;</span>
</span><span class='line'>    <span class="na">tools:context=</span><span class="s">&quot;.RegisterActivity&quot;</span> <span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;LinearLayout</span>
</span><span class='line'>        <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>        <span class="na">android:layout_height=</span><span class="s">&quot;0dp&quot;</span>
</span><span class='line'>        <span class="na">android:layout_weight=</span><span class="s">&quot;1&quot;</span>
</span><span class='line'>        <span class="na">android:gravity=</span><span class="s">&quot;center_vertical&quot;</span>
</span><span class='line'>        <span class="na">android:orientation=</span><span class="s">&quot;vertical&quot;</span> <span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;TextView</span>
</span><span class='line'>            <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>            <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>            <span class="na">android:text=</span><span class="s">&quot;@string/username&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;EditText</span>
</span><span class='line'>            <span class="na">android:id=</span><span class="s">&quot;@+id/register_username&quot;</span>
</span><span class='line'>            <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>            <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>            <span class="na">android:ems=</span><span class="s">&quot;10&quot;</span>
</span><span class='line'>            <span class="na">android:inputType=</span><span class="s">&quot;text&quot;</span> <span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>            <span class="nt">&lt;requestFocus</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/EditText&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;TextView</span>
</span><span class='line'>            <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>            <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>            <span class="na">android:text=</span><span class="s">&quot;Password:&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;EditText</span>
</span><span class='line'>            <span class="na">android:id=</span><span class="s">&quot;@+id/register_password&quot;</span>
</span><span class='line'>            <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>            <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>            <span class="na">android:ems=</span><span class="s">&quot;10&quot;</span>
</span><span class='line'>            <span class="na">android:inputType=</span><span class="s">&quot;textPassword&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;Button</span>
</span><span class='line'>            <span class="na">android:id=</span><span class="s">&quot;@+id/sign_up&quot;</span>
</span><span class='line'>            <span class="na">android:layout_width=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>            <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>            <span class="na">android:layout_gravity=</span><span class="s">&quot;right&quot;</span>
</span><span class='line'>            <span class="na">android:onClick=</span><span class="s">&quot;register&quot;</span>
</span><span class='line'>            <span class="na">android:text=</span><span class="s">&quot;Sign Up&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/LinearLayout&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;Button</span>
</span><span class='line'>        <span class="na">android:id=</span><span class="s">&quot;@+id/signInButton&quot;</span>
</span><span class='line'>        <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>        <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>        <span class="na">android:textSize=</span><span class="s">&quot;17sp&quot;</span>
</span><span class='line'>        <span class="na">android:onClick=</span><span class="s">&quot;showLogin&quot;</span>
</span><span class='line'>        <span class="na">android:text=</span><span class="s">&quot;Already Have An Account? Log In!&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/LinearLayout&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The login screen is very similar to that of the registration screen, with the same widgets in the same places, just different ids and labels, so we&rsquo;re just going to go over the registration screen in this tutorial and leave the login screen up as an exercise to the reader. (The code will be available on <a href="https://github.com/MichaelEvans/Parse-Android-Todo">Github</a> if you get stuck). We&rsquo;re going to want to implement that <code>register</code> function in our RegisterActivity, so let&rsquo;s do that next.</p>

<p><img class="center" src="http://michaelevans.org/images/2013/08/20/login.png" width="300" height="500" title="Logging In" ></p>

<p>After declaring and binding variables to the two <code>EditText</code> fields (we&rsquo;ll call those <code>mUsernameField</code> and <code>mPasswordField</code>), we create our register function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">register</span><span class="o">(</span><span class="kd">final</span> <span class="n">View</span> <span class="n">v</span><span class="o">){</span>
</span><span class='line'>  <span class="k">if</span><span class="o">(</span><span class="n">mUsernameField</span><span class="o">.</span><span class="na">getText</span><span class="o">().</span><span class="na">length</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">mPasswordField</span><span class="o">.</span><span class="na">getText</span><span class="o">().</span><span class="na">length</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span>
</span><span class='line'>      <span class="k">return</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">v</span><span class="o">.</span><span class="na">setEnabled</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
</span><span class='line'>  <span class="n">ParseUser</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ParseUser</span><span class="o">();</span>
</span><span class='line'>  <span class="n">user</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="n">mUsernameField</span><span class="o">.</span><span class="na">getText</span><span class="o">().</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>  <span class="n">user</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="n">mPasswordField</span><span class="o">.</span><span class="na">getText</span><span class="o">().</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">user</span><span class="o">.</span><span class="na">signUpInBackground</span><span class="o">(</span><span class="k">new</span> <span class="n">SignUpCallback</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">done</span><span class="o">(</span><span class="n">ParseException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">(</span><span class="n">e</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="n">Intent</span> <span class="n">intent</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Intent</span><span class="o">(</span><span class="n">RegisterActivity</span><span class="o">.</span><span class="na">this</span><span class="o">,</span> <span class="n">TodoActivity</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>              <span class="n">startActivity</span><span class="o">(</span><span class="n">intent</span><span class="o">);</span>
</span><span class='line'>              <span class="n">finish</span><span class="o">();</span>
</span><span class='line'>          <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>              <span class="c1">// Sign up didn&#39;t succeed. Look at the ParseException</span>
</span><span class='line'>              <span class="c1">// to figure out what went wrong</span>
</span><span class='line'>              <span class="n">v</span><span class="o">.</span><span class="na">setEnabled</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="http://michaelevans.org/images/2013/08/20/registering.png" width="300" height="500" title="Registering" ></p>

<p>What&#8217; were doing here is a) bailing out early if the user fails to fill in one of the fields, b) disabling the button while the network request is running, so the user can&rsquo;t try to register multiple times by accident, c) creating a ParseUser object with the username and password from the <code>EditText</code> fields, and then calling <code>signUpInBackground</code>, with a callback which is run when the request is complete. If there is an error for any reason, we re-enable the registration button, so that the user can fix any issues and resubmit. (We&rsquo;ll get to error handling a little later.) If there isn&rsquo;t an error, we start the TodoActivity that we <a href="http://michaelevans.org/blog/2013/08/14/tutorial-building-an-android-to-do-list-app-using-parse/">created last week</a>.</p>

<p>Huzzah! If you sign up, you now see a users table in your Parse console!</p>

<p><img class="center" src="http://michaelevans.org/images/2013/08/20/users.png" width="800" height="800" title="Users Console" ></p>

<h3>Making Things Belong</h3>

<p>Now we need to make some changes to the TodoActivity. The first thing we need to do is make the query that fetches the data only return Tasks where the user is the same as the logged in user. We can do that by adding the following line that will modify our ParseQuery:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">query</span><span class="o">.</span><span class="na">whereEqualTo</span><span class="o">(</span><span class="s">&quot;user&quot;</span><span class="o">,</span> <span class="n">ParseUser</span><span class="o">.</span><span class="na">getCurrentUser</span><span class="o">());</span>
</span></code></pre></td></tr></table></div></figure>


<p>We also need to make the Tasks belong to a user where they are created, which we can do by adding the following two statements when we are creating our new Tasks (we&rsquo;re also going to add the setters and getter for the user object on the Task model):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">t</span><span class="o">.</span><span class="na">setACL</span><span class="o">(</span><span class="k">new</span> <span class="n">ParseACL</span><span class="o">(</span><span class="n">ParseUser</span><span class="o">.</span><span class="na">getCurrentUser</span><span class="o">()));</span>
</span><span class='line'><span class="n">t</span><span class="o">.</span><span class="na">setUser</span><span class="o">(</span><span class="n">ParseUser</span><span class="o">.</span><span class="na">getCurrentUser</span><span class="o">());</span>
</span></code></pre></td></tr></table></div></figure>


<p>These lines will make the Task only read/writeable by the owner, and set the user associated with them to the current user. Take a peek in your Parse console, and you&rsquo;ll see the Tasks now have an owner!</p>

<p><img class="center" src="http://michaelevans.org/images/2013/08/20/tasks.png" width="800" height="800" title="Tasks now belong!" ></p>

<p>We also want to make it possible for a user to log out. We&rsquo;ll do this by providing an option in the action bar settings menu. We can do this by adding an entry in the <code>res/menu/todo.xml</code> file like the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;item</span>
</span><span class='line'>    <span class="na">android:id=</span><span class="s">&quot;@+id/action_logout&quot;</span>
</span><span class='line'>    <span class="na">android:orderInCategory=</span><span class="s">&quot;100&quot;</span>
</span><span class='line'>    <span class="na">android:showAsAction=</span><span class="s">&quot;never&quot;</span>
</span><span class='line'>    <span class="na">android:title=</span><span class="s">&quot;@string/action_logout&quot;</span><span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then all we need to do is wire up this action bar item. When options items are selected, there&rsquo;s a method that will be called in your activity named <code>onOptionsItemSelected</code>. We&rsquo;ll just fill this function out like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">onOptionsItemSelected</span><span class="o">(</span><span class="n">MenuItem</span> <span class="n">item</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">switch</span> <span class="o">(</span><span class="n">item</span><span class="o">.</span><span class="na">getItemId</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">action_logout</span><span class="o">:</span>
</span><span class='line'>      <span class="n">ParseUser</span><span class="o">.</span><span class="na">logOut</span><span class="o">();</span>
</span><span class='line'>      <span class="n">Intent</span> <span class="n">intent</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Intent</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">LoginActivity</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>      <span class="n">startActivity</span><span class="o">(</span><span class="n">intent</span><span class="o">);</span>
</span><span class='line'>      <span class="n">finish</span><span class="o">();</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If the user selects the logout option, call the <code>logout()</code> method, and then send them back to the login screen.</p>

<p>The last thing we need to do in the TodoActivity is prevent a user from accessing this class while no one is logged in. We can do that back up in the <code>onCreate</code> method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">ParseUser</span> <span class="n">currentUser</span> <span class="o">=</span> <span class="n">ParseUser</span><span class="o">.</span><span class="na">getCurrentUser</span><span class="o">();</span>
</span><span class='line'><span class="k">if</span><span class="o">(</span><span class="n">currentUser</span> <span class="o">==</span> <span class="kc">null</span><span class="o">){</span>
</span><span class='line'>  <span class="n">Intent</span> <span class="n">intent</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Intent</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">LoginActivity</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>  <span class="n">startActivity</span><span class="o">(</span><span class="n">intent</span><span class="o">);</span>
</span><span class='line'>  <span class="n">finish</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If there is no user currenty logged in, stop the TodoActivity, and forward us to the LoginActivity.</p>

<h3>Error Handling</h3>

<p>As I alluded to before, we&rsquo;re also going to want to add error handling. This way, if the user puts in bad credentials, or they try to register a username that&rsquo;s already taken, they&rsquo;ll get an informative error message. Let&rsquo;s do this by adding a <code>TextView</code> in our layout to display the message: (You&rsquo;ll also want to add a <code>colors.xml</code> file that will declare what <code>@color/red</code> is.)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;TextView</span>
</span><span class='line'>  <span class="na">android:id=</span><span class="s">&quot;@+id/error_messages&quot;</span>
</span><span class='line'>  <span class="na">android:layout_width=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>  <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>  <span class="na">android:layout_gravity=</span><span class="s">&quot;center_horizontal&quot;</span>
</span><span class='line'>  <span class="na">android:textColor=</span><span class="s">&quot;@color/red&quot;</span>
</span><span class='line'>  <span class="na">android:textAppearance=</span><span class="s">&quot;?android:attr/textAppearanceMedium&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then we&rsquo;ll bind a variable to that view, and add the following error handling to the else statement from our <code>signUpInBackground</code> call:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">switch</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getCode</span><span class="o">()){</span>
</span><span class='line'><span class="k">case</span> <span class="n">ParseException</span><span class="o">.</span><span class="na">USERNAME_TAKEN</span><span class="o">:</span>
</span><span class='line'>  <span class="n">mErrorField</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="s">&quot;Sorry, this username has already been taken.&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="k">break</span><span class="o">;</span>
</span><span class='line'><span class="k">case</span> <span class="n">ParseException</span><span class="o">.</span><span class="na">USERNAME_MISSING</span><span class="o">:</span>
</span><span class='line'>  <span class="n">mErrorField</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="s">&quot;Sorry, you must supply a username to register.&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="k">break</span><span class="o">;</span>
</span><span class='line'><span class="k">case</span> <span class="n">ParseException</span><span class="o">.</span><span class="na">PASSWORD_MISSING</span><span class="o">:</span>
</span><span class='line'>  <span class="n">mErrorField</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="s">&quot;Sorry, you must supply a password to register.&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="k">break</span><span class="o">;</span>
</span><span class='line'><span class="k">default</span><span class="o">:</span>
</span><span class='line'>  <span class="n">mErrorField</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getLocalizedMessage</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="n">v</span><span class="o">.</span><span class="na">setEnabled</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will set some nice messages that will explain what the error is, or fall back to the message that Parse sends us, if it&rsquo;s some other type of problem.</p>

<p><img class="center" src="http://michaelevans.org/images/2013/08/20/error_handling.png" width="300" height="500" title="Pretty Error Handling" ></p>

<h3>Possibilities for Next Time</h3>

<p>Next time we can take a look at adding some delete functionality, or maybe tabs for looking over completed/incomplete tasks. Another possiblity is adding social sign in, using Twitter and Facebook. Other suggestions are welcome!</p>

<p><strong>You can find the source on Github <a href="https://github.com/MichaelEvans/Parse-Android-Todo">here</a>.</strong></p>

<hr />

<p>Like this post? Questions, concerns or mistakes? Any other Android tutorials you&rsquo;d like to hear about? Let me know on <a href="https://twitter.com/m_evans10">Twitter</a> or <a href="https://plus.google.com/114052868601022948953/posts">Google Plus</a>, or leave a comment below.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tutorial: Building an Android To-Do List app using Parse]]></title>
    <link href="http://michaelevans.org/blog/2013/08/14/tutorial-building-an-android-to-do-list-app-using-parse/"/>
    <updated>2013-08-14T22:08:00-04:00</updated>
    <id>http://michaelevans.org/blog/2013/08/14/tutorial-building-an-android-to-do-list-app-using-parse</id>
    <content type="html"><![CDATA[<p>For a while now I&rsquo;ve been using <a href="http://www.parse.com">Parse</a> for small apps, it allows you to iterate quickly and create a backend for an app without too much work. It also seems like a perfect jumping off point for a series of Android tutorials, where we&rsquo;ll be building a &ldquo;Todo List&rdquo; application. (This tutorial assumes that you have <a href="http://developer.android.com/tools/sdk/eclipse-adt.html">Eclipse and the ADT</a> installed already.)</p>

<!-- more -->


<h2>The Setup</h2>

<p>First thing you&rsquo;ll want to do is sign up for Parse, and create a new Application. I called mine &ldquo;Todo&rdquo; here, but you can call it anything you&rsquo;d like. After you pick a name, you&rsquo;ll be presented a screen like the following, which contains your API keys. Do not lose these, this is how your app will connect to the Parse services. (I have removed my keys in the screenshot below.)</p>

<p><img class="center" src="http://michaelevans.org/images/2013/08/14/parse_keys.png" width="300" height="500" title="Parse Keys" ></p>

<p>Next, you&rsquo;ll want to download the Parse libraries from <a href="https://parse.com/downloads/android/Parse/latest">here</a>.</p>

<p>Back in Eclipse, open the New Project Wizard and create a new Android application. I set the minimum SDK version to Honeycomb in the screenshot below, but feel free to pick something newer if you&rsquo;d like.</p>

<p><img class="center" src="http://michaelevans.org/images/2013/08/14/android_wizard.png" width="500" height="500" title="Android New Project Wizard" ></p>

<p>You&rsquo;ll then be taken to a screen to create your starting activity. Choose Blank Activity, and feel free to name it whatever you like.</p>

<p><img class="center" src="http://michaelevans.org/images/2013/08/14/android_wizard_3.png" width="500" height="500" title="Android New Project Wizard" ></p>

<p>After you complete the wizard, you&rsquo;ll have a new project in your workspace. Copy the Parse jar file that you downloaded before to the <code>libs/</code> directory, and you&rsquo;ll be all set to begin coding.</p>

<h2>Let&rsquo;s Code</h2>

<h3>Parse Setup</h3>

<p>First thing we&rsquo;ll add is the code to set up Parse. In the onCreate method of your Activity, add the following (remember to replace APP_ID and CLIENT_ID with the keys you got from Parse earlier):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Parse</span><span class="o">.</span><span class="na">initialize</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="s">&quot;APP_ID&quot;</span><span class="o">,</span> <span class="s">&quot;CLIENT_ID&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">ParseAnalytics</span><span class="o">.</span><span class="na">trackAppOpened</span><span class="o">(</span><span class="n">getIntent</span><span class="o">());</span>
</span></code></pre></td></tr></table></div></figure>


<p>That second line is optional, but it adds analytics tracking to your app, which is a nice feature to get for free. In addition to that initializer code, we&rsquo;ll need to add get some permissions for our app. Add the following two permissions to your AndroidManifest.xml file, above the <code>&lt;application&gt;</code> tag:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;</span><span class="n">uses</span><span class="o">-</span><span class="n">permission</span> <span class="nl">android:</span><span class="n">name</span><span class="o">=</span><span class="s">&quot;android.permission.INTERNET&quot;</span> <span class="o">/&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">uses</span><span class="o">-</span><span class="n">permission</span> <span class="nl">android:</span><span class="n">name</span><span class="o">=</span><span class="s">&quot;android.permission.ACCESS_NETWORK_STATE&quot;</span> <span class="o">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Data Model</h3>

<p>Now we&rsquo;re able to interact with Parse using the included library. The next thing we&rsquo;ll want to do is to declare a Task model. This object will represent an individual Task Object in Parse&rsquo;s datastore. Create a new class named Task.java, and fill it out like the following:</p>

<figure class='code'><figcaption><span>Task.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">com.parse.ParseClassName</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.parse.ParseObject</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@ParseClassName</span><span class="o">(</span><span class="s">&quot;Task&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Task</span> <span class="kd">extends</span> <span class="n">ParseObject</span><span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">Task</span><span class="o">(){</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isCompleted</span><span class="o">(){</span>
</span><span class='line'>      <span class="k">return</span> <span class="nf">getBoolean</span><span class="o">(</span><span class="s">&quot;completed&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setCompleted</span><span class="o">(</span><span class="kt">boolean</span> <span class="n">complete</span><span class="o">){</span>
</span><span class='line'>      <span class="n">put</span><span class="o">(</span><span class="s">&quot;completed&quot;</span><span class="o">,</span> <span class="n">complete</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="nf">getDescription</span><span class="o">(){</span>
</span><span class='line'>      <span class="k">return</span> <span class="nf">getString</span><span class="o">(</span><span class="s">&quot;description&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setDescription</span><span class="o">(</span><span class="n">String</span> <span class="n">description</span><span class="o">){</span>
</span><span class='line'>      <span class="n">put</span><span class="o">(</span><span class="s">&quot;description&quot;</span><span class="o">,</span> <span class="n">description</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The annotation tells Parse what &ldquo;table&rdquo; that our object corresponds with, and then we are providing methods to get and set two properties: a description, and a completed status. In addition to those, Parse will give us created_at and updated_at fields for free.</p>

<p>Now that we&rsquo;ve declared our model, we need to register this class with our activity. Below the initialization code, add a line like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">ParseObject</span><span class="o">.</span><span class="na">registerSubclass</span><span class="o">(</span><span class="n">Task</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>The Layout</h3>

<p>This tells Parse to use the annotation that we declared at the top of the model. The next thing we want to do is set up the layout for our activity. This XML file will represent the UI of our application. Open up the todo_activity.xml file, and replace the contents with this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;LinearLayout</span> <span class="na">xmlns:android=</span><span class="s">&quot;http://schemas.android.com/apk/res/android&quot;</span>
</span><span class='line'>    <span class="na">xmlns:tools=</span><span class="s">&quot;http://schemas.android.com/tools&quot;</span>
</span><span class='line'>    <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>    <span class="na">android:layout_height=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>    <span class="na">android:orientation=</span><span class="s">&quot;vertical&quot;</span>
</span><span class='line'>    <span class="na">android:paddingLeft=</span><span class="s">&quot;@dimen/activity_horizontal_margin&quot;</span>
</span><span class='line'>    <span class="na">android:paddingRight=</span><span class="s">&quot;@dimen/activity_horizontal_margin&quot;</span>
</span><span class='line'>    <span class="na">tools:context=</span><span class="s">&quot;.TodoActivity&quot;</span> <span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;LinearLayout</span>
</span><span class='line'>        <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>        <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>        <span class="na">android:orientation=</span><span class="s">&quot;horizontal&quot;</span> <span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;EditText</span>
</span><span class='line'>            <span class="na">android:id=</span><span class="s">&quot;@+id/task_input&quot;</span>
</span><span class='line'>            <span class="na">android:layout_width=</span><span class="s">&quot;0dp&quot;</span>
</span><span class='line'>            <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>            <span class="na">android:layout_weight=</span><span class="s">&quot;1&quot;</span>
</span><span class='line'>            <span class="na">android:ems=</span><span class="s">&quot;10&quot;</span>
</span><span class='line'>            <span class="na">android:inputType=</span><span class="s">&quot;text&quot;</span>
</span><span class='line'>            <span class="na">android:hint=</span><span class="s">&quot;Enter a Task&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;requestFocus</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/EditText&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;Button</span>
</span><span class='line'>            <span class="na">android:id=</span><span class="s">&quot;@+id/submit_button&quot;</span>
</span><span class='line'>            <span class="na">android:layout_width=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>            <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>            <span class="na">android:onClick=</span><span class="s">&quot;createTask&quot;</span>
</span><span class='line'>            <span class="na">android:text=</span><span class="s">&quot;Submit&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/LinearLayout&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;ListView</span>
</span><span class='line'>        <span class="na">android:id=</span><span class="s">&quot;@+id/task_list&quot;</span>
</span><span class='line'>        <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>        <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/LinearLayout&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here we are declaring a layout that contains an input field and a button (for creating new tasks), as well as a ListView for showing the existing tasks. If you run what we&rsquo;ve done so far, you should end up with an application on your device that looks like this:</p>

<p><img class="center" src="http://michaelevans.org/images/2013/08/14/step1.png" width="300" height="500" title="First Run" ></p>

<p>You can type in the input box, but if you hit the submit button, you&rsquo;ll notice the app will crash. Why&rsquo;s that? Because we said in our XML that the button will perform the <code>createTask</code> method when you click on it, but we never declared that method in our activity. Let&rsquo;s do that now.</p>

<p>In your onCreate method, let&rsquo;s get a reference to the EditText and ListView, since we&rsquo;ll be using these later. You can do that by declaring using the <code>findViewById()</code> method. We&rsquo;ll save the results of these calls as private variables. For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">mTaskInput</span> <span class="o">=</span> <span class="o">(</span><span class="n">EditText</span><span class="o">)</span> <span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">task_input</span><span class="o">);</span>
</span><span class='line'><span class="n">mListView</span> <span class="o">=</span> <span class="o">(</span><span class="n">ListView</span><span class="o">)</span> <span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">task_list</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then we can create the createTask method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">createTask</span><span class="o">(</span><span class="n">View</span> <span class="n">v</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">mTaskInput</span><span class="o">.</span><span class="na">getText</span><span class="o">().</span><span class="na">length</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">){</span>
</span><span class='line'>          <span class="n">Task</span> <span class="n">t</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Task</span><span class="o">();</span>
</span><span class='line'>          <span class="n">t</span><span class="o">.</span><span class="na">setDescription</span><span class="o">(</span><span class="n">mTaskInput</span><span class="o">.</span><span class="na">getText</span><span class="o">().</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>          <span class="n">t</span><span class="o">.</span><span class="na">setCompleted</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
</span><span class='line'>          <span class="n">t</span><span class="o">.</span><span class="na">saveEventually</span><span class="o">();</span>
</span><span class='line'>          <span class="n">mTaskInput</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="s">&quot;&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>What we are doing here is checking to see if the input has anything in it (don&rsquo;t want to create a task without a description), creating a new Task object, setting its fields, and then calling <code>saveEventually()</code>. This is a convenience method from Parse, that will queue this object to be saved. That way, if the user doesn&rsquo;t have a network connection, the task will be uploaded later when they are back online. Finally, we empty out the input field so that it&rsquo;s ready for another task.</p>

<p>Now if you type in a task and hit save, the input field will be blank, but if you go to your Parse Console, you&rsquo;ll see the data in the data browser:</p>

<p><img class="center" src="http://michaelevans.org/images/2013/08/14/parse_console.png" width="800" height="800" title="Parse Console" ></p>

<p>Now let&rsquo;s set up the app to fetch the Tasks from Parse.</p>

<h3>Querying</h3>

<p>First let&rsquo;s set up a TaskAdapter. An adapter is what you add to a ListView to decide what kind of behavior the list will have (layout of each row, etc.) Create a new class called TaskAdapter that extends from ArrayAdapter like the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.content.Context</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.graphics.Paint</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.view.LayoutInflater</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.view.View</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.view.ViewGroup</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.widget.ArrayAdapter</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">android.widget.TextView</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TaskAdapter</span> <span class="kd">extends</span> <span class="n">ArrayAdapter</span><span class="o">&lt;</span><span class="n">Task</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">Context</span> <span class="n">mContext</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Task</span><span class="o">&gt;</span> <span class="n">mTasks</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">TaskAdapter</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">,</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Task</span><span class="o">&gt;</span> <span class="n">objects</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">super</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">task_row_item</span><span class="o">,</span> <span class="n">objects</span><span class="o">);</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">mContext</span> <span class="o">=</span> <span class="n">context</span><span class="o">;</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">mTasks</span> <span class="o">=</span> <span class="n">objects</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="n">View</span> <span class="nf">getView</span><span class="o">(</span><span class="kt">int</span> <span class="n">position</span><span class="o">,</span> <span class="n">View</span> <span class="n">convertView</span><span class="o">,</span> <span class="n">ViewGroup</span> <span class="n">parent</span><span class="o">){</span>
</span><span class='line'>      <span class="k">if</span><span class="o">(</span><span class="n">convertView</span> <span class="o">==</span> <span class="kc">null</span><span class="o">){</span>
</span><span class='line'>          <span class="n">LayoutInflater</span> <span class="n">mLayoutInflater</span> <span class="o">=</span> <span class="n">LayoutInflater</span><span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="n">mContext</span><span class="o">);</span>
</span><span class='line'>          <span class="n">convertView</span> <span class="o">=</span> <span class="n">mLayoutInflater</span><span class="o">.</span><span class="na">inflate</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">task_row_item</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">Task</span> <span class="n">task</span> <span class="o">=</span> <span class="n">mTasks</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">position</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">TextView</span> <span class="n">descriptionView</span> <span class="o">=</span> <span class="o">(</span><span class="n">TextView</span><span class="o">)</span> <span class="n">convertView</span><span class="o">.</span><span class="na">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">task_description</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">descriptionView</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="n">task</span><span class="o">.</span><span class="na">getDescription</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span><span class="o">(</span><span class="n">task</span><span class="o">.</span><span class="na">isCompleted</span><span class="o">()){</span>
</span><span class='line'>          <span class="n">descriptionView</span><span class="o">.</span><span class="na">setPaintFlags</span><span class="o">(</span><span class="n">descriptionView</span><span class="o">.</span><span class="na">getPaintFlags</span><span class="o">()</span> <span class="o">|</span> <span class="n">Paint</span><span class="o">.</span><span class="na">STRIKE_THRU_TEXT_FLAG</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span><span class="k">else</span><span class="o">{</span>
</span><span class='line'>          <span class="n">descriptionView</span><span class="o">.</span><span class="na">setPaintFlags</span><span class="o">(</span><span class="n">descriptionView</span><span class="o">.</span><span class="na">getPaintFlags</span><span class="o">()</span> <span class="o">&amp;</span> <span class="o">(~</span><span class="n">Paint</span><span class="o">.</span><span class="na">STRIKE_THRU_TEXT_FLAG</span><span class="o">));</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">return</span> <span class="n">convertView</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This class will take an array of Tasks, and for each row in the ListView, set a TextView with the id <code>task_description</code> to the description value, and set a paint flag for Strikethrough if the task is completed. You&rsquo;ll also notice that this class inflates a layout called <code>task_row_item</code>, which we can create now.</p>

<p>In the <code>res/layouts/</code> folder, create a file called &lsquo;task_row_item.xml&rsquo;, and fill it with the following content:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;LinearLayout</span> <span class="na">xmlns:android=</span><span class="s">&quot;http://schemas.android.com/apk/res/android&quot;</span>
</span><span class='line'>    <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>    <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>    <span class="na">android:paddingTop=</span><span class="s">&quot;@dimen/activity_vertical_margin&quot;</span>
</span><span class='line'>    <span class="na">android:paddingBottom=</span><span class="s">&quot;@dimen/activity_vertical_margin&quot;</span>
</span><span class='line'>    <span class="na">android:orientation=</span><span class="s">&quot;horizontal&quot;</span> <span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;TextView</span>
</span><span class='line'>        <span class="na">android:id=</span><span class="s">&quot;@+id/task_description&quot;</span>
</span><span class='line'>        <span class="na">android:layout_width=</span><span class="s">&quot;0dp&quot;</span>
</span><span class='line'>        <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>        <span class="na">android:layout_gravity=</span><span class="s">&quot;center_vertical&quot;</span>
</span><span class='line'>        <span class="na">android:layout_weight=</span><span class="s">&quot;1&quot;</span>
</span><span class='line'>        <span class="na">android:textAppearance=</span><span class="s">&quot;?android:attr/textAppearanceMedium&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/LinearLayout&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is just a basic TextView which will hold the description of the item. Now that we have the adapter set up, let&rsquo;s create one and apply it to our ListView. Back in the onCreate method of our Activity, create an instance of our TaskAdapter, and set its initial contents to a new ArrayList of Tasks, and then set the adapter of our ListView to this adapter.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">mAdapter</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TaskAdapter</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Task</span><span class="o">&gt;());</span>
</span><span class='line'><span class="n">mListView</span><span class="o">.</span><span class="na">setAdapter</span><span class="o">(</span><span class="n">mAdapter</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>You&rsquo;ll notice that nothing happens if you run the application again, since we didn&rsquo;t yet fetch any data from Parse. Create a new method called <code>updateData()</code> and put in the following code: (be sure to make a call to this method at the end of <code>onCreate()</code>)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">updateData</span><span class="o">(){</span>
</span><span class='line'>  <span class="n">ParseQuery</span><span class="o">&lt;</span><span class="n">Task</span><span class="o">&gt;</span> <span class="n">query</span> <span class="o">=</span> <span class="n">ParseQuery</span><span class="o">.</span><span class="na">getQuery</span><span class="o">(</span><span class="n">Task</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>  <span class="n">query</span><span class="o">.</span><span class="na">findInBackground</span><span class="o">(</span><span class="k">new</span> <span class="n">FindCallback</span><span class="o">&lt;</span><span class="n">Task</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>          
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">done</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Task</span><span class="o">&gt;</span> <span class="n">tasks</span><span class="o">,</span> <span class="n">ParseException</span> <span class="n">error</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">if</span><span class="o">(</span><span class="n">tasks</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>
</span><span class='line'>              <span class="n">mAdapter</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span>
</span><span class='line'>              <span class="n">mAdapter</span><span class="o">.</span><span class="na">addAll</span><span class="o">(</span><span class="n">tasks</span><span class="o">);</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">});</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will query Parse for all the Task objects, and return a list of them. Then we will clear the existing set of Tasks from our adapter, and replace the existing list with those. Now if you run the app, you&rsquo;ll be greeted with something like the following:</p>

<p><img class="center" src="http://michaelevans.org/images/2013/08/14/step2.png" width="300" height="500" title="Step 2" ></p>

<p>Let&rsquo;s also add this to our <code>createTask()</code> method, to insert the Task we just created at the top of the list:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">mAdapter</span><span class="o">.</span><span class="na">insert</span><span class="o">(</span><span class="n">t</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will provide the user with an immediate hint of what happened, rather than uploading it, and waiting to resync the data or something.</p>

<p>Now we&rsquo;re starting to have a functional app! Let&rsquo;s add one more feature though. When you tap on a ListView row, the &ldquo;completed&rdquo; status of the task should toggle.</p>

<h3>Let&rsquo;s Toggle!</h3>

<p>Let&rsquo;s register an OnItemClickListener for our class, so that we&rsquo;ll get a callback whenever a list item is clicked. We can do that with a call to</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">mListView</span><span class="o">.</span><span class="na">setOnItemClickListener</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then we just make our Activity implement the <code>OnItemClickListener</code> interface, and override the <code>onItemClick</code> method. We can use some code like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onItemClick</span><span class="o">(</span><span class="n">AdapterView</span><span class="o">&lt;?&gt;</span> <span class="n">parent</span><span class="o">,</span> <span class="n">View</span> <span class="n">view</span><span class="o">,</span> <span class="kt">int</span> <span class="n">position</span><span class="o">,</span> <span class="kt">long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">Task</span> <span class="n">task</span> <span class="o">=</span> <span class="n">mAdapter</span><span class="o">.</span><span class="na">getItem</span><span class="o">(</span><span class="n">position</span><span class="o">);</span>
</span><span class='line'>  <span class="n">TextView</span> <span class="n">taskDescription</span> <span class="o">=</span> <span class="o">(</span><span class="n">TextView</span><span class="o">)</span> <span class="n">view</span><span class="o">.</span><span class="na">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">task_description</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">task</span><span class="o">.</span><span class="na">setCompleted</span><span class="o">(!</span><span class="n">task</span><span class="o">.</span><span class="na">isCompleted</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="o">(</span><span class="n">task</span><span class="o">.</span><span class="na">isCompleted</span><span class="o">()){</span>
</span><span class='line'>      <span class="n">taskDescription</span><span class="o">.</span><span class="na">setPaintFlags</span><span class="o">(</span><span class="n">taskDescription</span><span class="o">.</span><span class="na">getPaintFlags</span><span class="o">()</span> <span class="o">|</span> <span class="n">Paint</span><span class="o">.</span><span class="na">STRIKE_THRU_TEXT_FLAG</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span><span class="k">else</span><span class="o">{</span>
</span><span class='line'>      <span class="n">taskDescription</span><span class="o">.</span><span class="na">setPaintFlags</span><span class="o">(</span><span class="n">taskDescription</span><span class="o">.</span><span class="na">getPaintFlags</span><span class="o">()</span> <span class="o">&amp;</span> <span class="o">(~</span><span class="n">Paint</span><span class="o">.</span><span class="na">STRIKE_THRU_TEXT_FLAG</span><span class="o">));</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">task</span><span class="o">.</span><span class="na">saveEventually</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will toggle the completion status of the clicked item, and then update the strikethrough, just as we did in the ArrayAdapter before. Then we&rsquo;ll make another call to <code>saveEventually()</code>, to update that task on Parse&rsquo;s servers, when a network connection is available.</p>

<p>That&rsquo;s it! Now you should be able to launch the application, and create, complete and un-complete tasks as you wish!</p>

<p><img class="center" src="http://michaelevans.org/images/2013/08/14/step3.png" width="300" height="500" title="Step 2" ></p>

<h2>Optimizations/Improvements</h2>

<p>Let&rsquo;s make some quick improvements to the app. First, let&rsquo;s extract the hardcoded strings in our layout to a strings.xml file, so that we can support other languages. Change the text in the <code>android:text=</code> attributes to something like <code>@string/submit_text</code>, and create a <code>strings.xml</code> file in <code>res/values</code> where these strings will live. This allows you to create other values folders for quick localization.</p>

<p>The other optimization that we&rsquo;ll make is regarding the caching. You&rsquo;ll notice that if you leave the application and come back, you&rsquo;re left with a blank white screen while the Tasks are loaded from Parse. This is a bit ugly, and leaves a bad user experience. We can mitigate that by adding caching, where the results of our query will be saved locally so that we have results instantly, and then we can request the updated tasks from the network. With Parse, this is dead simple. Add the following snippet to your <code>query</code> object before you do a findInBackground:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">query</span><span class="o">.</span><span class="na">setCachePolicy</span><span class="o">(</span><span class="n">CachePolicy</span><span class="o">.</span><span class="na">CACHE_THEN_NETWORK</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now when you load up the app, you&rsquo;ll see the tasks from last time in the list, while the network is being queried.</p>

<h2>Possibilities for Next Time</h2>

<p>Next time we can take a look at adding multi-user support (so that not everyone shares a task list), and possibly some fancier UI, like a swipe-to-remove feature. Feel free to make other suggestions of things you&rsquo;d like to see!</p>

<p><strong>You can download the APK for this tutorial <a href="https://app.box.com/s/e79stk16p1b92w937e6q">here</a>, and find the source on Github <a href="https://github.com/MichaelEvans/Parse-Android-Todo">here</a>.</strong></p>

<hr />

<p>Like this post? Questions, concerns or mistakes? Any other Android tutorials you&rsquo;d like to hear about? Let me know on <a href="https://twitter.com/m_evans10">Twitter</a> or <a href="https://plus.google.com/114052868601022948953/posts">Google Plus</a>, or leave a comment below.</p>
]]></content>
  </entry>
  
</feed>
